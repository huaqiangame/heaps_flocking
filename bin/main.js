// Generated by Haxe 4.2.0-rc.1+e34463538
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
}
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = "HxOverrides";
class Lambda {
	static array(it) {
		let a = [];
		let i = $getIterator(it);
		while(i.hasNext()) {
			let i1 = i.next();
			a.push(i1);
		}
		return a;
	}
}
Lambda.__name__ = "Lambda";
class hxd_App {
	constructor() {
		if(hxd_App._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		let engine = h3d_Engine.CURRENT;
		let _gthis = this;
		if(engine != null) {
			this.engine = engine;
			engine.onReady = $bind(this,this.setup);
			haxe_Timer.delay($bind(this,this.setup),0);
		} else {
			hxd_System.start(function() {
				engine = new h3d_Engine();
				_gthis.engine = engine;
				engine.onReady = $bind(_gthis,_gthis.setup);
				engine.init();
			});
		}
	}
	onResize() {
	}
	render(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	setup() {
		let initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		let _gthis = this;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	loadAssets(onLoaded) {
		onLoaded();
	}
	init() {
	}
	mainLoop() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		let dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	update(dt) {
	}
	static staticHandler() {
	}
}
hxd_App.__name__ = "hxd.App";
Object.assign(hxd_App.prototype, {
	__class__: hxd_App
});
class Main extends hxd_App {
	constructor() {
		hxd_App._hx_skip_constructor = true;
		super();
		hxd_App._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.flocks = [];
		this.arr2 = [];
		this.arr = [];
		super._hx_constructor();
	}
	init() {
		this.engine.backgroundColor = 16777215;
		let g = new h2d_Graphics(this.s2d);
		let w = this.s2d.width + 30;
		let h = this.s2d.height + 30;
		help_Grid.drawGrid(w / 30 | 0,h / 30 | 0,30,30,g);
		let _g = 0;
		while(_g < 100) {
			++_g;
			let fish = this.s2d;
			let fish1 = this.s2d;
			let this1 = new hxmath_math_Vector2Default(31 + Math.floor((this.s2d.width - 35 - 31 + 1) * Math.random()),31 + Math.floor(5 * Math.random()));
			let fish2 = new fish_Fish(fish,fish1,this1,30);
			this.arr2.push(fish2);
			this.flocks.push(fish2.flock);
		}
	}
	update(dt) {
		let _g = 0;
		let _g1 = this.arr;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			b.update(dt);
		}
		let _g2 = 0;
		let _g3 = this.flocks;
		while(_g2 < _g3.length) {
			let f = _g3[_g2];
			++_g2;
			f.run(this.flocks);
		}
		let _g4 = 0;
		let _g5 = this.arr2;
		while(_g4 < _g5.length) {
			let f = _g5[_g4];
			++_g4;
			f.update(dt);
		}
	}
	static main() {
		new Main();
	}
}
Main.__name__ = "Main";
Main.__super__ = hxd_App;
Object.assign(Main.prototype, {
	__class__: Main
});
Math.__name__ = "Math";
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
}
Reflect.__name__ = "Reflect";
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
}
StringTools.__name__ = "StringTools";
class Type {
	static createEnum(e,constr,params) {
		let f = Reflect.field(e,constr);
		if(f == null) {
			throw haxe_Exception.thrown("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static createEnumIndex(e,index,params) {
		let c = e.__constructs__[index];
		if(c == null) {
			throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
		}
		return Type.createEnum(e,c,params);
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			let e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			let enm = $hxEnums[e];
			let ctorName = enm.__constructs__[a._hx_index];
			let params = enm[ctorName].__params__;
			let _g = 0;
			while(_g < params.length) {
				let f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( _g ) {
			return false;
		}
		return true;
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let ctorName = enm.__constructs__[e._hx_index];
		let params = enm[ctorName].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
}
Type.__name__ = "Type";
class fish_Ball {
	constructor(parent,s2d,location,velocity) {
		this.s2d = s2d;
		this.g = new h2d_Graphics(parent);
		this.g.beginFill(16777215 * Math.random() | 0,0.3);
		this.g.lineStyle(1,16711935);
		this.g.drawCircle(0,0,30);
		this.g.endFill();
		this.location = location;
		this.velocity = velocity;
	}
	update(dt) {
		let a = this.location;
		let b = this.velocity;
		let this1 = new hxmath_math_Vector2Default(a.x,a.y);
		let self = this1;
		self.x += b.x;
		self.y += b.y;
		this.location = self;
		if(this.location.x > this.s2d.width - 30 || this.location.x < 30) {
			this.velocity.x *= -1;
		}
		if(this.location.y > this.s2d.height - 30 || this.location.y < 30) {
			this.velocity.y *= -1;
		}
		let _this = this.g;
		_this.posChanged = true;
		_this.x = this.location.x;
		let _this1 = this.g;
		_this1.posChanged = true;
		_this1.y = this.location.y;
	}
}
fish_Ball.__name__ = "fish.Ball";
Object.assign(fish_Ball.prototype, {
	__class__: fish_Ball
});
class fish_Fish {
	constructor(parent,s2d,location,r,useServer) {
		if(useServer == null) {
			useServer = false;
		}
		this.lastTime = 0;
		this.temp = 0;
		let this1 = new hxmath_math_Vector2Default(0.0,0.0);
		this.lastLocation = this1;
		this.s2d = s2d;
		let this11 = new hxmath_math_Vector2Default(0.0,0.0);
		this.acceleration = this11;
		let this111 = new hxmath_math_Vector2Default(0.0,0.0);
		this.velocity = this111;
		let color = 16777215 * Math.random() | 0;
		let this12 = new hxmath_math_Vector2Default(0,0);
		let pointa = this12;
		let this13 = new hxmath_math_Vector2Default(r / 2,r);
		let pointb = this13;
		let this14 = new hxmath_math_Vector2Default(0,2 * r);
		let pointc = this14;
		this.g = new h2d_Graphics(parent);
		this.g.beginFill(color,0.2);
		let graphics = this.g;
		let x = pointa.x;
		let y = pointa.y;
		graphics.flush();
		graphics.addVertex(x,y,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x * graphics.ma + y * graphics.mc + graphics.mx,x * graphics.mb + y * graphics.md + graphics.my);
		let x1 = pointb.x;
		let y1 = pointb.y;
		graphics.addVertex(x1,y1,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x1 * graphics.ma + y1 * graphics.mc + graphics.mx,x1 * graphics.mb + y1 * graphics.md + graphics.my);
		let x2 = pointc.x;
		let y2 = pointc.y;
		graphics.addVertex(x2,y2,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x2 * graphics.ma + y2 * graphics.mc + graphics.mx,x2 * graphics.mb + y2 * graphics.md + graphics.my);
		let x3 = pointa.x;
		let y3 = pointa.y;
		graphics.addVertex(x3,y3,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x3 * graphics.ma + y3 * graphics.mc + graphics.mx,x3 * graphics.mb + y3 * graphics.md + graphics.my);
		this.g.endFill();
		this.g2 = new h2d_Graphics(parent);
		this.g2.beginFill(color,0.5);
		graphics = this.g2;
		let x4 = pointa.x;
		let y4 = pointa.y;
		graphics.flush();
		graphics.addVertex(x4,y4,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x4 * graphics.ma + y4 * graphics.mc + graphics.mx,x4 * graphics.mb + y4 * graphics.md + graphics.my);
		let x5 = pointb.x;
		let y5 = pointb.y;
		graphics.addVertex(x5,y5,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x5 * graphics.ma + y5 * graphics.mc + graphics.mx,x5 * graphics.mb + y5 * graphics.md + graphics.my);
		let x6 = pointc.x;
		let y6 = pointc.y;
		graphics.addVertex(x6,y6,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x6 * graphics.ma + y6 * graphics.mc + graphics.mx,x6 * graphics.mb + y6 * graphics.md + graphics.my);
		let x7 = pointa.x;
		let y7 = pointa.y;
		graphics.addVertex(x7,y7,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x7 * graphics.ma + y7 * graphics.mc + graphics.mx,x7 * graphics.mb + y7 * graphics.md + graphics.my);
		this.g2.endFill();
		this.location2 = this.location = location;
		this.flock = new fish_Flock(location.x,location.y,s2d.width,s2d.height,r);
	}
	update(dt) {
		if(this.flock != null) {
			this.location = this.flock.position;
			let _this = this.g;
			_this.posChanged = true;
			_this.x = this.location.x;
			let _this1 = this.g;
			_this1.posChanged = true;
			_this1.y = this.location.y;
			let _this2 = this.g;
			let self = this.flock.velocity;
			let v = Math.atan2(self.y,self.x);
			_this2.posChanged = true;
			_this2.rotation = v;
		}
		this.temp += dt;
		if(this.temp >= 0.2) {
			this.tween(this.location);
			this.temp = 0;
		}
		this.update2(dt);
	}
	update2(dt) {
		let a = this.velocity;
		let b = this.acceleration;
		if(a.x * b.x + a.y * b.y > 0) {
			let a = this.velocity;
			let b = this.acceleration;
			let this1 = new hxmath_math_Vector2Default(a.x,a.y);
			let self = this1;
			self.x += b.x;
			self.y += b.y;
			this.velocity = self;
			let a1 = this.location2;
			let b1 = this.velocity;
			let this11 = new hxmath_math_Vector2Default(a1.x,a1.y);
			let self1 = this11;
			self1.x += b1.x;
			self1.y += b1.y;
			this.location2 = self1;
			this.lastLocation = this.location;
			let _this = this.g2;
			_this.posChanged = true;
			_this.x = this.location2.x;
			let _this1 = this.g2;
			_this1.posChanged = true;
			_this1.y = this.location2.y;
			let _this2 = this.g2;
			let self2 = this.velocity;
			let v = Math.atan2(self2.y,self2.x);
			_this2.posChanged = true;
			_this2.rotation = v;
			this.calcAcc(dt);
		} else {
			haxe_Log.trace("fuck",{ fileName : "src/fish/Fish.hx", lineNumber : 110, className : "fish.Fish", methodName : "update2"});
		}
	}
	tween(p) {
		let b = this.location2;
		let this1 = new hxmath_math_Vector2Default(p.x,p.y);
		let self = this1;
		self.x -= b.x;
		self.y -= b.y;
		if(Math.sqrt(self.x * self.x + self.y * self.y) > 60 || new Date().getTime() - this.lastTime > 1000 || Math.sqrt(self.x * self.x + self.y * self.y) <= 2) {
			this.location2 = p;
			this.lastLocation = p;
			this.lastTime = new Date().getTime();
			this.targetPos = p;
			let this2 = new hxmath_math_Vector2Default(self.x,self.y);
			let self1 = this2;
			let length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
			if(length > 0.0) {
				self1.x /= length;
				self1.y /= length;
			}
			this.velocity = self1;
			return;
		}
		if(this.targetPos != null) {
			let now = new Date().getTime();
			let b = this.targetPos;
			let this1 = new hxmath_math_Vector2Default(p.x,p.y);
			let self = this1;
			self.x -= b.x;
			self.y -= b.y;
			let diffLen = Math.sqrt(self.x * self.x + self.y * self.y);
			let diffTime = now - this.lastTime;
			haxe_Log.trace(diffLen / diffTime,{ fileName : "src/fish/Fish.hx", lineNumber : 143, className : "fish.Fish", methodName : "tween"});
		}
		this.targetPos = p;
		let this2 = new hxmath_math_Vector2Default(self.x,self.y);
		let self1 = this2;
		let length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
		if(length > 0.0) {
			self1.x /= length;
			self1.y /= length;
		}
		let this11 = new hxmath_math_Vector2Default(self1.x,self1.y);
		let self2 = this11;
		self2.x /= 3;
		self2.y /= 3;
		this.acceleration = self2;
		let length1 = Math.sqrt(self.x * self.x + self.y * self.y);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
		}
		self.x *= 1.5;
		self.y *= 1.5;
		this.velocity = self;
		this.lastTime = new Date().getTime();
	}
	calcAcc(dt) {
		if(this.targetPos != null && this.location2 != null) {
			let a = this.acceleration;
			let this1 = new hxmath_math_Vector2Default(a.x,a.y);
			let self = this1;
			self.x *= 0.1;
			self.y *= 0.1;
			this.acceleration = self;
		}
	}
}
fish_Fish.__name__ = "fish.Fish";
Object.assign(fish_Fish.prototype, {
	__class__: fish_Fish
});
class fish_Flock {
	constructor(x,y,width,height,r) {
		this.desiredSeperation = 60;
		this.neighborDist = 50;
		this.extraAlign = 1;
		this.extraCohesion = 1;
		this.extraSeparation = 2;
		let this1 = new hxmath_math_Vector2Default(0.0,0.0);
		this.acceleration = this1;
		let this2 = new hxmath_math_Vector2Default(-1 + Math.floor(3 * Math.random()),-1 + Math.floor(3 * Math.random()));
		this.velocity = this2;
		while(fish_Vector2Helper.isZero(this.velocity)) {
			let this1 = new hxmath_math_Vector2Default(-1 + Math.floor(3 * Math.random()),-1 + Math.floor(3 * Math.random()));
			this.velocity = this1;
		}
		let this3 = new hxmath_math_Vector2Default(x,y);
		this.position = this3;
		this.r = r;
		this.maxSpeed = 3;
		this.maxForce = 0.05;
		this.width = width;
		this.height = height;
		this.neighborDist = r < 50 ? 50 : r + 20;
		this.desiredSeperation = r < 35 ? 35 : r + 5;
	}
	run(targets) {
		this.flock(targets);
		this.update();
		this.borders();
	}
	flock(boids) {
		let a = this.separate(boids);
		let s = this.extraSeparation;
		let this1 = new hxmath_math_Vector2Default(a.x,a.y);
		let self = this1;
		self.x *= s;
		self.y *= s;
		let a1 = this.align(boids);
		let s1 = this.extraAlign;
		let this2 = new hxmath_math_Vector2Default(a1.x,a1.y);
		let self1 = this2;
		self1.x *= s1;
		self1.y *= s1;
		let a2 = this.cohesion(boids);
		let s2 = this.extraCohesion;
		let this3 = new hxmath_math_Vector2Default(a2.x,a2.y);
		let self2 = this3;
		self2.x *= s2;
		self2.y *= s2;
		let a3 = this.acceleration;
		let this4 = new hxmath_math_Vector2Default(a3.x,a3.y);
		let self3 = this4;
		self3.x += self.x;
		self3.y += self.y;
		let this5 = new hxmath_math_Vector2Default(self3.x,self3.y);
		let self4 = this5;
		self4.x += self1.x;
		self4.y += self1.y;
		let this6 = new hxmath_math_Vector2Default(self4.x,self4.y);
		let self5 = this6;
		self5.x += self2.x;
		self5.y += self2.y;
		this.acceleration = self5;
	}
	update() {
		let a = this.velocity;
		let b = this.acceleration;
		let this1 = new hxmath_math_Vector2Default(a.x,a.y);
		let self = this1;
		self.x += b.x;
		self.y += b.y;
		this.velocity = self;
		fish_Vector2Helper.limit(this.velocity,this.maxSpeed);
		let a1 = this.position;
		let b1 = this.velocity;
		let this2 = new hxmath_math_Vector2Default(a1.x,a1.y);
		let self1 = this2;
		self1.x += b1.x;
		self1.y += b1.y;
		this.position = self1;
		let a2 = this.acceleration;
		let this3 = new hxmath_math_Vector2Default(a2.x,a2.y);
		let self2 = this3;
		self2.x *= 0;
		self2.y *= 0;
		this.acceleration = self2;
	}
	align(boids) {
		let this1 = new hxmath_math_Vector2Default(0.0,0.0);
		let steer = this1;
		let count = 0;
		let _g = 0;
		while(_g < boids.length) {
			let other = boids[_g];
			++_g;
			let b = other.position;
			let self = this.position;
			let this1 = new hxmath_math_Vector2Default(self.x,self.y);
			let self1 = this1;
			self1.x -= b.x;
			self1.y -= b.y;
			let self2 = self1;
			let distance = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
			if(distance > 0 && distance < this.neighborDist) {
				let b = other.velocity;
				let self = steer;
				let this1 = new hxmath_math_Vector2Default(self.x,self.y);
				let self1 = this1;
				self1.x += b.x;
				self1.y += b.y;
				steer = self1;
				++count;
			}
		}
		if(count > 0) {
			let self = steer;
			let this1 = new hxmath_math_Vector2Default(self.x,self.y);
			let self1 = this1;
			self1.x /= count;
			self1.y /= count;
			steer = self1;
		}
		if(!fish_Vector2Helper.isZero(steer)) {
			let newLength = this.maxSpeed;
			let self = steer;
			let length = Math.sqrt(self.x * self.x + self.y * self.y);
			if(length > 0.0) {
				self.x /= length;
				self.y /= length;
			}
			self.x *= newLength;
			self.y *= newLength;
			let b = this.velocity;
			let self1 = steer;
			let this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
			let self2 = this1;
			self2.x -= b.x;
			self2.y -= b.y;
			steer = self2;
			let self3 = self2;
			let newLength1 = Math.min(Math.sqrt(self3.x * self3.x + self3.y * self3.y),this.maxForce);
			let self4 = self2;
			let length1 = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
			if(length1 > 0.0) {
				self4.x /= length1;
				self4.y /= length1;
			}
			self4.x *= newLength1;
			self4.y *= newLength1;
		}
		return steer;
	}
	cohesion(boids) {
		let this1 = new hxmath_math_Vector2Default(0.0,0.0);
		let sum = this1;
		let count = 0;
		let _g = 0;
		while(_g < boids.length) {
			let other = boids[_g];
			++_g;
			let b = other.position;
			let self = this.position;
			let this1 = new hxmath_math_Vector2Default(self.x,self.y);
			let self1 = this1;
			self1.x -= b.x;
			self1.y -= b.y;
			let self2 = self1;
			let distance = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
			if(distance > 0 && distance < this.neighborDist) {
				let b = other.position;
				let self = sum;
				let this1 = new hxmath_math_Vector2Default(self.x,self.y);
				let self1 = this1;
				self1.x += b.x;
				self1.y += b.y;
				sum = self1;
				++count;
			}
		}
		if(count > 0) {
			let self = sum;
			let this1 = new hxmath_math_Vector2Default(self.x,self.y);
			let self1 = this1;
			self1.x /= count;
			self1.y /= count;
			return this.steek(self1,false);
		}
		return sum;
	}
	steek(target,slowdown) {
		let b = this.position;
		let this1 = new hxmath_math_Vector2Default(target.x,target.y);
		let self = this1;
		self.x -= b.x;
		self.y -= b.y;
		let newLength = this.maxSpeed;
		let length = Math.sqrt(self.x * self.x + self.y * self.y);
		if(length > 0.0) {
			self.x /= length;
			self.y /= length;
		}
		self.x *= newLength;
		self.y *= newLength;
		let b1 = this.velocity;
		let this2 = new hxmath_math_Vector2Default(self.x,self.y);
		let self1 = this2;
		self1.x -= b1.x;
		self1.y -= b1.y;
		fish_Vector2Helper.limit(self1,this.maxForce);
		return self1;
	}
	borders() {
		let this1 = new hxmath_math_Vector2Default(0.0,0.0);
		let vector = this1;
		let position = this.position;
		let radius = this.r;
		if(position.x < -radius) {
			vector.x = this.width + radius;
		}
		if(position.y < -radius) {
			vector.y = this.height + radius;
		}
		if(position.x > this.width + radius) {
			vector.x = -this.width - radius;
		}
		if(position.y > this.height + radius) {
			vector.y = -this.height - radius;
		}
		let this2 = new hxmath_math_Vector2Default(0.0,0.0);
		if(vector != this2) {
			let a = this.position;
			let this1 = new hxmath_math_Vector2Default(a.x,a.y);
			let self = this1;
			self.x += vector.x;
			self.y += vector.y;
			this.position = self;
		}
	}
	separate(boids) {
		let this1 = new hxmath_math_Vector2Default(0.0,0.0);
		let steer = this1;
		let count = 0;
		let _g = 0;
		while(_g < boids.length) {
			let other = boids[_g];
			++_g;
			let a = this.position;
			let b = other.position;
			let this1 = new hxmath_math_Vector2Default(a.x,a.y);
			let self = this1;
			self.x -= b.x;
			self.y -= b.y;
			let distance = Math.sqrt(self.x * self.x + self.y * self.y);
			if(distance > 0 && distance < this.desiredSeperation) {
				let newLength = 1 / distance;
				let length = Math.sqrt(self.x * self.x + self.y * self.y);
				if(length > 0.0) {
					self.x /= length;
					self.y /= length;
				}
				self.x *= newLength;
				self.y *= newLength;
				let self1 = steer;
				let this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
				let self2 = this1;
				self2.x += self.x;
				self2.y += self.y;
				steer = self2;
				++count;
			}
		}
		if(count > 0) {
			let self = steer;
			let this1 = new hxmath_math_Vector2Default(self.x,self.y);
			let self1 = this1;
			self1.x /= count;
			self1.y /= count;
			steer = self1;
		}
		if(!fish_Vector2Helper.isZero(steer)) {
			let newLength = this.maxSpeed;
			let self = steer;
			let length = Math.sqrt(self.x * self.x + self.y * self.y);
			if(length > 0.0) {
				self.x /= length;
				self.y /= length;
			}
			self.x *= newLength;
			self.y *= newLength;
			let b = this.velocity;
			let self1 = steer;
			let this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
			let self2 = this1;
			self2.x -= b.x;
			self2.y -= b.y;
			steer = self2;
			fish_Vector2Helper.limit(self2,this.maxForce);
		}
		return steer;
	}
}
fish_Flock.__name__ = "fish.Flock";
Object.assign(fish_Flock.prototype, {
	__class__: fish_Flock
});
class fish_Vector2Helper {
	static limit(v2,v) {
		let len = Math.sqrt(v2.x * v2.x + v2.y * v2.y);
		let newLength = Math.min(len,v);
		let length = Math.sqrt(v2.x * v2.x + v2.y * v2.y);
		if(length > 0.0) {
			v2.x /= length;
			v2.y /= length;
		}
		v2.x *= newLength;
		v2.y *= newLength;
	}
	static isZero(v2) {
		if(v2.x == 0) {
			return v2.y == 0;
		} else {
			return false;
		}
	}
}
fish_Vector2Helper.__name__ = "fish.Vector2Helper";
class h2d_Object {
	constructor(parent) {
		if(h2d_Object._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(parent);
	}
	_hx_constructor(parent) {
		this.alpha = 1.;
		this.matA = 1;
		this.matB = 0;
		this.matC = 0;
		this.matD = 1;
		this.absX = 0;
		this.absY = 0;
		this.posChanged = true;
		this.x = 0;
		this.posChanged = true;
		this.y = 0;
		this.posChanged = true;
		this.scaleX = 1;
		this.posChanged = true;
		this.scaleY = 1;
		this.posChanged = true;
		this.rotation = 0;
		this.blendMode = h2d_BlendMode.Alpha;
		this.posChanged = parent != null;
		this.set_visible(true);
		this.children = [];
		if(parent != null) {
			parent.addChild(this);
		}
	}
	getBounds(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	getBoundsRec(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		let n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			let c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		let xmin = Infinity;
		let ymin = Infinity;
		let xmax = -Infinity;
		let ymax = -Infinity;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	addBounds(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			let x = dx * this.matA + dy * this.matC + this.absX;
			let y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			let x1 = (dx + width) * this.matA + dy * this.matC + this.absX;
			let y1 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			let x2 = dx * this.matA + (dy + height) * this.matC + this.absX;
			let y2 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			let x3 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			let y3 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		let r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		let det = 1 / r;
		let rA = relativeTo.matD * det;
		let rB = -relativeTo.matB * det;
		let rC = -relativeTo.matC * det;
		let rD = relativeTo.matA * det;
		let rX = this.absX - relativeTo.absX;
		let rY = this.absY - relativeTo.absY;
		let x = dx * this.matA + dy * this.matC + rX;
		let y = dx * this.matB + dy * this.matD + rY;
		let x1 = x * rA + y * rC;
		let y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		let x2 = x * rA + y * rC;
		let y2 = x * rB + y * rD;
		if(x2 < out.xMin) {
			out.xMin = x2;
		}
		if(x2 > out.xMax) {
			out.xMax = x2;
		}
		if(y2 < out.yMin) {
			out.yMin = y2;
		}
		if(y2 > out.yMax) {
			out.yMax = y2;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		let x3 = x * rA + y * rC;
		let y3 = x * rB + y * rD;
		if(x3 < out.xMin) {
			out.xMin = x3;
		}
		if(x3 > out.xMax) {
			out.xMax = x3;
		}
		if(y3 < out.yMin) {
			out.yMin = y3;
		}
		if(y3 > out.yMax) {
			out.yMax = y3;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		let x4 = x * rA + y * rC;
		let y4 = x * rB + y * rD;
		if(x4 < out.xMin) {
			out.xMin = x4;
		}
		if(x4 > out.xMax) {
			out.xMax = x4;
		}
		if(y4 < out.yMin) {
			out.yMin = y4;
		}
		if(y4 > out.yMax) {
			out.yMax = y4;
		}
	}
	localToGlobal(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		let px = pt.x * this.matA + pt.y * this.matC + this.absX;
		let py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	globalToLocal(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		let invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		let px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		let py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	getScene() {
		let p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	set_visible(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	addChild(s) {
		this.addChildAt(s,this.children.length);
	}
	addChildAt(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		let p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			let old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	onHierarchyMoved(parentChanged) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	onAdd() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	onRemove() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	removeChild(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	setParentContainer(c) {
		this.parentContainer = c;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	draw(ctx) {
	}
	sync(ctx) {
		let changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		let p = 0;
		let len = this.children.length;
		while(p < len) {
			let c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	syncPos() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	calcAbsPos() {
		if(this.parent == null) {
			let cr;
			let sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				let cr = Math.cos(this.rotation);
				let sr = Math.sin(this.rotation);
				let tmpA = this.scaleX * cr;
				let tmpB = this.scaleX * sr;
				let tmpC = this.scaleY * -sr;
				let tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	emitTile(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	clipBounds(ctx,bounds) {
		let view = ctx.tmpBounds;
		let matA;
		let matB;
		let matC;
		let matD;
		let absX;
		let absY;
		if(ctx.inFilter != null) {
			let f1 = ctx.baseShader.filterMatrixA__;
			let f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		let x = bounds.xMin;
		let y = bounds.yMin;
		let x1 = x * matA + y * matC + absX;
		let y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		let x2 = bounds.xMax;
		let y2 = bounds.yMin;
		let x3 = x2 * matA + y2 * matC + absX;
		let y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		let x4 = bounds.xMin;
		let y4 = bounds.yMax;
		let x5 = x4 * matA + y4 * matC + absX;
		let y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		let x6 = bounds.xMax;
		let y6 = bounds.yMax;
		let x7 = x6 * matA + y6 * matC + absX;
		let y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		let invDet = 1 / (matA * matD - matB * matC);
		let sxMin = view.xMin;
		let syMin = view.yMin;
		let sxMax = view.xMax;
		let syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		let x8 = sxMin;
		let y8 = syMin;
		x8 = sxMin - absX;
		y8 = syMin - absY;
		let x9 = (x8 * matD - y8 * matC) * invDet;
		let y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		let x10 = sxMax;
		let y10 = syMin;
		x10 = sxMax - absX;
		y10 = syMin - absY;
		let x11 = (x10 * matD - y10 * matC) * invDet;
		let y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		let x12 = sxMin;
		let y12 = syMax;
		x12 = sxMin - absX;
		y12 = syMax - absY;
		let x13 = (x12 * matD - y12 * matC) * invDet;
		let y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		let x14 = sxMax;
		let y14 = syMax;
		x14 = sxMax - absX;
		y14 = syMax - absY;
		let x15 = (x14 * matD - y14 * matC) * invDet;
		let y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		let a = bounds.xMin;
		let b = view.xMin;
		bounds.xMin = a < b ? b : a;
		let a1 = bounds.yMin;
		let b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		let a2 = bounds.xMax;
		let b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		let a3 = bounds.yMax;
		let b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	drawFilters(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		let bounds = ctx.tmpBounds;
		let total = new h2d_col_Bounds();
		let maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		let xMin = Math.floor(total.xMin + 1e-10);
		let yMin = Math.floor(total.yMin + 1e-10);
		let width = Math.ceil(total.xMax - xMin - 1e-10);
		let height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		let t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		let oldAlpha = ctx.globalAlpha;
		let shader = ctx.baseShader;
		let _this = shader.filterMatrixA__;
		let x = _this.x;
		let y = _this.y;
		let z = _this.z;
		let w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let oldA_x = x;
		let oldA_y = y;
		let oldA_z = z;
		let oldA_w = w;
		let _this1 = shader.filterMatrixB__;
		let x1 = _this1.x;
		let y1 = _this1.y;
		let z1 = _this1.z;
		let w1 = _this1.w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let oldB_x = x1;
		let oldB_y = y1;
		let oldB_z = z1;
		let oldB_w = w1;
		let invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		let invA = this.matD * invDet;
		let invB = -this.matB * invDet;
		let invC = -this.matC * invDet;
		let invD = this.matA * invDet;
		let invX = -(this.absX * invA + this.absY * invC);
		let invY = -(this.absX * invB + this.absY * invD);
		let _this2 = shader.filterMatrixA__;
		let x2 = invA;
		let y2 = invC;
		let z2 = invX;
		if(invX == null) {
			z2 = 0.;
		}
		if(invC == null) {
			y2 = 0.;
		}
		if(invA == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = 1.;
		let _this3 = shader.filterMatrixB__;
		let x3 = invB;
		let y3 = invD;
		let z3 = invY;
		if(invY == null) {
			z3 = 0.;
		}
		if(invD == null) {
			y3 = 0.;
		}
		if(invB == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		let finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		let prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		let _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		let _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	drawFiltered(ctx,tile) {
		let oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	drawRec(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			let old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				let nchilds = this.children.length;
				let _g = 0;
				while(_g < nchilds) {
					let i = _g++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				let _g = 0;
				let _g1 = this.children;
				while(_g < _g1.length) {
					let c = _g1[_g];
					++_g;
					c.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	contentChanged(s) {
	}
}
h2d_Object.__name__ = "h2d.Object";
Object.assign(h2d_Object.prototype, {
	__class__: h2d_Object
});
class h2d_Drawable extends h2d_Object {
	_hx_constructor(parent) {
		super._hx_constructor(parent);
		this.color = new h3d_Vector(1,1,1,1);
	}
	drawFiltered(ctx,tile) {
		let old = this.shaders;
		this.shaders = null;
		super.drawFiltered(ctx,tile);
		this.shaders = old;
	}
	emitTile(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
}
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
Object.assign(h2d_Drawable.prototype, {
	__class__: h2d_Drawable
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
class h2d_GPoint {
	constructor() {
	}
	load(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
}
h2d_GPoint.__name__ = "h2d.GPoint";
Object.assign(h2d_GPoint.prototype, {
	__class__: h2d_GPoint
});
class h3d_prim_Primitive {
	constructor() {
		this.refCount = 0;
	}
	getBounds() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	incref() {
		this.refCount++;
	}
	decref() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	alloc(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	render(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 4) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	dispose() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	toString() {
		let c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
}
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
Object.assign(h3d_prim_Primitive.prototype, {
	__class__: h3d_prim_Primitive
});
class h2d__$Graphics_GraphicsContent extends h3d_prim_Primitive {
	constructor() {
		super();
		this.buffers = [];
	}
	next() {
		let nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		let this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		this.tmp = this1;
		let this2 = new Array(0);
		this.index = this2;
		super.dispose();
		return true;
	}
	alloc(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
		this.indexes = h3d_Indexes.alloc(this.index);
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	render(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			if(this.bufferDirty) {
				this.buffer.dispose();
				this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				this.indexes.dispose();
				this.indexes = h3d_Indexes.alloc(this.index);
				this.indexDirty = false;
			}
		}
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		super.render(engine);
	}
	dispose() {
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		super.dispose();
	}
	clear() {
		this.dispose();
		let this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		this.tmp = this1;
		let this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
}
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
Object.assign(h2d__$Graphics_GraphicsContent.prototype, {
	__class__: h2d__$Graphics_GraphicsContent
});
class h2d_Graphics extends h2d_Drawable {
	constructor(parent) {
		h2d_Object._hx_skip_constructor = true;
		super();
		h2d_Object._hx_skip_constructor = false;
		this._hx_constructor(parent);
	}
	_hx_constructor(parent) {
		this.bevel = 0.25;
		this.my = 0.;
		this.mx = 0.;
		this.md = 1.;
		this.mc = 0.;
		this.mb = 0.;
		this.ma = 1.;
		super._hx_constructor(parent);
		this.content = new h2d__$Graphics_GraphicsContent();
		this.tile = h2d_Tile.fromColor(16777215);
		this.clear();
	}
	onRemove() {
		super.onRemove();
		this.clear();
	}
	clear() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	getBoundsRec(relativeTo,out,forSize) {
		super.getBoundsRec(relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	isConvex(points) {
		let first = true;
		let sign = false;
		let _g = 0;
		let _g1 = points.length;
		while(_g < _g1) {
			let i = _g++;
			let p1 = points[i];
			let p2 = points[(i + 1) % points.length];
			let p3 = points[(i + 2) % points.length];
			let s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	flushLine(start) {
		let pts = this.tmpPoints;
		let last = pts.length - 1;
		let prev = pts[last];
		let p = pts[0];
		let closed = p.x == prev.x && p.y == prev.y;
		let count = pts.length;
		if(!closed) {
			let prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			let gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			let pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			let gp1 = new h2d_GPoint();
			gp1.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp1;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		let _g = 0;
		let _g1 = count;
		while(_g < _g1) {
			let i = _g++;
			let next = pts[(i + 1) % pts.length];
			let nx1 = prev.y - p.y;
			let ny1 = p.x - prev.x;
			let ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			let nx2 = p.y - next.y;
			let ny2 = next.x - p.x;
			let ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			let nx = nx1 * ns1 + nx2 * ns2;
			let ny = ny1 * ns1 + ny2 * ns2;
			let ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			let size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			let d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				let _this = this.content;
				let x = p.x + nx;
				let y = p.y + ny;
				let r = p.r;
				let g = p.g;
				let b = p.b;
				let a = p.a;
				let this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					let newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				let this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					let newSize = this2.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this2.array);
					this2.array = newArray;
				}
				this2.array[this2.pos++] = y;
				let this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					let newSize = this3.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this3.array);
					this3.array = newArray;
				}
				this3.array[this3.pos++] = 0;
				let this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					let newSize = this4.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this4.array);
					this4.array = newArray;
				}
				this4.array[this4.pos++] = 0;
				let this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					let newSize = this5.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this5.array);
					this5.array = newArray;
				}
				this5.array[this5.pos++] = r;
				let this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					let newSize = this6.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this6.array);
					this6.array = newArray;
				}
				this6.array[this6.pos++] = g;
				let this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					let newSize = this7.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this7.array);
					this7.array = newArray;
				}
				this7.array[this7.pos++] = b;
				let this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					let newSize = this8.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this8.array);
					this8.array = newArray;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				let _this1 = this.content;
				let x1 = p.x - nx;
				let y1 = p.y - ny;
				let r1 = p.r;
				let g1 = p.g;
				let b1 = p.b;
				let a1 = p.a;
				let this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					let newSize = this9.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this9.array);
					this9.array = newArray;
				}
				this9.array[this9.pos++] = x1;
				let this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					let newSize = this10.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this10.array);
					this10.array = newArray;
				}
				this10.array[this10.pos++] = y1;
				let this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					let newSize = this11.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this11.array);
					this11.array = newArray;
				}
				this11.array[this11.pos++] = 0;
				let this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					let newSize = this12.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this12.array);
					this12.array = newArray;
				}
				this12.array[this12.pos++] = 0;
				let this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					let newSize = this13.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this13.array);
					this13.array = newArray;
				}
				this13.array[this13.pos++] = r1;
				let this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					let newSize = this14.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this14.array);
					this14.array = newArray;
				}
				this14.array[this14.pos++] = g1;
				let this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					let newSize = this15.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this15.array);
					this15.array = newArray;
				}
				this15.array[this15.pos++] = b1;
				let this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					let newSize = this16.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this16.array);
					this16.array = newArray;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				let pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					let _this = this.content;
					_this.index.push(this.pindex);
					_this.indexDirty = true;
					let _this1 = this.content;
					_this1.index.push(this.pindex + 1);
					_this1.indexDirty = true;
					let _this2 = this.content;
					_this2.index.push(pnext);
					_this2.indexDirty = true;
					let _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					let _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					let _this5 = this.content;
					_this5.index.push(pnext + 1);
					_this5.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				let n0x = next.x - p.x;
				let n0y = next.y - p.y;
				let sign = n0x * nx + n0y * ny;
				let nnx = -ny;
				let nny = nx;
				let size = nnx * nx1 * ns1 + nny * ny1 * ns1;
				let d = this.lineSize * 0.5 / size;
				nnx *= d;
				nny *= d;
				let pnext = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					let _this = this.content;
					let x = p.x + nx;
					let y = p.y + ny;
					let r = p.r;
					let g = p.g;
					let b = p.b;
					let a = p.a;
					let this1 = _this.tmp;
					if(this1.pos == this1.array.length) {
						let newSize = this1.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this1.array);
						this1.array = newArray;
					}
					this1.array[this1.pos++] = x;
					let this2 = _this.tmp;
					if(this2.pos == this2.array.length) {
						let newSize = this2.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this2.array);
						this2.array = newArray;
					}
					this2.array[this2.pos++] = y;
					let this3 = _this.tmp;
					if(this3.pos == this3.array.length) {
						let newSize = this3.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this3.array);
						this3.array = newArray;
					}
					this3.array[this3.pos++] = 0;
					let this4 = _this.tmp;
					if(this4.pos == this4.array.length) {
						let newSize = this4.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this4.array);
						this4.array = newArray;
					}
					this4.array[this4.pos++] = 0;
					let this5 = _this.tmp;
					if(this5.pos == this5.array.length) {
						let newSize = this5.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this5.array);
						this5.array = newArray;
					}
					this5.array[this5.pos++] = r;
					let this6 = _this.tmp;
					if(this6.pos == this6.array.length) {
						let newSize = this6.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this6.array);
						this6.array = newArray;
					}
					this6.array[this6.pos++] = g;
					let this7 = _this.tmp;
					if(this7.pos == this7.array.length) {
						let newSize = this7.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this7.array);
						this7.array = newArray;
					}
					this7.array[this7.pos++] = b;
					let this8 = _this.tmp;
					if(this8.pos == this8.array.length) {
						let newSize = this8.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this8.array);
						this8.array = newArray;
					}
					this8.array[this8.pos++] = a;
					_this.bufferDirty = true;
					let _this1 = this.content;
					let x1 = p.x - nnx;
					let y1 = p.y - nny;
					let r1 = p.r;
					let g1 = p.g;
					let b1 = p.b;
					let a1 = p.a;
					let this9 = _this1.tmp;
					if(this9.pos == this9.array.length) {
						let newSize = this9.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this9.array);
						this9.array = newArray;
					}
					this9.array[this9.pos++] = x1;
					let this10 = _this1.tmp;
					if(this10.pos == this10.array.length) {
						let newSize = this10.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this10.array);
						this10.array = newArray;
					}
					this10.array[this10.pos++] = y1;
					let this11 = _this1.tmp;
					if(this11.pos == this11.array.length) {
						let newSize = this11.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this11.array);
						this11.array = newArray;
					}
					this11.array[this11.pos++] = 0;
					let this12 = _this1.tmp;
					if(this12.pos == this12.array.length) {
						let newSize = this12.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this12.array);
						this12.array = newArray;
					}
					this12.array[this12.pos++] = 0;
					let this13 = _this1.tmp;
					if(this13.pos == this13.array.length) {
						let newSize = this13.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this13.array);
						this13.array = newArray;
					}
					this13.array[this13.pos++] = r1;
					let this14 = _this1.tmp;
					if(this14.pos == this14.array.length) {
						let newSize = this14.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this14.array);
						this14.array = newArray;
					}
					this14.array[this14.pos++] = g1;
					let this15 = _this1.tmp;
					if(this15.pos == this15.array.length) {
						let newSize = this15.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this15.array);
						this15.array = newArray;
					}
					this15.array[this15.pos++] = b1;
					let this16 = _this1.tmp;
					if(this16.pos == this16.array.length) {
						let newSize = this16.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this16.array);
						this16.array = newArray;
					}
					this16.array[this16.pos++] = a1;
					_this1.bufferDirty = true;
					let _this2 = this.content;
					let x2 = p.x + nnx;
					let y2 = p.y + nny;
					let r2 = p.r;
					let g2 = p.g;
					let b2 = p.b;
					let a2 = p.a;
					let this17 = _this2.tmp;
					if(this17.pos == this17.array.length) {
						let newSize = this17.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this17.array);
						this17.array = newArray;
					}
					this17.array[this17.pos++] = x2;
					let this18 = _this2.tmp;
					if(this18.pos == this18.array.length) {
						let newSize = this18.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this18.array);
						this18.array = newArray;
					}
					this18.array[this18.pos++] = y2;
					let this19 = _this2.tmp;
					if(this19.pos == this19.array.length) {
						let newSize = this19.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this19.array);
						this19.array = newArray;
					}
					this19.array[this19.pos++] = 0;
					let this20 = _this2.tmp;
					if(this20.pos == this20.array.length) {
						let newSize = this20.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this20.array);
						this20.array = newArray;
					}
					this20.array[this20.pos++] = 0;
					let this21 = _this2.tmp;
					if(this21.pos == this21.array.length) {
						let newSize = this21.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this21.array);
						this21.array = newArray;
					}
					this21.array[this21.pos++] = r2;
					let this22 = _this2.tmp;
					if(this22.pos == this22.array.length) {
						let newSize = this22.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this22.array);
						this22.array = newArray;
					}
					this22.array[this22.pos++] = g2;
					let this23 = _this2.tmp;
					if(this23.pos == this23.array.length) {
						let newSize = this23.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this23.array);
						this23.array = newArray;
					}
					this23.array[this23.pos++] = b2;
					let this24 = _this2.tmp;
					if(this24.pos == this24.array.length) {
						let newSize = this24.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this24.array);
						this24.array = newArray;
					}
					this24.array[this24.pos++] = a2;
					_this2.bufferDirty = true;
					let _this3 = this.content;
					_this3.index.push(this.pindex);
					_this3.indexDirty = true;
					let _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					let _this5 = this.content;
					_this5.index.push(this.pindex + 2);
					_this5.indexDirty = true;
					let _this6 = this.content;
					_this6.index.push(this.pindex + 2);
					_this6.indexDirty = true;
					let _this7 = this.content;
					_this7.index.push(pnext);
					_this7.indexDirty = true;
					let _this8 = this.content;
					_this8.index.push(pnext + 1);
					_this8.indexDirty = true;
				} else {
					let _this = this.content;
					let x = p.x + nnx;
					let y = p.y + nny;
					let r = p.r;
					let g = p.g;
					let b = p.b;
					let a = p.a;
					let this1 = _this.tmp;
					if(this1.pos == this1.array.length) {
						let newSize = this1.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this1.array);
						this1.array = newArray;
					}
					this1.array[this1.pos++] = x;
					let this2 = _this.tmp;
					if(this2.pos == this2.array.length) {
						let newSize = this2.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this2.array);
						this2.array = newArray;
					}
					this2.array[this2.pos++] = y;
					let this3 = _this.tmp;
					if(this3.pos == this3.array.length) {
						let newSize = this3.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this3.array);
						this3.array = newArray;
					}
					this3.array[this3.pos++] = 0;
					let this4 = _this.tmp;
					if(this4.pos == this4.array.length) {
						let newSize = this4.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this4.array);
						this4.array = newArray;
					}
					this4.array[this4.pos++] = 0;
					let this5 = _this.tmp;
					if(this5.pos == this5.array.length) {
						let newSize = this5.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this5.array);
						this5.array = newArray;
					}
					this5.array[this5.pos++] = r;
					let this6 = _this.tmp;
					if(this6.pos == this6.array.length) {
						let newSize = this6.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this6.array);
						this6.array = newArray;
					}
					this6.array[this6.pos++] = g;
					let this7 = _this.tmp;
					if(this7.pos == this7.array.length) {
						let newSize = this7.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this7.array);
						this7.array = newArray;
					}
					this7.array[this7.pos++] = b;
					let this8 = _this.tmp;
					if(this8.pos == this8.array.length) {
						let newSize = this8.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this8.array);
						this8.array = newArray;
					}
					this8.array[this8.pos++] = a;
					_this.bufferDirty = true;
					let _this1 = this.content;
					let x1 = p.x - nx;
					let y1 = p.y - ny;
					let r1 = p.r;
					let g1 = p.g;
					let b1 = p.b;
					let a1 = p.a;
					let this9 = _this1.tmp;
					if(this9.pos == this9.array.length) {
						let newSize = this9.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this9.array);
						this9.array = newArray;
					}
					this9.array[this9.pos++] = x1;
					let this10 = _this1.tmp;
					if(this10.pos == this10.array.length) {
						let newSize = this10.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this10.array);
						this10.array = newArray;
					}
					this10.array[this10.pos++] = y1;
					let this11 = _this1.tmp;
					if(this11.pos == this11.array.length) {
						let newSize = this11.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this11.array);
						this11.array = newArray;
					}
					this11.array[this11.pos++] = 0;
					let this12 = _this1.tmp;
					if(this12.pos == this12.array.length) {
						let newSize = this12.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this12.array);
						this12.array = newArray;
					}
					this12.array[this12.pos++] = 0;
					let this13 = _this1.tmp;
					if(this13.pos == this13.array.length) {
						let newSize = this13.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this13.array);
						this13.array = newArray;
					}
					this13.array[this13.pos++] = r1;
					let this14 = _this1.tmp;
					if(this14.pos == this14.array.length) {
						let newSize = this14.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this14.array);
						this14.array = newArray;
					}
					this14.array[this14.pos++] = g1;
					let this15 = _this1.tmp;
					if(this15.pos == this15.array.length) {
						let newSize = this15.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this15.array);
						this15.array = newArray;
					}
					this15.array[this15.pos++] = b1;
					let this16 = _this1.tmp;
					if(this16.pos == this16.array.length) {
						let newSize = this16.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this16.array);
						this16.array = newArray;
					}
					this16.array[this16.pos++] = a1;
					_this1.bufferDirty = true;
					let _this2 = this.content;
					let x2 = p.x - nnx;
					let y2 = p.y - nny;
					let r2 = p.r;
					let g2 = p.g;
					let b2 = p.b;
					let a2 = p.a;
					let this17 = _this2.tmp;
					if(this17.pos == this17.array.length) {
						let newSize = this17.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this17.array);
						this17.array = newArray;
					}
					this17.array[this17.pos++] = x2;
					let this18 = _this2.tmp;
					if(this18.pos == this18.array.length) {
						let newSize = this18.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this18.array);
						this18.array = newArray;
					}
					this18.array[this18.pos++] = y2;
					let this19 = _this2.tmp;
					if(this19.pos == this19.array.length) {
						let newSize = this19.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this19.array);
						this19.array = newArray;
					}
					this19.array[this19.pos++] = 0;
					let this20 = _this2.tmp;
					if(this20.pos == this20.array.length) {
						let newSize = this20.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this20.array);
						this20.array = newArray;
					}
					this20.array[this20.pos++] = 0;
					let this21 = _this2.tmp;
					if(this21.pos == this21.array.length) {
						let newSize = this21.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this21.array);
						this21.array = newArray;
					}
					this21.array[this21.pos++] = r2;
					let this22 = _this2.tmp;
					if(this22.pos == this22.array.length) {
						let newSize = this22.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this22.array);
						this22.array = newArray;
					}
					this22.array[this22.pos++] = g2;
					let this23 = _this2.tmp;
					if(this23.pos == this23.array.length) {
						let newSize = this23.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this23.array);
						this23.array = newArray;
					}
					this23.array[this23.pos++] = b2;
					let this24 = _this2.tmp;
					if(this24.pos == this24.array.length) {
						let newSize = this24.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this24.array);
						this24.array = newArray;
					}
					this24.array[this24.pos++] = a2;
					_this2.bufferDirty = true;
					let _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					let _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					let _this5 = this.content;
					_this5.index.push(this.pindex + 2);
					_this5.indexDirty = true;
					let _this6 = this.content;
					_this6.index.push(this.pindex + 1);
					_this6.indexDirty = true;
					let _this7 = this.content;
					_this7.index.push(pnext);
					_this7.indexDirty = true;
					let _this8 = this.content;
					_this8.index.push(pnext + 1);
					_this8.indexDirty = true;
				}
				let _this = this.content;
				_this.index.push(this.pindex);
				_this.indexDirty = true;
				let _this1 = this.content;
				_this1.index.push(this.pindex + 1);
				_this1.indexDirty = true;
				let _this2 = this.content;
				_this2.index.push(this.pindex + 2);
				_this2.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	flushFill(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		let pts = this.tmpPoints;
		let p0 = pts[0];
		let p1 = pts[pts.length - 1];
		let last = null;
		let tmp;
		let f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			let f = p0.y - p1.y;
			tmp = (f < 0 ? -f : f) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			let _g = 1;
			let _g1 = pts.length - 1;
			while(_g < _g1) {
				let i = _g++;
				let _this = this.content;
				_this.index.push(i0);
				_this.indexDirty = true;
				let _this1 = this.content;
				_this1.index.push(i0 + i);
				_this1.indexDirty = true;
				let _this2 = this.content;
				_this2.index.push(i0 + i + 1);
				_this2.indexDirty = true;
			}
		} else {
			let ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			let _g = 0;
			let _g1 = ear.triangulate_h2d_GPoint(pts);
			while(_g < _g1.length) {
				let i = _g1[_g];
				++_g;
				let _this = this.content;
				_this.index.push(i + i0);
				_this.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	flush() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	beginFill(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		let alpha1 = alpha;
		if(alpha == null) {
			alpha1 = 1.;
		}
		this.curA = alpha1;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	lineStyle(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	endFill() {
		this.flush();
		this.doFill = false;
	}
	drawCircle(cx,cy,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			let f = radius * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		let angle = 6.2831853071795862 / nsegments;
		let _g = 0;
		let _g1 = nsegments + 1;
		while(_g < _g1) {
			let i = _g++;
			let a = i * angle;
			let x = cx + Math.cos(a) * radius;
			let y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	addVertex(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			let _this = this.content;
			let this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				let newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			let this2 = _this.tmp;
			if(this2.pos == this2.array.length) {
				let newSize = this2.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this2.array);
				this2.array = newArray;
			}
			this2.array[this2.pos++] = y;
			let this3 = _this.tmp;
			if(this3.pos == this3.array.length) {
				let newSize = this3.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this3.array);
				this3.array = newArray;
			}
			this3.array[this3.pos++] = u;
			let this4 = _this.tmp;
			if(this4.pos == this4.array.length) {
				let newSize = this4.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this4.array);
				this4.array = newArray;
			}
			this4.array[this4.pos++] = v;
			let this5 = _this.tmp;
			if(this5.pos == this5.array.length) {
				let newSize = this5.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this5.array);
				this5.array = newArray;
			}
			this5.array[this5.pos++] = r;
			let this6 = _this.tmp;
			if(this6.pos == this6.array.length) {
				let newSize = this6.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this6.array);
				this6.array = newArray;
			}
			this6.array[this6.pos++] = g;
			let this7 = _this.tmp;
			if(this7.pos == this7.array.length) {
				let newSize = this7.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this7.array);
				this7.array = newArray;
			}
			this7.array[this7.pos++] = b;
			let this8 = _this.tmp;
			if(this8.pos == this8.array.length) {
				let newSize = this8.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this8.array);
				this8.array = newArray;
			}
			this8.array[this8.pos++] = a;
			_this.bufferDirty = true;
		}
		let gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	draw(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	sync(ctx) {
		super.sync(ctx);
		this.flush();
		let _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		} else {
			if(_this.bufferDirty) {
				_this.buffer.dispose();
				_this.buffer = h3d_Buffer.ofFloats(_this.tmp,8,[h3d_BufferFlag.RawFormat]);
				_this.bufferDirty = false;
			}
			if(_this.indexDirty) {
				_this.indexes.dispose();
				_this.indexes = h3d_Indexes.alloc(_this.index);
				_this.indexDirty = false;
			}
		}
	}
}
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
Object.assign(h2d_Graphics.prototype, {
	__class__: h2d_Graphics
});
class h2d_Interactive extends h2d_Drawable {
	constructor(width,height,parent,shape) {
		h2d_Object._hx_skip_constructor = true;
		super();
		h2d_Object._hx_skip_constructor = false;
		this._hx_constructor(width,height,parent,shape);
	}
	_hx_constructor(width,height,parent,shape) {
		this.shapeY = 0;
		this.shapeX = 0;
		this.mouseDownButton = -1;
		this.propagateEvents = false;
		this.cancelEvents = false;
		super._hx_constructor(parent);
		this.width = width;
		this.height = height;
		this.shape = shape;
		this.set_cursor(hxd_Cursor.Button);
	}
	onAdd() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		super.onAdd();
	}
	draw(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	getBoundsRec(relativeTo,out,forSize) {
		super.getBoundsRec(relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	onHierarchyMoved(parentChanged) {
		super.onHierarchyMoved(parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene.addEventTarget(this);
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	updateMask() {
		this.parentMask = null;
		let p = this.parent;
		while(p != null) {
			let m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	onRemove() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		super.onRemove();
	}
	checkBounds(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	getInteractiveScene() {
		return this.scene;
	}
	handleEvent(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			let p = this.parentMask;
			let pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			let saveX = pt.x;
			let saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				let pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			let cx = this.width * 0.5;
			let cy = this.height * 0.5;
			let dx = (e.relX - cx) / cx;
			let dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	calcAbsPos() {
		super.calcAbsPos();
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	set_cursor(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	onOver(e) {
	}
	onOut(e) {
	}
	onPush(e) {
	}
	onRelease(e) {
	}
	onReleaseOutside(e) {
	}
	onClick(e) {
	}
	onMove(e) {
	}
	onWheel(e) {
	}
	onFocus(e) {
	}
	onFocusLost(e) {
	}
	onKeyUp(e) {
	}
	onKeyDown(e) {
	}
	onCheck(e) {
	}
	onTextInput(e) {
	}
}
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__super__ = h2d_Drawable;
Object.assign(h2d_Interactive.prototype, {
	__class__: h2d_Interactive
});
class h2d_Layers extends h2d_Object {
	_hx_constructor(parent) {
		super._hx_constructor(parent);
		this.layersIndexes = [];
		this.layerCount = 0;
	}
	addChild(s) {
		this.addChildAt(s,0);
	}
	addChildAt(s,layer) {
		if(s.parent == this) {
			let old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		super.addChildAt(s,this.layersIndexes[layer]);
		let _g = layer;
		let _g1 = this.layerCount;
		while(_g < _g1) {
			let i = _g++;
			this.layersIndexes[i]++;
		}
	}
	removeChild(s) {
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				let k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
}
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
Object.assign(h2d_Layers.prototype, {
	__class__: h2d_Layers
});
class h2d_Mask extends h2d_Object {
	constructor(width,height,parent) {
		h2d_Object._hx_skip_constructor = true;
		super();
		h2d_Object._hx_skip_constructor = false;
		this._hx_constructor(width,height,parent);
	}
	_hx_constructor(width,height,parent) {
		this.scrollY = 0;
		this.scrollX = 0;
		super._hx_constructor(parent);
		this.width = width;
		this.height = height;
	}
	onHierarchyMoved(parentChanged) {
		super.onHierarchyMoved(parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	onAdd() {
		super.onAdd();
		this.updateMask();
	}
	updateMask() {
		this.parentMask = null;
		let p = this.parent;
		while(p != null) {
			let m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	calcAbsPos() {
		super.calcAbsPos();
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	getBoundsRec(relativeTo,out,forSize) {
		let xMin = out.xMin;
		let yMin = out.yMin;
		let xMax = out.xMax;
		let yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		let bxMin = out.xMin;
		let byMin = out.yMin;
		let bxMax = out.xMax;
		let byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		super.getBoundsRec(relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	drawRec(ctx) {
		let x1 = this.absX + this.scrollX;
		let y1 = this.absY + this.scrollY;
		let x2 = this.width * this.matA + this.height * this.matC + x1;
		let y2 = this.width * this.matB + this.height * this.matD + y1;
		let tmp;
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if(y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		if(ctx.hasRenderZone) {
			let oldX = ctx.renderX;
			let oldY = ctx.renderY;
			let oldW = ctx.renderW;
			let oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			super.drawRec(ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			super.drawRec(ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
}
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.__super__ = h2d_Object;
Object.assign(h2d_Mask.prototype, {
	__class__: h2d_Mask
});
class h3d_impl_RenderContext {
	constructor() {
		if(h3d_impl_RenderContext._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.engine = h3d_Engine.CURRENT;
		this.frame = 0;
		this.time = 0.;
		this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
		this.textures = new h3d_impl_TextureCache(this);
	}
}
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
Object.assign(h3d_impl_RenderContext.prototype, {
	__class__: h3d_impl_RenderContext
});
class h2d_RenderContext extends h3d_impl_RenderContext {
	constructor(scene) {
		h3d_impl_RenderContext._hx_skip_constructor = true;
		super();
		h3d_impl_RenderContext._hx_skip_constructor = false;
		this._hx_constructor(scene);
	}
	_hx_constructor(scene) {
		this.tmpBounds = new h2d_col_Bounds();
		this.defaultSmooth = false;
		this.globalAlpha = 1.;
		super._hx_constructor();
		this.scene = scene;
		this.bufPos = 0;
		this.manager = new h3d_pass_ShaderManager();
		this.pass = new h3d_mat_Pass("",null);
		this.pass.depth(true,h3d_mat_Compare.Always);
		this.pass.set_culling(h3d_mat_Face.None);
		this.baseShader = new h3d_shader_Base2d();
		this.baseShader.setPriority(100);
		this.baseShader.zValue__ = 0.;
		this.baseShaderList = new hxsl_ShaderList(this.baseShader);
		this.targetsStack = [];
		this.targetsStackIndex = 0;
		this.filterStack = [];
	}
	begin() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		let _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		let _this1 = this.baseShader.halfPixelInverse__;
		let x = 0.5 / this.engine.width;
		let y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		_this1.w = 1.;
		let _this2 = this.baseShader.viewport__;
		let x1 = -this.scene.width * 0.5 - this.scene.offsetX;
		let y1 = -this.scene.height * 0.5 - this.scene.offsetY;
		let z = 2 / this.scene.width * this.scene.ratioX;
		let w = -2 * this.baseFlipY / this.scene.height * this.scene.ratioY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z;
		_this2.w = w;
		let _this3 = this.baseShader.filterMatrixA__;
		_this3.x = 1;
		_this3.y = 0;
		_this3.z = 0;
		_this3.w = 1.;
		let _this4 = this.baseShader.filterMatrixB__;
		_this4.x = 0;
		_this4.y = 1;
		_this4.z = 0;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	initShaders(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			let _this = this.buffers;
			let s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	end() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
	}
	pushFilter(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	popFilter() {
		let spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	pushTarget(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		let _this = this.baseShader.halfPixelInverse__;
		let x = 0.5 / (t == null ? this.engine.width : t.width);
		let y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		let _this1 = this.baseShader.viewport__;
		let x1 = -width * 0.5 - startX;
		let y1 = -height * 0.5 - startY;
		let z = 2 / width;
		let w = -2 * this.targetFlipY / height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		_this1.w = w;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			let o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	popTarget(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		let pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			let tinf = this.targetsStack[this.targetsStackIndex - 1];
			let t;
			let startX;
			let startY;
			let width;
			let height;
			let ratioX;
			let ratioY;
			let offsetX;
			let offsetY;
			if(tinf == null) {
				t = null;
				startX = 0;
				startY = 0;
				width = this.scene.width;
				height = this.scene.height;
				ratioX = this.scene.ratioX;
				ratioY = this.scene.ratioY;
				offsetX = this.scene.offsetX;
				offsetY = this.scene.offsetY;
			} else {
				t = tinf.t;
				startX = tinf.x;
				startY = tinf.y;
				width = tinf.w;
				height = tinf.h;
				ratioX = 1;
				ratioY = 1;
				offsetX = 0;
				offsetY = 0;
			}
			this.initShaders(this.baseShaderList);
			let _this = this.baseShader.halfPixelInverse__;
			let x = 0.5 / (t == null ? this.engine.width : t.width);
			let y = 0.5 / (t == null ? this.engine.height : t.height);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			let _this1 = this.baseShader.viewport__;
			let x1 = -width * 0.5 - startX - offsetX;
			let y1 = -height * 0.5 - startY - offsetY;
			let z = 2 / width * ratioX;
			let w = -2 * (t == null ? this.baseFlipY : this.targetFlipY) / height * ratioY;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z;
			_this1.w = w;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRenderZone(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	setRenderZone(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		let scaleX = this.engine.width * this.scene.ratioX / this.scene.width;
		let scaleY = this.engine.height * this.scene.ratioY / this.scene.height;
		if(this.inFilter != null) {
			let fa = this.baseShader.filterMatrixA__;
			let fb = this.baseShader.filterMatrixB__;
			let x2 = x + w;
			let y2 = y + h;
			let rx1 = x * fa.x + y * fa.y + fa.z;
			let ry1 = x * fb.x + y * fb.y + fb.z;
			let rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			let ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX + this.scene.viewportX) * scaleX + 1e-10 | 0,(y - this.curY + this.scene.viewportY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	drawScene() {
		this.scene.drawRec(this);
	}
	beforeDraw() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		let blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	beginDrawObject(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			let _this = this.baseShader.color__;
			let x = this.globalAlpha;
			let y = this.globalAlpha;
			let z = this.globalAlpha;
			let w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		let _this = this.baseShader.absoluteMatrixA__;
		let x = obj.matA;
		let y = obj.matC;
		let z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		let _this1 = this.baseShader.absoluteMatrixB__;
		let x1 = obj.matB;
		let y1 = obj.matD;
		let z1 = obj.absY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		_this1.w = 1.;
		this.beforeDraw();
		return true;
	}
	drawTile(obj,tile) {
		let matA;
		let matB;
		let matC;
		let matD;
		let absX;
		let absY;
		if(this.inFilter != null) {
			let f1 = this.baseShader.filterMatrixA__;
			let f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			let tx = tile.dx + tile.width * 0.5;
			let ty = tile.dy + tile.height * 0.5;
			let f = obj.matA;
			let a = f < 0 ? -f : f;
			let f1 = obj.matD;
			let b = f1 < 0 ? -f1 : f1;
			let tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			let cx = absX + tx * matA - this.curX;
			let cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			let xMin = 1e20;
			let yMin = 1e20;
			let xMax = -1e20;
			let yMax = -1e20;
			let px = tile.dx * matA + tile.dy * matC;
			let py = tile.dx * matB + tile.dy * matD;
			if(px < 1e20) {
				xMin = px;
			}
			if(px > -1e20) {
				xMax = px;
			}
			if(py < 1e20) {
				yMin = py;
			}
			if(py > -1e20) {
				yMax = py;
			}
			let x = tile.width;
			let px1 = (x + tile.dx) * matA + tile.dy * matC;
			let py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			let y = tile.height;
			let px2 = tile.dx * matA + (y + tile.dy) * matC;
			let py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			let x1 = tile.width;
			let y1 = tile.height;
			let px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			let py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			let cx = absX - this.curX;
			let cy = absY - this.curY;
			if(cx + xMax < 0 || cy + yMax < 0 || cx + xMin > this.curWidth || cy + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			let _this = this.baseShader.color__;
			let x = this.globalAlpha;
			let y = this.globalAlpha;
			let z = this.globalAlpha;
			let w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		let _this = this.baseShader.absoluteMatrixA__;
		let x = tile.width * obj.matA;
		let y = tile.height * obj.matC;
		let z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		let _this1 = this.baseShader.absoluteMatrixB__;
		let x1 = tile.width * obj.matB;
		let y1 = tile.height * obj.matD;
		let z1 = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		_this1.w = 1.;
		let _this2 = this.baseShader.uvPos__;
		let x2 = tile.u;
		let y2 = tile.v;
		let z2 = tile.u2 - tile.u;
		let w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			let this1 = hxd__$FloatBuffer_Float32Expand._new(0);
			let k = this1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = 1;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		let _this3 = this.engine;
		_this3.renderBuffer(this.fixedBuffer,_this3.mem.quadIndexes,2,0,-1);
		return true;
	}
	beginDraw(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		let shaderChanged = false;
		let paramsChanged = false;
		let objShaders = obj.shaders;
		let curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			let s = objShaders.s;
			let t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			let prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			let _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			let _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			let _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = 8;
		this.currentObj = obj;
		return true;
	}
}
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
Object.assign(h2d_RenderContext.prototype, {
	__class__: h2d_RenderContext
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : true, __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
class h2d_Scene extends h2d_Layers {
	constructor() {
		h2d_Object._hx_skip_constructor = true;
		super();
		h2d_Object._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.scaleMode = h2d_ScaleMode.Resize;
		super._hx_constructor(null);
		let e = h3d_Engine.CURRENT;
		this.ctx = new h2d_RenderContext(this);
		this.width = e.width;
		this.height = e.height;
		this.offsetX = 0;
		this.offsetY = 0;
		this.ratioX = 1;
		this.ratioY = 1;
		this.viewportX = 0;
		this.viewportY = 0;
		this.interactive = [];
		this.eventListeners = [];
		this.shapePoint = new h2d_col_Point();
		this.window = hxd_Window.getInstance();
		this.posChanged = true;
	}
	setEvents(events) {
		this.events = events;
	}
	checkResize() {
		let engine = h3d_Engine.CURRENT;
		let _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			let w = engine.width;
			let h = engine.height;
			if(w != this.width || h != this.height) {
				this.width = w;
				this.height = h;
				this.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			this.offsetX = 0;
			this.offsetY = 0;
			this.viewportX = 0;
			this.viewportY = 0;
			break;
		case 1:
			let _g1 = _g.height;
			let _g2 = _g.width;
			if(_g2 != this.width || _g1 != this.height) {
				this.width = _g2;
				this.height = _g1;
				this.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			this.offsetX = 0;
			this.offsetY = 0;
			this.viewportX = 0;
			this.viewportY = 0;
			break;
		case 2:
			let _g3 = _g.verticalAlign;
			let _g4 = _g.horizontalAlign;
			let _g5 = _g.height;
			let _g6 = _g.width;
			if(_g6 != this.width || _g5 != this.height) {
				this.width = _g6;
				this.height = _g5;
				this.posChanged = true;
			}
			let a = engine.width / _g6;
			let b = engine.height / _g5;
			let zoom = a > b ? b : a;
			if(_g.integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			this.ratioX = this.width * zoom / engine.width;
			this.ratioY = this.height * zoom / engine.height;
			let horizontal = _g4;
			let vertical = _g3;
			if(_g4 == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				this.offsetX = (engine.width - this.width * zoom) / (2 * zoom);
				this.viewportX = 0;
				break;
			case 1:
				this.offsetX = -((engine.width - this.width * zoom) / (2 * zoom));
				this.viewportX = (engine.width - this.width * zoom) / zoom;
				break;
			default:
				this.offsetX = -((engine.width - this.width * zoom) / 2 % 1.) * .5;
				this.viewportX = (engine.width - this.width * zoom) / (2 * zoom);
			}
			if(_g3 == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				this.offsetY = (engine.height - this.height * zoom) / (2 * zoom);
				this.viewportY = 0;
				break;
			case 4:
				this.offsetY = -((engine.height - this.height * zoom) / (2 * zoom));
				this.viewportY = (engine.height - this.height * zoom) / zoom;
				break;
			default:
				this.offsetY = -((engine.height - this.height * zoom) / 2 % 1.) * .5;
				this.viewportY = (engine.height - this.height * zoom) / (2 * zoom);
			}
			break;
		case 3:
			let _g7 = _g.verticalAlign;
			let _g8 = _g.horizontalAlign;
			let _g9 = _g.zoom;
			let _g10 = _g.height;
			let _g11 = _g.width;
			if(_g11 != this.width || _g10 != this.height) {
				this.width = _g11;
				this.height = _g10;
				this.posChanged = true;
			}
			this.ratioX = this.width * _g9 / engine.width;
			this.ratioY = this.height * _g9 / engine.height;
			let horizontal1 = _g8;
			let vertical1 = _g7;
			if(_g8 == null) {
				horizontal1 = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal1._hx_index) {
			case 0:
				this.offsetX = (engine.width - this.width * _g9) / (2 * _g9);
				this.viewportX = 0;
				break;
			case 1:
				this.offsetX = -((engine.width - this.width * _g9) / (2 * _g9));
				this.viewportX = (engine.width - this.width * _g9) / _g9;
				break;
			default:
				this.offsetX = -((engine.width - this.width * _g9) / 2 % 1.) * .5;
				this.viewportX = (engine.width - this.width * _g9) / (2 * _g9);
			}
			if(_g7 == null) {
				vertical1 = h2d_ScaleModeAlign.Center;
			}
			switch(vertical1._hx_index) {
			case 3:
				this.offsetY = (engine.height - this.height * _g9) / (2 * _g9);
				this.viewportY = 0;
				break;
			case 4:
				this.offsetY = -((engine.height - this.height * _g9) / (2 * _g9));
				this.viewportY = (engine.height - this.height * _g9) / _g9;
				break;
			default:
				this.offsetY = -((engine.height - this.height * _g9) / 2 % 1.) * .5;
				this.viewportY = (engine.height - this.height * _g9) / (2 * _g9);
			}
			break;
		case 4:
			let _g12 = _g.level;
			let w1 = Math.ceil(engine.width / _g12);
			let h1 = Math.ceil(engine.height / _g12);
			if(w1 != this.width || h1 != this.height) {
				this.width = w1;
				this.height = h1;
				this.posChanged = true;
			}
			this.ratioX = this.width * _g12 / engine.width;
			this.ratioY = this.height * _g12 / engine.height;
			this.offsetX = 0;
			this.offsetY = 0;
			this.viewportX = 0;
			this.viewportY = 0;
			break;
		case 5:
			let a1 = engine.width / _g.minWidth;
			let b1 = engine.height / _g.minHeight;
			let zoom1 = a1 > b1 ? b1 : a1;
			if(_g.integerScaling) {
				zoom1 = zoom1 | 0;
				if(zoom1 == 0) {
					zoom1 = 1;
				}
			}
			let w2 = Math.ceil(engine.width / zoom1);
			let h2 = Math.ceil(engine.height / zoom1);
			if(w2 != this.width || h2 != this.height) {
				this.width = w2;
				this.height = h2;
				this.posChanged = true;
			}
			this.ratioX = this.width * zoom1 / engine.width;
			this.ratioY = this.height * zoom1 / engine.height;
			this.offsetX = 0;
			this.offsetY = 0;
			this.viewportX = 0;
			this.viewportY = 0;
			break;
		}
	}
	dispatchListeners(event) {
		this.screenToLocal(event);
		let _g = 0;
		let _g1 = this.eventListeners;
		while(_g < _g1.length) {
			let l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	isInteractiveVisible(i) {
		let s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	screenToLocal(e) {
		let x = e.relX * this.width / (this.window.get_width() * this.ratioX * this.scaleX) - this.x - this.viewportX;
		let y = e.relY * this.height / (this.window.get_height() * this.ratioY * this.scaleY) - this.y - this.viewportY;
		let rx = x * this.matA + y * this.matB + this.absX;
		let ry = x * this.matC + y * this.matD + this.absY;
		e.relX = rx;
		e.relY = ry;
	}
	dispatchEvent(event,to) {
		let i = to;
		this.screenToLocal(event);
		let rx = event.relX;
		let ry = event.relY;
		let dx = rx - i.absX;
		let dy = ry - i.absY;
		let w1 = i.width * i.matA;
		let h1 = i.width * i.matC;
		let ky = h1 * dx + w1 * dy;
		let w2 = i.height * i.matB;
		let h2 = i.height * i.matD;
		let kx = w2 * dy + h2 * dx;
		let max = w1 * h2 - h1 * w2;
		event.relX = kx / max * i.width;
		event.relY = ky / max * i.height;
		i.handleEvent(event);
	}
	handleEvent(event,last) {
		this.screenToLocal(event);
		let rx = event.relX;
		let ry = event.relY;
		let index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		let pt = this.shapePoint;
		let _g = index;
		let _g1 = this.interactive.length;
		while(_g < _g1) {
			let idx = _g++;
			let i = this.interactive[idx];
			if(i == null) {
				break;
			}
			let dx = rx - i.absX;
			let dy = ry - i.absY;
			if(i.shape != null) {
				pt.x = (dx * i.matD - dy * i.matC) * i.invDet + i.shapeX;
				pt.y = (-dx * i.matB + dy * i.matA) * i.invDet + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
				dx = pt.x - i.shapeX;
				dy = pt.y - i.shapeY;
			} else {
				let w1 = i.width * i.matA;
				let h1 = i.width * i.matC;
				let ky = h1 * dx + w1 * dy;
				if(ky < 0) {
					continue;
				}
				let w2 = i.height * i.matB;
				let h2 = i.height * i.matD;
				let kx = w2 * dy + h2 * dx;
				if(kx < 0) {
					continue;
				}
				let max = w1 * h2 - h1 * w2;
				if(ky >= max || kx >= max) {
					continue;
				}
				dx = kx / max * i.width;
				dy = ky / max * i.height;
			}
			let visible = true;
			let p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = dx;
			event.relY = dy;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	addEventTarget(i) {
		let i1 = i;
		let lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		let level = lv;
		let _g = 0;
		let _g1 = this.interactive.length;
		while(_g < _g1) {
			let index = _g++;
			let i1 = i;
			let i2 = this.interactive[index];
			let lv1 = level;
			let i3 = i2;
			let lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			let lv2 = lv;
			let p1 = i1;
			let p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			let id = -1;
			let _g1 = 0;
			let _g2 = p1.children.length;
			while(_g1 < _g2) {
				let k = _g1++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			let tmp = id;
			let id1 = -1;
			let _g3 = 0;
			let _g4 = p2.children.length;
			while(_g3 < _g4) {
				let k = _g3++;
				if(p2.children[k] == i2) {
					id1 = k;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	removeEventTarget(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	setElapsedTime(v) {
		this.ctx.elapsedTime = v;
	}
	render(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	sync(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		super.sync(ctx);
	}
	onAdd() {
		this.checkResize();
		super.onAdd();
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	onRemove() {
		super.onRemove();
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
}
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__super__ = h2d_Layers;
Object.assign(h2d_Scene.prototype, {
	__class__: h2d_Scene
});
class h2d_Tile {
	constructor(tex,x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		this.innerTex = tex;
		this.x = x;
		this.y = y;
		this.width = w;
		this.height = h;
		this.dx = dx;
		this.dy = dy;
		if(tex != null) {
			this.setTexture(tex);
		}
	}
	setTexture(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	static fromColor(color,width,height,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		let t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
		t.width = width;
		t.height = height;
		return t;
	}
	static fromTexture(t) {
		return new h2d_Tile(t,0,0,t.width,t.height);
	}
}
h2d_Tile.__name__ = "h2d.Tile";
Object.assign(h2d_Tile.prototype, {
	__class__: h2d_Tile
});
class h2d_col_Bounds {
	constructor() {
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
}
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
Object.assign(h2d_col_Bounds.prototype, {
	__class__: h2d_col_Bounds
});
class h2d_col_Point {
	constructor(x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
	}
}
h2d_col_Point.__name__ = "h2d.col.Point";
Object.assign(h2d_col_Point.prototype, {
	__class__: h2d_col_Point
});
class h2d_filter_Filter {
	constructor() {
		this.enable = true;
		this.boundsExtend = 0.;
		this.autoBounds = true;
	}
	get_enable() {
		return this.enable;
	}
	sync(ctx,s) {
	}
	bind(s) {
	}
	unbind(s) {
	}
	getBounds(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	draw(ctx,input) {
		return input;
	}
}
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
Object.assign(h2d_filter_Filter.prototype, {
	__class__: h2d_filter_Filter
});
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer];
class h3d_Buffer {
	constructor(vertices,stride,flags) {
		this.id = h3d_Buffer.GUID++;
		this.vertices = vertices;
		this.flags = 0;
		if(flags != null) {
			let _g = 0;
			while(_g < flags.length) {
				let f = flags[_g];
				++_g;
				this.flags |= 1 << f._hx_index;
			}
		}
		if((this.flags & 32) == 0) {
			h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
		}
	}
	isDisposed() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	dispose() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	uploadVector(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		let cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw haxe_Exception.thrown("Too many vertices");
			}
			let count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	static ofFloats(v,stride,flags) {
		let nvert = v.pos / stride | 0;
		let b = new h3d_Buffer(nvert,stride,flags);
		b.uploadVector(v,0,nvert);
		return b;
	}
}
h3d_Buffer.__name__ = "h3d.Buffer";
Object.assign(h3d_Buffer.prototype, {
	__class__: h3d_Buffer
});
class h3d_Camera {
	constructor(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
		if(rightHanded == null) {
			rightHanded = false;
		}
		if(zFar == null) {
			zFar = 4000.;
		}
		if(zNear == null) {
			zNear = 0.02;
		}
		if(screenRatio == null) {
			screenRatio = 1.333333;
		}
		if(zoom == null) {
			zoom = 1.;
		}
		if(fovY == null) {
			fovY = 25.;
		}
		this.viewY = 0.;
		this.viewX = 0.;
		this.fovY = fovY;
		this.zoom = zoom;
		this.screenRatio = screenRatio;
		this.zNear = zNear;
		this.zFar = zFar;
		this.rightHanded = rightHanded;
		this.pos = new h3d_Vector(2,3,4);
		this.up = new h3d_Vector(0,0,1);
		this.target = new h3d_Vector(0,0,0);
		this.m = new h3d_Matrix();
		this.mcam = new h3d_Matrix();
		this.mproj = new h3d_Matrix();
		this.frustum = new h3d_col_Frustum();
		this.update();
	}
	getInverseViewProj() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	unproject(screenX,screenY,camZ) {
		let p = new h3d_Vector(screenX,screenY,camZ);
		let m = this.getInverseViewProj();
		let px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		let py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		let pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		let iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	update() {
		if(this.follow != null) {
			let _this = this.pos;
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 1.;
			let _this1 = this.target;
			_this1.x = 0;
			_this1.y = 0;
			_this1.z = 0;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				let p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						let v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	getFrustumCorners(zMax) {
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	makeCameraMatrix(m) {
		let _this = this.target;
		let v = this.pos;
		let x = _this.x - v.x;
		let y = _this.y - v.y;
		let z = _this.z - v.z;
		let w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let az_x = x;
		let az_y = y;
		let az_z = z;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		let k = 1. / Math.sqrt(az_x * az_x + az_y * az_y + az_z * az_z);
		az_x *= k;
		az_y *= k;
		az_z *= k;
		let _this1 = this.up;
		let x1 = _this1.y * az_z - _this1.z * az_y;
		let y1 = _this1.z * az_x - _this1.x * az_z;
		let z1 = _this1.x * az_y - _this1.y * az_x;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let ax_x = x1;
		let ax_y = y1;
		let ax_z = z1;
		let k1 = 1. / Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z);
		ax_x *= k1;
		ax_y *= k1;
		ax_z *= k1;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		let x2 = az_y * ax_z - az_z * ax_y;
		let y2 = az_z * ax_x - az_x * ax_z;
		let z2 = az_x * ax_y - az_y * ax_x;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let ay_x = x2;
		let ay_y = y2;
		let ay_z = z2;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		let v1 = this.pos;
		m._41 = -(ax_x * v1.x + ax_y * v1.y + ax_z * v1.z);
		let v2 = this.pos;
		m._42 = -(ay_x * v2.x + ay_y * v2.y + ay_z * v2.z);
		let v3 = this.pos;
		m._43 = -(az_x * v3.x + az_y * v3.y + az_z * v3.z);
		m._44 = 1;
	}
	makeFrustumMatrix(m) {
		m.zero();
		let bounds = this.orthoBounds;
		if(bounds != null) {
			let w = 1 / (bounds.xMax - bounds.xMin);
			let h = 1 / (bounds.yMax - bounds.yMin);
			let d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			let degToRad = Math.PI / 180;
			let halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			let scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
}
h3d_Camera.__name__ = "h3d.Camera";
Object.assign(h3d_Camera.prototype, {
	__class__: h3d_Camera
});
class h3d__$Engine_TargetTmp {
	constructor(t,n,l,m) {
		this.t = t;
		this.next = n;
		this.layer = l;
		this.mipLevel = m;
	}
}
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
Object.assign(h3d__$Engine_TargetTmp.prototype, {
	__class__: h3d__$Engine_TargetTmp
});
class h3d_Engine {
	constructor() {
		this.resCache = new haxe_ds_ObjectMap();
		this.ready = false;
		this.textureColorCache = new haxe_ds_IntMap();
		this.tmpVector = new h3d_Vector();
		this.backgroundColor = -16777216;
		this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
		this.antiAlias = h3d_Engine.ANTIALIASING;
		this.autoResize = true;
		this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
		this.window = hxd_Window.getInstance();
		this.realFps = hxd_System.getDefaultFrameRate();
		this.lastTime = HxOverrides.now() / 1000;
		this.window.addResizeEvent($bind(this,this.onWindowResize));
		this.driver = new h3d_impl_GlDriver(this.antiAlias);
		h3d_Engine.CURRENT = this;
	}
	init() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	selectShader(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	selectMaterial(pass) {
		this.driver.selectMaterial(pass);
	}
	uploadShaderBuffers(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	selectBuffer(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	renderBuffer(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			let ntri = b.vertices / vertPerTri | 0;
			let pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	renderIndexed(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw haxe_Exception.thrown("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		let maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	set_debug(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	onCreate(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	onContextLost() {
	}
	onReady() {
	}
	onWindowResize() {
		if(this.autoResize && !this.driver.isDisposed()) {
			let w = this.window.get_width();
			let h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	set_fullScreen(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	onResized() {
	}
	resize(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	begin() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	end() {
		this.driver.end();
	}
	getCurrentTarget() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	pushTarget(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		let c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	updateNeedFlush() {
		let t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	popTarget() {
		let c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	doFlushTarget() {
		let t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	clear(color,depth,stencil) {
		if(color != null) {
			let _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	setRenderZone(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	render(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		let delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			let curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			let f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
}
h3d_Engine.__name__ = "h3d.Engine";
Object.assign(h3d_Engine.prototype, {
	__class__: h3d_Engine
});
class h3d_Indexes {
	constructor(count,is32) {
		if(is32 == null) {
			is32 = false;
		}
		this.mem = h3d_Engine.CURRENT.mem;
		this.count = count;
		this.is32 = is32;
		this.mem.allocIndexes(this);
	}
	isDisposed() {
		return this.ibuf == null;
	}
	upload(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	dispose() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	static alloc(i,startPos,length) {
		if(length == null) {
			length = -1;
		}
		if(startPos == null) {
			startPos = 0;
		}
		if(length < 0) {
			length = i.length;
		}
		let idx = new h3d_Indexes(length);
		idx.upload(i,0,length);
		return idx;
	}
}
h3d_Indexes.__name__ = "h3d.Indexes";
Object.assign(h3d_Indexes.prototype, {
	__class__: h3d_Indexes
});
class h3d_Matrix {
	constructor() {
	}
	zero() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	identity() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	multiply3x4(a,b) {
		let m11 = a._11;
		let m12 = a._12;
		let m13 = a._13;
		let m21 = a._21;
		let m22 = a._22;
		let m23 = a._23;
		let a31 = a._31;
		let a32 = a._32;
		let a33 = a._33;
		let a41 = a._41;
		let a42 = a._42;
		let a43 = a._43;
		let b11 = b._11;
		let b12 = b._12;
		let b13 = b._13;
		let b21 = b._21;
		let b22 = b._22;
		let b23 = b._23;
		let b31 = b._31;
		let b32 = b._32;
		let b33 = b._33;
		let b41 = b._41;
		let b42 = b._42;
		let b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	multiply(a,b) {
		let a11 = a._11;
		let a12 = a._12;
		let a13 = a._13;
		let a14 = a._14;
		let a21 = a._21;
		let a22 = a._22;
		let a23 = a._23;
		let a24 = a._24;
		let a31 = a._31;
		let a32 = a._32;
		let a33 = a._33;
		let a34 = a._34;
		let a41 = a._41;
		let a42 = a._42;
		let a43 = a._43;
		let a44 = a._44;
		let b11 = b._11;
		let b12 = b._12;
		let b13 = b._13;
		let b14 = b._14;
		let b21 = b._21;
		let b22 = b._22;
		let b23 = b._23;
		let b24 = b._24;
		let b31 = b._31;
		let b32 = b._32;
		let b33 = b._33;
		let b34 = b._34;
		let b41 = b._41;
		let b42 = b._42;
		let b43 = b._43;
		let b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	inverse3x4(m) {
		let m11 = m._11;
		let m12 = m._12;
		let m13 = m._13;
		let m21 = m._21;
		let m22 = m._22;
		let m23 = m._23;
		let m31 = m._31;
		let m32 = m._32;
		let m33 = m._33;
		let m41 = m._41;
		let m42 = m._42;
		let m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		let det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		let invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	initInverse(m) {
		let m11 = m._11;
		let m12 = m._12;
		let m13 = m._13;
		let m14 = m._14;
		let m21 = m._21;
		let m22 = m._22;
		let m23 = m._23;
		let m24 = m._24;
		let m31 = m._31;
		let m32 = m._32;
		let m33 = m._33;
		let m34 = m._34;
		let m41 = m._41;
		let m42 = m._42;
		let m43 = m._43;
		let m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		let det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	loadValues(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	static L(a) {
		let m = new h3d_Matrix();
		m.loadValues(a);
		return m;
	}
}
h3d_Matrix.__name__ = "h3d.Matrix";
Object.assign(h3d_Matrix.prototype, {
	__class__: h3d_Matrix
});
class h3d_Quat {
	constructor(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	toMatrix(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		let xx = this.x * this.x;
		let xy = this.x * this.y;
		let xz = this.x * this.z;
		let xw = this.x * this.w;
		let yy = this.y * this.y;
		let yz = this.y * this.z;
		let yw = this.y * this.w;
		let zz = this.z * this.z;
		let zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
}
h3d_Quat.__name__ = "h3d.Quat";
Object.assign(h3d_Quat.prototype, {
	__class__: h3d_Quat
});
class h3d_Vector {
	constructor(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	normalize() {
		let k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
}
h3d_Vector.__name__ = "h3d.Vector";
Object.assign(h3d_Vector.prototype, {
	__class__: h3d_Vector
});
class h3d_anim_AnimatedObject {
}
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
class h3d_anim_Animation {
	constructor(name,frameCount,sampling) {
		this.name = name;
		this.frameCount = frameCount;
		this.sampling = sampling;
		this.objects = [];
		this.lastEvent = -1;
		this.frame = 0.;
		this.speed = 1.;
		this.loop = true;
		this.pause = false;
	}
	getPropValue(objectName,propName) {
		return null;
	}
	sync(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	isPlaying() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	endFrame() {
		return this.frameCount;
	}
	update(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			let f0 = this.frame | 0;
			let f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			let _g = f0;
			let _g1 = f1 + 1;
			while(_g < _g1) {
				let f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					let oldF = this.frame;
					let oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					let _g = 0;
					let _g1 = this.events[f];
					while(_g < _g1.length) {
						let e = _g1[_g];
						++_g;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			let end = this.endFrame();
			let et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
}
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
Object.assign(h3d_anim_Animation.prototype, {
	__class__: h3d_anim_Animation
});
class h3d_col_Bounds {
	constructor() {
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	inFrustum(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	rayIntersection(r,bestMatch) {
		let minTx = (this.xMin - r.px) / r.lx;
		let minTy = (this.yMin - r.py) / r.ly;
		let minTz = (this.zMin - r.pz) / r.lz;
		let maxTx = (this.xMax - r.px) / r.lx;
		let maxTy = (this.yMax - r.py) / r.ly;
		let maxTz = (this.zMax - r.pz) / r.lz;
		let realMinTx = minTx > maxTx ? maxTx : minTx;
		let realMinTy = minTy > maxTy ? maxTy : minTy;
		let realMinTz = minTz > maxTz ? maxTz : minTz;
		let realMaxTx = minTx < maxTx ? maxTx : minTx;
		let realMaxTy = minTy < maxTy ? maxTy : minTy;
		let realMaxTz = minTz < maxTz ? maxTz : minTz;
		let a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		let minmax = a > realMaxTz ? realMaxTz : a;
		let a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		let maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	intersection(a,b) {
		let a1 = a.xMin;
		let b1 = b.xMin;
		let xMin = a1 < b1 ? b1 : a1;
		let a2 = a.yMin;
		let b2 = b.yMin;
		let yMin = a2 < b2 ? b2 : a2;
		let a3 = a.zMin;
		let b3 = b.zMin;
		let zMin = a3 < b3 ? b3 : a3;
		let a4 = a.xMax;
		let b4 = b.xMax;
		let xMax = a4 > b4 ? b4 : a4;
		let a5 = a.yMax;
		let b5 = b.yMax;
		let yMax = a5 > b5 ? b5 : a5;
		let a6 = a.zMax;
		let b6 = b.zMax;
		let zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	scaleCenter(v) {
		let dx = (this.xMax - this.xMin) * 0.5 * v;
		let dy = (this.yMax - this.yMin) * 0.5 * v;
		let dz = (this.zMax - this.zMin) * 0.5 * v;
		let mx = (this.xMax + this.xMin) * 0.5;
		let my = (this.yMax + this.yMin) * 0.5;
		let mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
}
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
Object.assign(h3d_col_Bounds.prototype, {
	__class__: h3d_col_Bounds
});
class h3d_col_Frustum {
	constructor(mvp) {
		this.checkNearFar = true;
		this.pleft = new h3d_col_Plane(1,0,0,0.0);
		this.pright = new h3d_col_Plane(1,0,0,0.0);
		this.ptop = new h3d_col_Plane(1,0,0,0.0);
		this.pbottom = new h3d_col_Plane(1,0,0,0.0);
		this.pnear = new h3d_col_Plane(1,0,0,0.0);
		this.pfar = new h3d_col_Plane(1,0,0,0.0);
		if(mvp != null) {
			this.loadMatrix(mvp);
		}
	}
	loadMatrix(mvp) {
		let _this = this.pleft;
		_this.nx = mvp._14 + mvp._11;
		_this.ny = mvp._24 + mvp._21;
		_this.nz = mvp._34 + mvp._31;
		_this.d = -(mvp._44 + mvp._41);
		let _this1 = this.pright;
		_this1.nx = mvp._14 - mvp._11;
		_this1.ny = mvp._24 - mvp._21;
		_this1.nz = mvp._34 - mvp._31;
		_this1.d = mvp._41 - mvp._44;
		let _this2 = this.ptop;
		_this2.nx = mvp._14 - mvp._12;
		_this2.ny = mvp._24 - mvp._22;
		_this2.nz = mvp._34 - mvp._32;
		_this2.d = mvp._42 - mvp._44;
		let _this3 = this.pbottom;
		_this3.nx = mvp._14 + mvp._12;
		_this3.ny = mvp._24 + mvp._22;
		_this3.nz = mvp._34 + mvp._32;
		_this3.d = -(mvp._44 + mvp._42);
		let _this4 = this.pnear;
		_this4.nx = mvp._13;
		_this4.ny = mvp._23;
		_this4.nz = mvp._33;
		_this4.d = -mvp._43;
		let _this5 = this.pfar;
		_this5.nx = mvp._14 - mvp._13;
		_this5.ny = mvp._24 - mvp._23;
		_this5.nz = mvp._34 - mvp._33;
		_this5.d = mvp._43 - mvp._44;
		let _this6 = this.pleft;
		let len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		let _this7 = this.pright;
		let len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		let _this8 = this.ptop;
		let len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		let _this9 = this.pbottom;
		let len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		let _this10 = this.pnear;
		let len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		let _this11 = this.pfar;
		let len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	hasSphere(s) {
		let x = s.x;
		let y = s.y;
		let z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let p_x = x;
		let p_y = y;
		let p_z = z;
		let _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		let _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		let _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		let _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			let _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			let _this1 = this.pfar;
			if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	hasBounds(b) {
		let p = this.pleft;
		let a = p.nx;
		let b1 = p.ny;
		let c = p.nz;
		let dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		let rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		let p1 = this.pright;
		let a1 = p1.nx;
		let b2 = p1.ny;
		let c1 = p1.nz;
		let dd1 = a1 * (b.xMax + b.xMin) + b2 * (b.yMax + b.yMin) + c1 * (b.zMax + b.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		let rr1 = a1 * (b.xMax - b.xMin) + b2 * (b.yMax - b.yMin) + c1 * (b.zMax - b.zMin);
		if(dd1 + rr1 - p1.d * 2 < 0) {
			return false;
		}
		let p2 = this.ptop;
		let a2 = p2.nx;
		let b3 = p2.ny;
		let c2 = p2.nz;
		let dd2 = a2 * (b.xMax + b.xMin) + b3 * (b.yMax + b.yMin) + c2 * (b.zMax + b.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		let rr2 = a2 * (b.xMax - b.xMin) + b3 * (b.yMax - b.yMin) + c2 * (b.zMax - b.zMin);
		if(dd2 + rr2 - p2.d * 2 < 0) {
			return false;
		}
		let p3 = this.ptop;
		let a3 = p3.nx;
		let b4 = p3.ny;
		let c3 = p3.nz;
		let dd3 = a3 * (b.xMax + b.xMin) + b4 * (b.yMax + b.yMin) + c3 * (b.zMax + b.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		let rr3 = a3 * (b.xMax - b.xMin) + b4 * (b.yMax - b.yMin) + c3 * (b.zMax - b.zMin);
		if(dd3 + rr3 - p3.d * 2 < 0) {
			return false;
		}
		let p4 = this.pnear;
		let a4 = p4.nx;
		let b5 = p4.ny;
		let c4 = p4.nz;
		let dd4 = a4 * (b.xMax + b.xMin) + b5 * (b.yMax + b.yMin) + c4 * (b.zMax + b.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		let rr4 = a4 * (b.xMax - b.xMin) + b5 * (b.yMax - b.yMin) + c4 * (b.zMax - b.zMin);
		if(dd4 + rr4 - p4.d * 2 < 0) {
			return false;
		}
		let p5 = this.pfar;
		let a5 = p5.nx;
		let b6 = p5.ny;
		let c5 = p5.nz;
		let dd5 = a5 * (b.xMax + b.xMin) + b6 * (b.yMax + b.yMin) + c5 * (b.zMax + b.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b6 < 0) {
			b6 = -b6;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		let rr5 = a5 * (b.xMax - b.xMin) + b6 * (b.yMax - b.yMin) + c5 * (b.zMax - b.zMin);
		if(dd5 + rr5 - p5.d * 2 < 0) {
			return false;
		}
		return true;
	}
}
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
Object.assign(h3d_col_Frustum.prototype, {
	__class__: h3d_col_Frustum
});
class h3d_col_Ray {
	constructor() {
	}
	normalize() {
		let l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
}
h3d_col_Ray.__name__ = "h3d.col.Ray";
Object.assign(h3d_col_Ray.prototype, {
	__class__: h3d_col_Ray
});
class h3d_col_Plane {
	constructor(nx,ny,nz,d) {
		this.nx = nx;
		this.ny = ny;
		this.nz = nz;
		this.d = d;
	}
}
h3d_col_Plane.__name__ = "h3d.col.Plane";
Object.assign(h3d_col_Plane.prototype, {
	__class__: h3d_col_Plane
});
class h3d_col_Sphere {
	constructor(x,y,z,r) {
		if(r == null) {
			r = 0.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let sx = x;
		let sy = y;
		let sz = z;
		let sr = r;
		if(r == null) {
			sr = 0.;
		}
		if(z == null) {
			sz = 0.;
		}
		if(y == null) {
			sy = 0.;
		}
		if(x == null) {
			sx = 0.;
		}
		this.x = sx;
		this.y = sy;
		this.z = sz;
		this.r = sr;
	}
	rayIntersection(r,bestMatch) {
		let r2 = this.r * this.r;
		let px = r.px + r.lx;
		let py = r.py + r.ly;
		let pz = r.pz + r.lz;
		let a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		let b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		let c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		let d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		let t = (-b + d) / (2 * a);
		return 1 - t;
	}
	inFrustum(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	inFrustumMatrix(f,m) {
		let oldX = this.x;
		let oldY = this.y;
		let oldZ = this.z;
		let oldR = this.r;
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let v_x = x;
		let v_y = y;
		let v_z = z;
		let px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		let py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		let pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		let v = null;
		v = new h3d_Vector();
		v.x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		v.y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		v.z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		let scale = v;
		this.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		let res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
}
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
Object.assign(h3d_col_Sphere.prototype, {
	__class__: h3d_col_Sphere
});
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe","InstancedRendering"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : true, __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	static keysIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return keys[idx - 1];
		}};
	}
}
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class h3d_impl_InputNames {
	constructor(names) {
		this.id = h3d_impl_InputNames.UID++;
		this.names = names;
	}
	static get(names) {
		let key = names.join("|");
		let i = h3d_impl_InputNames.CACHE.h[key];
		if(i == null) {
			i = new h3d_impl_InputNames(names.slice());
			h3d_impl_InputNames.CACHE.h[key] = i;
		}
		return i;
	}
}
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
Object.assign(h3d_impl_InputNames.prototype, {
	__class__: h3d_impl_InputNames
});
class h3d_impl_Driver {
	hasFeature(f) {
		return false;
	}
	setRenderFlag(r,value) {
	}
	isSupportedFormat(fmt) {
		return false;
	}
	isDisposed() {
		return true;
	}
	begin(frame) {
	}
	generateMipMaps(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	clear(color,depth,stencil) {
	}
	init(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	resize(width,height) {
	}
	selectShader(shader) {
		return false;
	}
	selectMaterial(pass) {
	}
	uploadShaderBuffers(buffers,which) {
	}
	selectBuffer(buffer) {
	}
	draw(ibuf,startIndex,ntriangles) {
	}
	setRenderZone(x,y,width,height) {
	}
	setRenderTarget(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	setRenderTargets(textures) {
	}
	allocDepthBuffer(b) {
		return null;
	}
	disposeDepthBuffer(b) {
	}
	getDefaultDepthBuffer() {
		return null;
	}
	end() {
	}
	setDebug(b) {
	}
	allocTexture(t) {
		return null;
	}
	allocIndexes(count,is32) {
		return null;
	}
	allocVertexes(m) {
		return null;
	}
	disposeTexture(t) {
	}
	disposeIndexes(i) {
	}
	disposeVertexes(v) {
	}
	uploadIndexBuffer(i,startIndice,indiceCount,buf,bufPos) {
	}
	uploadVertexBuffer(v,startVertex,vertexCount,buf,bufPos) {
	}
	uploadTexturePixels(t,pixels,mipLevel,side) {
	}
	copyTexture(from,to) {
		return false;
	}
}
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
Object.assign(h3d_impl_Driver.prototype, {
	__class__: h3d_impl_Driver
});
class h3d_impl__$GlDriver_CompiledShader {
	constructor(s,vertex,shader) {
		this.s = s;
		this.vertex = vertex;
		this.shader = shader;
	}
}
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
Object.assign(h3d_impl__$GlDriver_CompiledShader.prototype, {
	__class__: h3d_impl__$GlDriver_CompiledShader
});
class h3d_impl__$GlDriver_CompiledAttribute {
	constructor() {
	}
}
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
Object.assign(h3d_impl__$GlDriver_CompiledAttribute.prototype, {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
});
class h3d_impl__$GlDriver_CompiledProgram {
	constructor() {
	}
}
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
Object.assign(h3d_impl__$GlDriver_CompiledProgram.prototype, {
	__class__: h3d_impl__$GlDriver_CompiledProgram
});
class h3d_impl_GlDriver extends h3d_impl_Driver {
	constructor(antiAlias) {
		if(antiAlias == null) {
			antiAlias = 0;
		}
		super();
		this.features = new haxe_ds_EnumValueMap();
		this.maxCompressedTexturesSupport = 0;
		this.rightHanded = false;
		this.firstShader = true;
		this.boundTextures = [];
		this.curTargets = [];
		let _g = [];
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		this.currentDivisor = _g;
		this.curColorMask = -1;
		this.lastActiveIndex = 0;
		this.curStEnabled = false;
		this.curStMaskBits = -1;
		this.curStOpBits = -1;
		this.curMatBits = -1;
		this.maxIdxCurAttribs = 0;
		this.curAttribs = [];
		this.canvas = hxd_Window.getInstance().canvas;
		let options = { alpha : false, stencil : true, antialias : antiAlias > 0};
		if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
			this.gl = this.canvas.getContext("webgl2",options);
		}
		if(this.gl == null) {
			this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
		}
		if(this.gl == null) {
			throw haxe_Exception.thrown("Could not acquire GL context");
		}
		if(typeof(WebGLDebugUtils) != "undefined") {
			this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
			this.glDebug = true;
		}
		this.commonFB = this.gl.createFramebuffer();
		this.programs = new haxe_ds_IntMap();
		this.defStencil = new h3d_mat_Stencil();
		let v = this.gl.getParameter(7938);
		let reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
		if(reg.match(v)) {
			this.glES = parseFloat(reg.matched(1));
		}
		let reg1 = new EReg("[0-9]+\\.[0-9]+","");
		let v1 = this.gl.getParameter(35724);
		if(reg1.match(v1)) {
			this.glES = parseFloat(reg1.matched(0));
			this.shaderVersion = Math.round(parseFloat(reg1.matched(0)) * 100);
		}
		this.drawMode = 4;
		this.makeFeatures();
		if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
			let extension = this.gl.getExtension("ANGLE_instanced_arrays");
			this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
			this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
		}
		hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	}
	setRenderFlag(r,value) {
		this.rightHanded = value > 0;
	}
	setDebug(d) {
		this.debug = d;
	}
	begin(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	getDriverName(details) {
		let render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	compileShader(glout,shader) {
		let type = shader.vertex ? 35633 : 35632;
		let s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			let log = this.gl.getShaderInfoLog(s);
			let lid = Std.parseInt(HxOverrides.substr(log,9,null));
			let line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			let codeLines = shader.code.split("\n");
			let _g = 0;
			let _g1 = codeLines.length;
			while(_g < _g1) {
				let i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	initShader(p,s,shader) {
		let prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		let index = 0;
		let curT = null;
		let mode = 0;
		let name = "";
		let t = shader.textures;
		while(t != null) {
			let tt = t.type;
			if(tt._hx_index == 17) {
				tt = hxsl_Type.TSampler2D;
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
			++index;
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			let _g = [];
			let _g1 = 0;
			let _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				let i = _g1++;
				_g.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g;
			let _g3 = 0;
			let _g4 = shader.bufferCount;
			while(_g3 < _g4) {
				let i = _g3++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i],i);
			}
		}
	}
	selectShader(shader) {
		let p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			let glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			let log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(haxe_Exception.caught(_g).unwrap()) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			let attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			let _g = 0;
			let _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					let t = 5126;
					let size;
					let _g = v.type;
					switch(_g._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						size = _g.size;
						break;
					case 9:
						t = 5120;
						size = _g.size;
						break;
					default:
						throw haxe_Exception.thrown("assert " + Std.string(v.type));
					}
					let index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					let a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						let _g = 0;
						let _g1 = v.qualifiers;
						while(_g < _g1.length) {
							let q = _g1[_g];
							++_g;
							if(q._hx_index == 9) {
								a.divisor = q.v;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		let _g = 0;
		let _g1 = p.attribs;
		while(_g < _g1.length) {
			let a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		let lastIdxCurAttribTrue = 0;
		let _g2 = 0;
		let _g3 = this.maxIdxCurAttribs + 1;
		while(_g2 < _g3) {
			let i = _g2++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		let _g4 = 0;
		let _g5 = this.boundTextures.length;
		while(_g4 < _g5) {
			let i = _g4++;
			this.boundTextures[i] = null;
		}
		return true;
	}
	uploadShaderBuffers(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	uploadBuffer(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				let a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				let a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			let _g = 0;
			let _g1 = s.textures.length;
			while(_g < _g1) {
				let i = _g++;
				let t = buf.tex[i];
				let pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						let color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				let idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					let mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				let mip = t.mipMap._hx_index;
				let filter = t.filter._hx_index;
				let wrap = t.wrap._hx_index;
				let bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					let flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					let mode = pt.mode;
					this.gl.texParameteri(mode,10240,flags[0]);
					this.gl.texParameteri(mode,10241,flags[1]);
					let w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode,10242,w);
					this.gl.texParameteri(mode,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				let _g = 0;
				let _g1 = s.buffers.length;
				while(_g < _g1) {
					let i = _g++;
					this.gl.bindBufferBase(35345,i,buf.buffers[i].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	selectMaterial(pass) {
		let bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			let m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		let s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	selectMaterialBits(bits) {
		let diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		let wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			let cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			let csrc = bits >> 6 & 15;
			let cdst = bits >> 10 & 15;
			let asrc = bits >> 14 & 15;
			let adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			let cop = bits >> 22 & 7;
			let aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			let cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	selectStencilBits(opBits,maskBits) {
		let diffOp = opBits ^ this.curStOpBits;
		let diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			let w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	clear(color,depth,stencil) {
		let bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits = 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 256;
		}
	}
	resize(width,height) {
		if(this.canvas.style.width == "") {
			let tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			let tmp1 = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp1 + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	getChannels(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	isSupportedFormat(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 18:
			return fmt.v <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	getBindType(t) {
		let isCube = (t.flags & 2) != 0;
		let isArray = (t.flags & 2048) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	allocTexture(t) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		let tt = this.gl.createTexture();
		let bind = this.getBindType(t);
		let tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		let _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			let _g1 = _g.v;
			if(_g1 <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(_g1) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -257;
		this.gl.bindTexture(bind,tt1.t);
		let outOfMem = false;
		if((t.flags & 2) != 0) {
			let _g = 0;
			while(_g < 6) {
				let i = _g++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				let tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					let err = this.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 2048) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				let err = this.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			if(t.format._hx_index != 18) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				let err = this.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	restoreBind() {
		let t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	allocDepthBuffer(b) {
		let r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		let format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	disposeDepthBuffer(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	getDefaultDepthBuffer() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	allocVertexes(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		let b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1) != 0 ? 35048 : 35044);
		let outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	allocIndexes(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		let b = this.gl.createBuffer();
		let size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		let outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	disposeTexture(t) {
		let tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		let _g = 0;
		let _g1 = this.boundTextures.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	disposeIndexes(i) {
		this.gl.deleteBuffer(i.b);
	}
	disposeVertexes(v) {
		this.gl.deleteBuffer(v.b);
	}
	generateMipMaps(t) {
		let bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	resetStream() {
	}
	uploadTexturePixels(t,pixels,mipLevel,side) {
		let cubic = (t.flags & 2) != 0;
		let bind = this.getBindType(t);
		if((t.flags & 2048) != 0) {
			throw haxe_Exception.thrown("TODO:texImage3D");
		}
		let face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		let bufLen = pixels.stride * pixels.height;
		let buffer;
		switch(t.format._hx_index) {
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 1);
			break;
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,bufLen);
		}
		if(t.format._hx_index == 18) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 256;
		this.restoreBind();
	}
	uploadVertexBuffer(v,startVertex,vertexCount,buf,bufPos) {
		let stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		let buf1 = buf.array;
		let sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	uploadIndexBuffer(i,startIndice,indiceCount,buf,bufPos) {
		let bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		let buf1 = new Uint16Array(buf);
		let sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	selectBuffer(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 16) != 0 == ((this.curBuffer.flags & 16) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.curBuffer = v;
		let m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw haxe_Exception.thrown("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 16) != 0) {
			let _g = 0;
			let _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				let a = _g1[_g];
				++_g;
				let pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			let offset = 8;
			let _g = 0;
			let _g1 = this.curShader.attribs.length;
			while(_g < _g1) {
				let i = _g++;
				let a = this.curShader.attribs[i];
				let pos;
				let _g1 = this.curShader.inputs.names[i];
				switch(_g1) {
				case "normal":
					if(m.stride < 6) {
						throw haxe_Exception.thrown("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos = 3;
					break;
				case "position":
					pos = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw haxe_Exception.thrown("Buffer is missing UV data, set it to RAW format ?");
					}
					pos = 6;
					break;
				default:
					pos = offset;
					offset += a.size;
					if(offset > m.stride) {
						throw haxe_Exception.thrown("Buffer is missing '" + _g1 + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		}
	}
	draw(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	end() {
	}
	isDisposed() {
		return this.gl.isContextLost();
	}
	setRenderZone(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	setDrawBuffers(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	unbindTargets() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	setRenderTarget(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 4) != 0 && (tex.flags & 256) == 0) {
			let bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 256;
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 2048) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 2) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
			this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		let _g = 0;
		let _g1 = this.boundTextures.length;
		while(_g < _g1) {
			let i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			let code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	setRenderTargets(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		let _g = 1;
		let _g1 = textures.length;
		while(_g < _g1) {
			let i = _g++;
			let tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			tex.flags |= 256;
		}
		this.setDrawBuffers(textures.length);
	}
	init(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		let ready = false;
		if(window.document.readyState == "complete") {
			let _g = onCreate;
			let a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	hasFeature(f) {
		return this.features.get(f);
	}
	makeFeatures() {
		let _g = 0;
		let _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	checkFeature(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
}
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
Object.assign(h3d_impl_GlDriver.prototype, {
	__class__: h3d_impl_GlDriver
});
class h3d_impl__$ManagedBuffer_FreeCell {
	constructor(pos,count,next) {
		this.pos = pos;
		this.count = count;
		this.next = next;
	}
}
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
Object.assign(h3d_impl__$ManagedBuffer_FreeCell.prototype, {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
});
class h3d_impl_ManagedBuffer {
	constructor(stride,size,flags) {
		this.flags = 0;
		if(flags != null) {
			let _g = 0;
			while(_g < flags.length) {
				let f = flags[_g];
				++_g;
				this.flags |= 1 << f._hx_index;
			}
		}
		this.size = size;
		this.stride = stride;
		this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
		this.mem = h3d_Engine.CURRENT.mem;
		this.mem.allocManaged(this);
	}
	uploadVertexBuffer(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	allocPosition(nvert,align) {
		let free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				let d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		let pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	allocBuffer(b) {
		let align = (b.flags & 4) != 0 ? 4 : (b.flags & 2) != 0 ? 3 : 1;
		let p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	freeBuffer(b) {
		let prev = null;
		let f = this.freeList;
		let nvert = b.vertices;
		let end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					let n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw haxe_Exception.thrown("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 8) == 0) {
			this.dispose();
		}
	}
	dispose() {
		this.mem.freeManaged(this);
	}
}
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
Object.assign(h3d_impl_ManagedBuffer.prototype, {
	__class__: h3d_impl_ManagedBuffer
});
class h3d_impl_MemoryManager {
	constructor(driver) {
		this.bufferCount = 0;
		this.texMemory = 0;
		this.usedMemory = 0;
		this.driver = driver;
	}
	init() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	initIndexes() {
		let this1 = new Array(0);
		let indices = this1;
		let _g = 0;
		while(_g < 65533) {
			let i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		let this2 = new Array(0);
		let indices1 = this2;
		let _g1 = 0;
		while(_g1 < 16383) {
			let i = _g1++;
			let k = i << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	garbage() {
	}
	cleanManagedBuffers() {
		let _g = 1;
		let _g1 = this.buffers.length;
		while(_g < _g1) {
			let i = _g++;
			let b = this.buffers[i];
			let prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	allocManaged(m) {
		if(m.vbuf != null) {
			return;
		}
		let mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			let size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw haxe_Exception.thrown("Too many buffers");
				}
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	freeManaged(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 8) == 0) {
			let c = this.buffers[0];
			let prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	allocBuffer(b,stride) {
		let max = (b.flags & 4) != 0 ? 65532 : (b.flags & 2) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw haxe_Exception.thrown("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			let rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			let n = b;
			while(n.next != null) n = n.next;
			let flags = [];
			let _g = 0;
			let _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				let f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 8) == 0) {
			let flags = null;
			if((b.flags & 1) != 0) {
				flags = [];
				flags.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 64) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.UniformBuffer);
			}
			let m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw haxe_Exception.thrown("assert");
			}
			return;
		}
		let m = this.buffers[stride];
		let prev = null;
		while(m != null) {
			if(m.allocBuffer(b)) {
				return;
			}
			prev = m;
			m = m.next;
		}
		let align = (b.flags & 2) != 0 ? 3 : (b.flags & 4) != 0 ? 4 : 0;
		if(m == null && align > 0) {
			let total = b.vertices;
			let size = total;
			while(size > 2048) {
				m = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m != null) {
					if(m.allocBuffer(b)) {
						let flags = [];
						let _g = 0;
						let _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g < _g1.length) {
							let f = _g1[_g];
							++_g;
							if((b.flags & 1 << f._hx_index) != 0) {
								flags.push(f);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags);
						return;
					}
					m = m.next;
				}
			}
			b.vertices = total;
		}
		m = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m;
		} else {
			prev.next = m;
		}
		if(!m.allocBuffer(b)) {
			throw haxe_Exception.thrown("assert");
		}
	}
	deleteIndexes(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	allocIndexes(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	bpp(t) {
		return 4;
	}
	cleanTextures(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		let _g = 0;
		let _g1 = this.textures;
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	sortByLRU(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	deleteTexture(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	allocTexture(t) {
		this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	allocDepth(b) {
		this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	deleteDepth(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	onContextLost() {
		this.dispose();
		this.initIndexes();
	}
	dispose() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		let _g = 0;
		let _g1 = this.textures.slice();
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			t.dispose();
		}
		let _g2 = 0;
		let _g3 = this.depths.slice();
		while(_g2 < _g3.length) {
			let b = _g3[_g2];
			++_g2;
			b.dispose();
		}
		let _g4 = 0;
		let _g5 = this.buffers.slice();
		while(_g4 < _g5.length) {
			let b = _g5[_g4];
			++_g4;
			let b1 = b;
			while(b1 != null) {
				b1.dispose();
				b1 = b1.next;
			}
		}
		let _g6 = 0;
		let _g7 = this.indexes.slice();
		while(_g6 < _g7.length) {
			let i = _g7[_g6];
			++_g6;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	freeMemorySize() {
		let size = 0;
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			let b1 = b;
			while(b1 != null) {
				let free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
}
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
Object.assign(h3d_impl_MemoryManager.prototype, {
	__class__: h3d_impl_MemoryManager
});
class h3d_impl_TextureCache {
	constructor(ctx) {
		this.position = 0;
		this.ctx = ctx;
		this.cache = [];
		this.defaultFormat = h3d_mat_Texture.nativeFormat;
		this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
	}
	begin() {
		while(this.cache.length > this.position) {
			let t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	lookupTarget(name,width,height,format,isCube) {
		let t = this.cache[this.position];
		let _g = this.position + 1;
		let _g1 = this.cache.length;
		while(_g < _g1) {
			let i = _g++;
			let t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 2) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		let flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		let newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	allocTarget(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		let t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 2) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
}
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
Object.assign(h3d_impl_TextureCache.prototype, {
	__class__: h3d_impl_TextureCache
});
class hxd_impl_AnyProps {
	set_props(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	getDefaultProps(kind) {
		return { };
	}
	refreshProps() {
	}
}
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
Object.assign(hxd_impl_AnyProps.prototype, {
	__class__: hxd_impl_AnyProps
});
class h3d_mat_BaseMaterial extends hxd_impl_AnyProps {
	constructor(shader) {
		super();
		if(h3d_mat_BaseMaterial._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(shader);
	}
	_hx_constructor(shader) {
		if(shader != null) {
			this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
		}
	}
	addPass(p) {
		let prev = null;
		let cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	removePass(p) {
		let prev = null;
		let cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	getPass(name) {
		let p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
}
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
Object.assign(h3d_mat_BaseMaterial.prototype, {
	__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
class h3d_mat_Defaults {
	static get_shadowShader() {
		let s = h3d_mat_Defaults.shadowShader;
		if(s == null) {
			s = new h3d_shader_Shadow();
			h3d_mat_Defaults.set_shadowShader(s);
			h3d_mat_Defaults.shadowShader.setPriority(-1);
		}
		return s;
	}
	static set_shadowShader(s) {
		return h3d_mat_Defaults.shadowShader = s;
	}
}
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : true, __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
class h3d_mat_DepthBuffer {
	constructor(width,height,format) {
		this.width = width;
		this.height = height;
		this.format = format;
		if(width > 0) {
			this.alloc();
		}
	}
	hasStencil() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	alloc() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	dispose() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	isDisposed() {
		return this.b == null;
	}
	static getDefault() {
		return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
	}
}
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
Object.assign(h3d_mat_DepthBuffer.prototype, {
	__class__: h3d_mat_DepthBuffer
});
class h3d_mat_Material extends h3d_mat_BaseMaterial {
	constructor(texture) {
		h3d_mat_BaseMaterial._hx_skip_constructor = true;
		super();
		h3d_mat_BaseMaterial._hx_skip_constructor = false;
		this._hx_constructor(texture);
	}
	_hx_constructor(texture) {
		this.mshader = new h3d_shader_BaseMesh();
		this.set_blendMode(h2d_BlendMode.None);
		super._hx_constructor(this.mshader);
		this.set_texture(texture);
	}
	set_castShadows(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	set_receiveShadows(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			let shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	set_blendMode(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	set_texture(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	getDefaultProps(type) {
		let props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	refreshProps() {
		if(this.props == null || this.passes == null) {
			return;
		}
		let props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		let tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		let v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
}
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
Object.assign(h3d_mat_Material.prototype, {
	__class__: h3d_mat_Material
});
class h3d_mat_MaterialDatabase {
	constructor() {
	}
}
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
Object.assign(h3d_mat_MaterialDatabase.prototype, {
	__class__: h3d_mat_MaterialDatabase
});
class h3d_mat_MaterialSetup {
	constructor(name) {
		if(this.database == null) {
			this.database = new h3d_mat_MaterialDatabase();
		}
		this.name = name;
	}
	createRenderer() {
		return new h3d_scene_fwd_Renderer();
	}
	createLightSystem() {
		return new h3d_scene_fwd_LightSystem();
	}
	createMaterial() {
		return new h3d_mat_Material();
	}
}
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
Object.assign(h3d_mat_MaterialSetup.prototype, {
	__class__: h3d_mat_MaterialSetup
});
class h3d_mat_Pass {
	constructor(name,shaders,parent) {
		this.layer = 0;
		this.bits = 0;
		this.parentPass = parent;
		this.shaders = shaders;
		this.setPassName(name);
		this.set_culling(h3d_mat_Face.Back);
		let src = h3d_mat_Blend.One;
		let dst = h3d_mat_Blend.Zero;
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
		this.depth(true,h3d_mat_Compare.Less);
		this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
		this.colorMask = 15;
	}
	setPassName(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	setBlendMode(b) {
		switch(b._hx_index) {
		case 0:
			let src = h3d_mat_Blend.One;
			let dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			let src1 = h3d_mat_Blend.SrcAlpha;
			let dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			let src2 = h3d_mat_Blend.SrcAlpha;
			let dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			let src3 = h3d_mat_Blend.One;
			let dst3 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			let src4 = h3d_mat_Blend.OneMinusDstColor;
			let dst4 = h3d_mat_Blend.One;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			let src5 = h3d_mat_Blend.DstColor;
			let dst5 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			let src6 = h3d_mat_Blend.DstColor;
			let dst6 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			let src7 = h3d_mat_Blend.Zero;
			let dst7 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src7);
			this.set_blendAlphaSrc(src7);
			this.set_blendDst(dst7);
			this.set_blendAlphaDst(dst7);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			let src8 = h3d_mat_Blend.One;
			let dst8 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src8);
			this.set_blendAlphaSrc(src8);
			this.set_blendDst(dst8);
			this.set_blendAlphaDst(dst8);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			let src9 = h3d_mat_Blend.SrcAlpha;
			let dst9 = h3d_mat_Blend.One;
			this.set_blendSrc(src9);
			this.set_blendAlphaSrc(src9);
			this.set_blendDst(dst9);
			this.set_blendAlphaDst(dst9);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	depth(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	addShader(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	removeShader(s) {
		let sl = this.shaders;
		let prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	getShadersRec() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		let s = this.shaders;
		let prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	set_enableLights(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	set_isStatic(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	set_culling(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	set_depthWrite(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	set_depthTest(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	set_blendSrc(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	set_blendDst(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	set_blendAlphaSrc(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	set_blendAlphaDst(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	set_blendOp(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	set_blendAlphaOp(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
}
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
Object.assign(h3d_mat_Pass.prototype, {
	__class__: h3d_mat_Pass
});
class h3d_mat_Stencil {
	constructor() {
		this.opBits = 0;
		this.maskBits = 0;
		this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
		this.setFunc(h3d_mat_Compare.Always);
	}
	setFront(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	setBack(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	setOp(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	setFunc(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	set_readMask(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	set_writeMask(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	set_reference(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	set_frontTest(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	set_frontPass(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	set_frontSTfail(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	set_frontDPfail(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	set_backTest(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	set_backPass(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	set_backSTfail(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	set_backDPfail(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
}
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
Object.assign(h3d_mat_Stencil.prototype, {
	__class__: h3d_mat_Stencil
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
}
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:18,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF];
class h3d_mat_Texture {
	constructor(w,h,flags,format) {
		let engine = h3d_Engine.CURRENT;
		this.mem = engine.mem;
		if(format == null) {
			format = h3d_mat_Texture.nativeFormat;
		}
		this.id = ++h3d_mat_Texture.UID;
		this.format = format;
		this.flags = 0;
		if(flags != null) {
			let _g = 0;
			while(_g < flags.length) {
				let f = flags[_g];
				++_g;
				this.flags |= 1 << f._hx_index;
			}
		}
		let tw = 1;
		let th = 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(tw != w || th != h) {
			this.flags |= 16;
		}
		if((this.flags & 1) != 0) {
			this.realloc = function() {
			};
		}
		this.width = w;
		this.height = h;
		this.set_mipMap((this.flags & 4) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
		this.set_filter(h3d_mat_Filter.Linear);
		this.set_wrap(h3d_mat_Wrap.Clamp);
		this.bits &= 32767;
		if((this.flags & 32) == 0) {
			this.alloc();
		}
	}
	set_lastFrame(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	get_lastFrame() {
		return this._lastFrame;
	}
	get_layerCount() {
		if((this.flags & 2) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	alloc() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	toString() {
		let str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	setName(n) {
		this.name = n;
	}
	set_mipMap(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	set_filter(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	set_wrap(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	clear(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width != 1 || this.height != 1) {
			let engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				let _g = 0;
				let _g1 = this.get_layerCount();
				while(_g < _g1) {
					let i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			let p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			let k = 0;
			let b = color & 255;
			let g = color >> 8 & 255;
			let r = color >> 16 & 255;
			let a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				let tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			let _g = 0;
			let _g1 = this.width * this.height;
			while(_g < _g1) {
				++_g;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				let _g = 0;
				let _g1 = this.get_layerCount();
				while(_g < _g1) {
					let i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	checkMipMapGen(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 4) != 0 && (this.flags & 8) == 0 && ((this.flags & 2) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	uploadPixels(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		let width = pixels.width;
		let height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 256;
		this.checkMipMapGen(mipLevel,layer);
	}
	dispose() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	static fromColor(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		let engine = h3d_Engine.CURRENT;
		let aval = alpha * 255 | 0;
		if(aval < 0) {
			aval = 0;
		} else if(aval > 255) {
			aval = 255;
		}
		let key = color & 16777215 | aval << 24;
		let t = engine.textureColorCache.h[key];
		if(t != null) {
			return t;
		}
		let t1 = new h3d_mat_Texture(1,1,null);
		t1.clear(color,alpha);
		t1.realloc = function() {
			t1.clear(color,alpha);
		};
		engine.textureColorCache.h[key] = t1;
		return t1;
	}
	static defaultCubeTexture() {
		let engine = h3d_Engine.CURRENT;
		let t = engine.resCache.h[h3d_mat_Texture.__id__];
		if(t != null) {
			return t;
		}
		t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
		t.clear(2105376);
		t.realloc = function() {
			t.clear(2105376);
		};
		engine.resCache.set(h3d_mat_Texture,t);
		return t;
	}
}
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
Object.assign(h3d_mat_Texture.prototype, {
	__class__: h3d_mat_Texture
});
class h3d_pass_Base {
	constructor(name) {
		if(h3d_pass_Base._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(name);
	}
	_hx_constructor(name) {
		this.name = name;
	}
	setContext(ctx) {
		this.ctx = ctx;
	}
	draw(passes,sort) {
	}
}
h3d_pass_Base.__name__ = "h3d.pass.Base";
Object.assign(h3d_pass_Base.prototype, {
	__class__: h3d_pass_Base
});
class h3d_pass_ScreenFx {
	constructor(shader,output) {
		if(h3d_pass_ScreenFx._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(shader,output);
	}
	_hx_constructor(shader,output) {
		this.shader = shader;
		this.shaders = new hxsl_ShaderList(shader);
		this.manager = new h3d_pass_ShaderManager(output);
		this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
		this.pass.set_culling(h3d_mat_Face.None);
		this.pass.depth(false,h3d_mat_Compare.Always);
	}
	get_engine() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	render() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		let rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			let _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	dispose() {
	}
}
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
Object.assign(h3d_pass_ScreenFx.prototype, {
	__class__: h3d_pass_ScreenFx
});
class h3d_pass_Blur extends h3d_pass_ScreenFx {
	constructor(radius,gain,linear,quality) {
		h3d_pass_ScreenFx._hx_skip_constructor = true;
		super();
		h3d_pass_ScreenFx._hx_skip_constructor = false;
		this._hx_constructor(radius,gain,linear,quality);
	}
	_hx_constructor(radius,gain,linear,quality) {
		if(quality == null) {
			quality = 1.;
		}
		if(linear == null) {
			linear = 0.;
		}
		if(gain == null) {
			gain = 1.;
		}
		if(radius == null) {
			radius = 1.;
		}
		this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
		super._hx_constructor(new h3d_shader_Blur());
		this.set_radius(radius);
		this.set_quality(quality);
		this.set_gain(gain);
		this.set_linear(linear);
	}
	set_radius(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	set_quality(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	set_gain(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	set_linear(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	gauss(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		let sq = s * s;
		let p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	calcValues() {
		this.values = [];
		this.offsets = [];
		let tot = 0.;
		let f = this.quality;
		let qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		let width;
		if(this.radius > 0) {
			let a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		let sigma = Math.sqrt(this.radius);
		let _g = 0;
		let _g1 = width + 1;
		while(_g < _g1) {
			let i = _g++;
			let i1 = i * 2;
			let i2 = i == 0 ? 0 : i * 2 - 1;
			let g1 = this.gauss(i1,sigma);
			let g2 = this.gauss(i2,sigma);
			let g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		let minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			let last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		let _g2 = 0;
		let _g3 = this.values.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			let m = this.gain / (this.values.length * 2 - 1);
			let _g = 0;
			let _g1 = this.values.length;
			while(_g < _g1) {
				let i = _g++;
				let a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				let a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	apply(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		let isCube = (src.flags & 2) != 0;
		let faceCount = isCube ? 6 : 1;
		let tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		let _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			let _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			let _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		let _this1 = this.shader.pixel__;
		let x = 1 / src.width;
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = 0;
		_this1.z = 0.;
		_this1.w = 1.;
		let _g = 0;
		let _g1 = faceCount;
		while(_g < _g1) {
			let i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		let _this2 = this.shader.pixel__;
		let y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		_this2.x = 0;
		_this2.y = y;
		_this2.z = 0.;
		_this2.w = 1.;
		let outDepth = output.depthBuffer;
		output.depthBuffer = null;
		let _g2 = 0;
		let _g3 = faceCount;
		while(_g2 < _g3) {
			let i = _g2++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
}
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
Object.assign(h3d_pass_Blur.prototype, {
	__class__: h3d_pass_Blur
});
class hxsl_Shader {
	constructor() {
		if(hxsl_Shader._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.priority = 0;
		this.initialize();
	}
	initialize() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		let cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			let curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	setPriority(v) {
		this.priority = v;
	}
	getParamValue(index) {
		throw haxe_Exception.thrown("assert");
	}
	getParamFloatValue(index) {
		throw haxe_Exception.thrown("assert");
	}
	updateConstants(globals) {
		throw haxe_Exception.thrown("assert");
	}
	updateConstantsFinal(globals) {
		let c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			let v = globals.map.h[c.globalId];
			let _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				let v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				let v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				if(v == null) {
					c = c.next;
					continue;
				}
				let v3 = v;
				let sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(_g.size) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		let _this = this.shader;
		let constBits = this.constBits;
		let i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	toString() {
		let c = js_Boot.getClass(this);
		return c.__name__;
	}
}
hxsl_Shader.__name__ = "hxsl.Shader";
Object.assign(hxsl_Shader.prototype, {
	__class__: hxsl_Shader
});
class h3d_shader_ScreenShader extends hxsl_Shader {
	constructor() {
		if(hxsl_Shader._hx_skip_constructor) {
			super();
			return;
		}
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.flipY__ = 0;
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
Object.assign(h3d_shader_ScreenShader.prototype, {
	__class__: h3d_shader_ScreenShader
});
class h3d_pass__$Border_BorderShader extends h3d_shader_ScreenShader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.color__ = new h3d_Vector();
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
Object.assign(h3d_pass__$Border_BorderShader.prototype, {
	__class__: h3d_pass__$Border_BorderShader
});
class h3d_pass_Border extends h3d_pass_ScreenFx {
	constructor(width,height,size) {
		if(size == null) {
			size = 1;
		}
		super(new h3d_pass__$Border_BorderShader());
		let this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		let bbuf = this1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - size / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - size / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = size / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = size / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
		let _this = this.shader.color__;
		_this.x = 1;
		_this.y = 1;
		_this.z = 1;
		_this.w = 1;
	}
	dispose() {
		super.dispose();
		this.primitive.dispose();
	}
}
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
Object.assign(h3d_pass_Border.prototype, {
	__class__: h3d_pass_Border
});
class h3d_pass__$Copy_CopyShader extends h3d_shader_ScreenShader {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
Object.assign(h3d_pass__$Copy_CopyShader.prototype, {
	__class__: h3d_pass__$Copy_CopyShader
});
class h3d_pass_Copy extends h3d_pass_ScreenFx {
	constructor() {
		super(new h3d_pass__$Copy_CopyShader());
	}
	apply(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			let old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			let h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	static run(from,to,blend,pass) {
		let engine = h3d_Engine.CURRENT;
		if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
			return;
		}
		let inst = engine.resCache.h[h3d_pass_Copy.__id__];
		if(inst == null) {
			inst = new h3d_pass_Copy();
			engine.resCache.set(h3d_pass_Copy,inst);
		}
		inst.apply(from,to,blend,pass);
	}
}
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
Object.assign(h3d_pass_Copy.prototype, {
	__class__: h3d_pass_Copy
});
class h3d_pass__$CubeCopy_CubeCopyShader extends h3d_shader_ScreenShader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.mat__ = new h3d_Matrix();
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
Object.assign(h3d_pass__$CubeCopy_CubeCopyShader.prototype, {
	__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
class h3d_pass_Default extends h3d_pass_Base {
	constructor(name) {
		if(h3d_pass_Base._hx_skip_constructor) {
			super();
			return;
		}
		h3d_pass_Base._hx_skip_constructor = true;
		super();
		h3d_pass_Base._hx_skip_constructor = false;
		this._hx_constructor(name);
	}
	_hx_constructor(name) {
		this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
		super._hx_constructor(name);
		this.manager = new h3d_pass_ShaderManager(this.getOutputs());
		this.initGlobals();
	}
	getOutputs() {
		return [hxsl_Output.Value("output.color")];
	}
	processShaders(p,shaders) {
		let p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	setupShaders(passes) {
		let lightInit = false;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			let shaders = tmp.pass.getShadersRec();
			shaders = this.processShaders(tmp,shaders);
			if(tmp.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(tmp.obj,shaders);
			}
			tmp.shader = this.manager.compileShaders(shaders,tmp.pass.batchMode);
			tmp.shaders = shaders;
			let t = tmp.shader.fragment.textures;
			if(t == null) {
				tmp.texture = 0;
			} else {
				let _this = this.manager;
				let t1;
				if(t.perObjectGlobal != null) {
					let v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					t1 = t.type._hx_index == 17 ? v.texture : v;
				} else {
					let si = shaders;
					let n = t.instance;
					while(--n > 0) si = si.next;
					let v = si.s.getParamValue(t.index);
					t1 = v;
				}
				tmp.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	drawObject(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	draw(passes,sort) {
		if(passes.current == null) {
			return;
		}
		let _g = 0;
		let _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			let g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		let buf = this.ctx.shaderBuffers;
		let prevShader = null;
		let _g2_o = passes.current;
		while(_g2_o != null) {
			let tmp = _g2_o;
			_g2_o = _g2_o.next;
			let v = tmp.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(tmp.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				let v = tmp.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v;
			}
			if(prevShader != tmp.shader) {
				prevShader = tmp.shader;
				this.ctx.engine.selectShader(tmp.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(tmp.shader);
				} else {
					let s = tmp.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,tmp.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!tmp.pass.dynamicParameters) {
				this.manager.fillParams(buf,tmp.shader,tmp.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(tmp);
		}
		let _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	initGlobals() {
		let this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		let this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		let this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		let this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		let this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		let this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		let this7 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this7;
		let this8 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this8;
		let this9 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this9;
		let this10 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this10;
		let this11 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this11;
		let this12 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this12;
		let this13 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this13;
	}
	setGlobals() {
		let v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		let v1 = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v1;
		let v2 = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v2;
		let v3 = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v3;
		let v4 = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v4;
		let v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v5;
		let v6 = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v6;
		let v7 = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v7;
		let v8 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v8;
		let v9 = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v9;
		let v10 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v10;
	}
}
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
Object.assign(h3d_pass_Default.prototype, {
	__class__: h3d_pass_Default
});
class h3d_pass_Shadows extends h3d_pass_Default {
	constructor(light) {
		if(h3d_pass_Base._hx_skip_constructor) {
			super();
			return;
		}
		h3d_pass_Base._hx_skip_constructor = true;
		super();
		h3d_pass_Base._hx_skip_constructor = false;
		this._hx_constructor(light);
	}
	_hx_constructor(light) {
		this.pcfScale = 1.0;
		this.pcfQuality = 1;
		this.bias = 0.01;
		this.power = 30.0;
		this.samplingKind = h3d_pass_ShadowSamplingKind.None;
		this.size = 1024;
		this.mode = h3d_pass_RenderMode.None;
		this.enabled = true;
		if(this.format == null) {
			this.format = hxd_PixelFormat.R16F;
		}
		if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
			this.format = h3d_mat_Texture.nativeFormat;
		}
		super._hx_constructor("shadow");
		this.light = light;
		this.blur = new h3d_pass_Blur(5);
		this.blur.set_quality(0.5);
		let _this = this.blur.shader;
		_this.constModified = true;
		_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
	}
	set_size(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	getShadowProj() {
		return this.lightCamera.m;
	}
	isUsingWorldDist() {
		return false;
	}
	getOutputs() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	createDefaultShadowMap() {
		let tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	syncShader(texture) {
	}
	filterPasses(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				let tmp;
				if(this.staticTexture != null) {
					let _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				break;
			case 3:
				let tmp1;
				if(this.staticTexture != null) {
					let _this = this.staticTexture;
					tmp1 = _this.t == null && _this.realloc == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				break;
			}
		}
		switch(this.mode._hx_index) {
		case 0:
			passes.clear();
			break;
		case 1:
			if(this.ctx.computingStatic) {
				let head = null;
				let prev = null;
				let disc = passes.discarded;
				let discQueue = passes.lastDisc;
				let cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
			} else {
				passes.clear();
			}
			break;
		case 2:
			if(this.ctx.computingStatic) {
				passes.clear();
			}
			break;
		case 3:
			let head = null;
			let prev = null;
			let disc = passes.discarded;
			let discQueue = passes.lastDisc;
			let cur = passes.current;
			while(cur != null) {
				if(cur.pass.isStatic == this.ctx.computingStatic) {
					if(head == null) {
						prev = cur;
						head = prev;
					} else {
						prev.next = cur;
						prev = cur;
					}
				} else if(disc == null) {
					discQueue = cur;
					disc = discQueue;
				} else {
					discQueue.next = cur;
					discQueue = cur;
				}
				cur = cur.next;
			}
			if(prev != null) {
				prev.next = null;
			}
			if(discQueue != null) {
				discQueue.next = null;
			}
			passes.current = head;
			passes.discarded = disc;
			passes.lastDisc = discQueue;
			break;
		}
		return true;
	}
}
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
Object.assign(h3d_pass_Shadows.prototype, {
	__class__: h3d_pass_Shadows
});
class h3d_pass_DirShadowMap extends h3d_pass_Shadows {
	constructor(light) {
		if(h3d_pass_Base._hx_skip_constructor) {
			super();
			return;
		}
		h3d_pass_Base._hx_skip_constructor = true;
		super();
		h3d_pass_Base._hx_skip_constructor = false;
		this._hx_constructor(light);
	}
	_hx_constructor(light) {
		this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
		super._hx_constructor(light);
		this.lightCamera = new h3d_Camera();
		this.lightCamera.orthoBounds = new h3d_col_Bounds();
		this.shader = this.dshader = new h3d_shader_DirShadow();
		this.border = new h3d_pass_Border(this.size,this.size);
		this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
		if(!this.customDepth) {
			this.depth = h3d_mat_DepthBuffer.getDefault();
		}
	}
	set_mode(m) {
		let _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	set_size(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return super.set_size(s);
	}
	calcShadowBounds(camera) {
		let bounds = camera.orthoBounds;
		let mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			let b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			mtmp.multiply3x4(m.getAbsPos(),camera.mcam);
			let x = b.xMin;
			let y = b.yMin;
			let z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let p_x = x;
			let p_y = y;
			let p_z = z;
			let px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			let py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			let pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			let x1 = b.xMin;
			let y1 = b.yMin;
			let z1 = b.zMax;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let p_x1 = x1;
			let p_y1 = y1;
			let p_z1 = z1;
			let px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			let py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			let pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			let x2 = b.xMin;
			let y2 = b.yMax;
			let z2 = b.zMin;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let p_x2 = x2;
			let p_y2 = y2;
			let p_z2 = z2;
			let px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			let py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			let pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			let x3 = b.xMin;
			let y3 = b.yMax;
			let z3 = b.zMax;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let p_x3 = x3;
			let p_y3 = y3;
			let p_z3 = z3;
			let px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			let py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			let pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			let x4 = b.xMax;
			let y4 = b.yMin;
			let z4 = b.zMin;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let p_x4 = x4;
			let p_y4 = y4;
			let p_z4 = z4;
			let px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			let py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			let pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			let x5 = b.xMax;
			let y5 = b.yMin;
			let z5 = b.zMax;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let p_x5 = x5;
			let p_y5 = y5;
			let p_z5 = z5;
			let px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			let py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			let pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			let x6 = b.xMax;
			let y6 = b.yMax;
			let z6 = b.zMin;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let p_x6 = x6;
			let p_y6 = y6;
			let p_z6 = z6;
			let px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			let py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			let pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			let x7 = b.xMax;
			let y7 = b.yMax;
			let z7 = b.zMax;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			let p_x7 = x7;
			let p_y7 = y7;
			let p_z7 = z7;
			let px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			let py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			let pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			let cameraBounds = new h3d_col_Bounds();
			let _g = 0;
			let _g1 = this.ctx.camera.getFrustumCorners();
			while(_g < _g1.length) {
				let pt = _g1[_g];
				++_g;
				let m = camera.mcam;
				let px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
				let py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
				let pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
				let pw = pt.x * m._14 + pt.y * m._24 + pt.z * m._34 + pt.w * m._44;
				pt.x = px;
				pt.y = py;
				pt.z = pz;
				pt.w = pw;
				let x = pt.x;
				let y = pt.y;
				let z = pt.z;
				if(x < cameraBounds.xMin) {
					cameraBounds.xMin = x;
				}
				if(x > cameraBounds.xMax) {
					cameraBounds.xMax = x;
				}
				if(y < cameraBounds.yMin) {
					cameraBounds.yMin = y;
				}
				if(y > cameraBounds.yMax) {
					cameraBounds.yMax = y;
				}
				if(z < cameraBounds.zMin) {
					cameraBounds.zMin = z;
				}
				if(z > cameraBounds.zMax) {
					cameraBounds.zMax = z;
				}
			}
			cameraBounds.zMin = bounds.zMin;
			bounds.intersection(bounds,cameraBounds);
		}
		bounds.scaleCenter(1.01);
	}
	setGlobals() {
		super.setGlobals();
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			let _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		let v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	syncShader(texture) {
		let _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		let _this1 = this.dshader;
		_this1.constModified = true;
		_this1.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		let _this2 = this.dshader;
		_this2.constModified = true;
		_this2.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		let _this3 = this.dshader;
		_this3.constModified = true;
		_this3.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		let _this4 = this.dshader.shadowRes__;
		let x = texture.width;
		let y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this4.x = x;
		_this4.y = y;
		_this4.z = 0.;
		_this4.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		let _this5 = this.dshader;
		_this5.constModified = true;
		_this5.pcfQuality__ = this.pcfQuality;
	}
	draw(passes,sort) {
		if(!this.enabled) {
			return;
		}
		let _gthis = this;
		if(!this.filterPasses(passes)) {
			return;
		}
		let f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		let prevCollider = null;
		let prevResult = true;
		let head = null;
		let prev = null;
		let disc = passes.discarded;
		let discQueue = passes.lastDisc;
		let cur = passes.current;
		while(cur != null) {
			let col = cur.obj.cullingCollider;
			let tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		let texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			let ct = this.ctx.camera.target;
			let slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			let ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				let _this = this.lightCamera.target;
				_this.x = 0;
				_this.y = 0;
				_this.z = -1;
				_this.w = 1.;
			} else {
				let _this = this.lightCamera.target;
				let x = ldir.x;
				let y = ldir.y;
				let z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
				this.lightCamera.target.normalize();
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			let _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			_this.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		super.draw(passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			let merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
}
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
Object.assign(h3d_pass_DirShadowMap.prototype, {
	__class__: h3d_pass_DirShadowMap
});
class h3d_pass_DefaultShadowMap extends h3d_pass_DirShadowMap {
	constructor(size,format) {
		h3d_pass_Base._hx_skip_constructor = true;
		super();
		h3d_pass_Base._hx_skip_constructor = false;
		this._hx_constructor(size,format);
	}
	_hx_constructor(size,format) {
		if(size == null) {
			size = 1024;
		}
		if(format != null) {
			this.format = format;
		}
		super._hx_constructor(null);
		this.set_size(size);
		this.color = new h3d_Vector();
		this.set_mode(h3d_pass_RenderMode.Dynamic);
		this.shadowMapId = hxsl_Globals.allocID("shadow.map");
		this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
		this.shadowColorId = hxsl_Globals.allocID("shadow.color");
		this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
		this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
	}
	draw(passes,sort) {
		super.draw(passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
}
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
Object.assign(h3d_pass_DefaultShadowMap.prototype, {
	__class__: h3d_pass_DefaultShadowMap
});
class h3d_pass__$HardwarePick_FixedColor extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.viewport__ = new h3d_Vector();
		this.colorID__ = new h3d_Vector();
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
Object.assign(h3d_pass__$HardwarePick_FixedColor.prototype, {
	__class__: h3d_pass__$HardwarePick_FixedColor
});
class h3d_pass_PassList {
	constructor(current) {
		this.current = current;
		this.discarded = this.lastDisc = null;
	}
	clear() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		let p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
}
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
Object.assign(h3d_pass_PassList.prototype, {
	__class__: h3d_pass_PassList
});
class h3d_pass_PassObject {
	constructor() {
		this.texture = 0;
	}
}
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
Object.assign(h3d_pass_PassObject.prototype, {
	__class__: h3d_pass_PassObject
});
class h3d_pass_ShaderManager {
	constructor(output) {
		this.shaderCache = hxsl_Cache.get();
		this.globals = new hxsl_Globals();
		this.currentOutput = new hxsl_ShaderList(null);
		this.setOutput(output);
	}
	setOutput(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	fillRec(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			let _g = type.size;
			let v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(_g) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return _g;
		case 6:
			let m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			let m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			let m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 13:
			let _g1 = type.vl;
			let tot = 0;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let vv = _g1[_g2];
				++_g2;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			let _g3 = type.size;
			let _g4 = type.t;
			switch(_g4._hx_index) {
			case 3:
				if(_g3._hx_index == 0) {
					let _g = _g3.v;
					let v1 = v;
					let count = v1.length < _g ? v1.length : _g;
					let _g1 = 0;
					let _g2 = count;
					while(_g1 < _g2) {
						let i = _g1++;
						out[pos++] = v1[i];
					}
					return _g;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g4.size == 4) {
					if(_g4.t._hx_index == 1) {
						if(_g3._hx_index == 0) {
							let _g = _g3.v;
							let v1 = v;
							let _g1 = 0;
							while(_g1 < _g) {
								let i = _g1++;
								let n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return _g * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_g3._hx_index == 0) {
						let _g = _g3.v;
						let v1 = v;
						let size = 0;
						let _g1 = 0;
						while(_g1 < _g) {
							let i = _g1++;
							let n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,_g4,out,pos);
							pos += size;
						}
						return _g * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_g3._hx_index == 0) {
					let _g = _g3.v;
					let v1 = v;
					let size = 0;
					let _g1 = 0;
					while(_g1 < _g) {
						let i = _g1++;
						let n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,_g4,out,pos);
						pos += size;
					}
					return _g * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g3._hx_index == 0) {
					let _g = _g3.v;
					let v1 = v;
					let _g1 = 0;
					while(_g1 < _g) {
						let i = _g1++;
						let m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return _g * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_g3._hx_index == 0) {
					let _g = _g3.v;
					let v1 = v;
					let size = 0;
					let _g1 = 0;
					while(_g1 < _g) {
						let i = _g1++;
						let n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,_g4,out,pos);
						pos += size;
					}
					return _g * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	shaderInfo(shaders,path) {
		let name = path.split(".").pop();
		while(shaders != null) {
			let inst = shaders.s.instance;
			let _g = 0;
			let _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	fillGlobals(buf,s) {
		let s1 = s.vertex;
		let g = s1.globals;
		let ptr = buf.vertex.globals;
		while(g != null) {
			let v = this.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					this.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			this.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		let s2 = s.fragment;
		let g1 = s2.globals;
		let ptr1 = buf.fragment.globals;
		while(g1 != null) {
			let v = this.globals.map.h[g1.gid];
			if(v == null) {
				if(g1.path == "__consts__") {
					this.fillRec(s2.consts,g1.type,ptr1,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g1.path);
			}
			this.fillRec(v,g1.type,ptr1,g1.pos);
			g1 = g1.next;
		}
	}
	fillParams(buf,s,shaders) {
		let curInstance = -1;
		let curInstanceValue = null;
		let buf1 = buf.vertex;
		let s1 = s.vertex;
		let p = s1.params;
		let ptr = buf1.params;
		while(p != null) {
			let v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					let index = p.instance;
					let i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						let si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				let index = p.instance;
				let v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				let v1 = this.globals.map.h[p.perObjectGlobal.gid];
				if(v1 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				v = p.type._hx_index == 17 ? v1.texture : v1;
			} else {
				let si = shaders;
				let n = p.instance;
				while(--n > 0) si = si.next;
				let v1 = si.s.getParamValue(p.index);
				if(v1 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				v = v1;
			}
			this.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		let tid = 0;
		let p1 = s1.textures;
		while(p1 != null) {
			let this1 = buf1.tex;
			let index = tid++;
			let opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			let val;
			if(p1.perObjectGlobal != null) {
				let v = this.globals.map.h[p1.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p1.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p1.perObjectGlobal.path));
				}
				val = p1.type._hx_index == 17 ? v.texture : v;
			} else {
				let si = shaders;
				let n = p1.instance;
				while(--n > 0) si = si.next;
				let v = si.s.getParamValue(p1.index);
				if(v == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p1.name);
				}
				val = v;
			}
			this1[index] = val;
			p1 = p1.next;
		}
		let p2 = s1.buffers;
		let bid = 0;
		while(p2 != null) {
			let opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			let b;
			if(p2.perObjectGlobal != null) {
				let v = this.globals.map.h[p2.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p2.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p2.perObjectGlobal.path));
				}
				b = p2.type._hx_index == 17 ? v.texture : v;
			} else {
				let si = shaders;
				let n = p2.instance;
				while(--n > 0) si = si.next;
				let v = si.s.getParamValue(p2.index);
				if(v == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p2.name);
				}
				b = v;
			}
			buf1.buffers[bid++] = b;
			p2 = p2.next;
		}
		let buf2 = buf.fragment;
		let s2 = s.fragment;
		let p3 = s2.params;
		let ptr1 = buf2.params;
		while(p3 != null) {
			let v;
			if(p3.perObjectGlobal == null) {
				if(p3.type == hxsl_Type.TFloat) {
					let index = p3.instance;
					let i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						let si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr1[p3.pos] = i.getParamFloatValue(p3.index);
					p3 = p3.next;
					continue;
				}
				let index = p3.instance;
				let v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p3.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p3.name);
				}
			} else if(p3.perObjectGlobal != null) {
				let v1 = this.globals.map.h[p3.perObjectGlobal.gid];
				if(v1 == null) {
					throw haxe_Exception.thrown("Missing global value " + p3.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p3.perObjectGlobal.path));
				}
				v = p3.type._hx_index == 17 ? v1.texture : v1;
			} else {
				let si = shaders;
				let n = p3.instance;
				while(--n > 0) si = si.next;
				let v1 = si.s.getParamValue(p3.index);
				if(v1 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p3.name);
				}
				v = v1;
			}
			this.fillRec(v,p3.type,ptr1,p3.pos);
			p3 = p3.next;
		}
		let tid1 = 0;
		let p4 = s2.textures;
		while(p4 != null) {
			let this1 = buf2.tex;
			let index = tid1++;
			let opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			let val;
			if(p4.perObjectGlobal != null) {
				let v = this.globals.map.h[p4.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p4.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p4.perObjectGlobal.path));
				}
				val = p4.type._hx_index == 17 ? v.texture : v;
			} else {
				let si = shaders;
				let n = p4.instance;
				while(--n > 0) si = si.next;
				let v = si.s.getParamValue(p4.index);
				if(v == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p4.name);
				}
				val = v;
			}
			this1[index] = val;
			p4 = p4.next;
		}
		let p5 = s2.buffers;
		let bid1 = 0;
		while(p5 != null) {
			let opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			let b;
			if(p5.perObjectGlobal != null) {
				let v = this.globals.map.h[p5.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p5.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p5.perObjectGlobal.path));
				}
				b = p5.type._hx_index == 17 ? v.texture : v;
			} else {
				let si = shaders;
				let n = p5.instance;
				while(--n > 0) si = si.next;
				let v = si.s.getParamValue(p5.index);
				if(v == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p5.name);
				}
				b = v;
			}
			buf2.buffers[bid1++] = b;
			p5 = p5.next;
		}
	}
	compileShaders(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		let last = null;
		let _g_l = shaders;
		while(_g_l != last) {
			let s = _g_l.s;
			_g_l = _g_l.next;
			s.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		let s = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s;
	}
}
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
Object.assign(h3d_pass_ShaderManager.prototype, {
	__class__: h3d_pass_ShaderManager
});
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : true, __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : true, __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
class h3d_pass_SortByMaterial {
	constructor() {
		this.textureCount = 1;
		this.shaderCount = 1;
		this.shaderIdMap = [];
		this.textureIdMap = [];
	}
	sort(passes) {
		let shaderStart = this.shaderCount;
		let textureStart = this.textureCount;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			if(this.shaderIdMap[tmp.shader.id] < shaderStart || this.shaderIdMap[tmp.shader.id] == null) {
				this.shaderIdMap[tmp.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[tmp.texture] < textureStart || this.textureIdMap[tmp.shader.id] == null) {
				this.textureIdMap[tmp.texture] = this.textureCount++;
			}
		}
		let list = passes.current;
		let tmp;
		if(list == null) {
			tmp = null;
		} else {
			let insize = 1;
			let nmerges;
			let psize = 0;
			let qsize = 0;
			let p;
			let q;
			let e;
			let tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					let _g = 0;
					let _g1 = insize;
					while(_g < _g1) {
						++_g;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							let tmp;
							if(!(qsize == 0 || q == null)) {
								let d = this.shaderIdMap[p.shader.id] - this.shaderIdMap[q.shader.id];
								tmp = (d != 0 ? d : this.textureIdMap[p.texture] - this.textureIdMap[q.texture]) <= 0;
							} else {
								tmp = true;
							}
							if(tmp) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
}
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
Object.assign(h3d_pass_SortByMaterial.prototype, {
	__class__: h3d_pass_SortByMaterial
});
class h3d_prim_Plane2D extends h3d_prim_Primitive {
	constructor() {
		super();
	}
	alloc(engine) {
		let this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		let v = this1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	render(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	static get() {
		let engine = h3d_Engine.CURRENT;
		let inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
		if(inst == null) {
			inst = new h3d_prim_Plane2D();
			engine.resCache.set(h3d_prim_Plane2D,inst);
		}
		return inst;
	}
}
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
Object.assign(h3d_prim_Plane2D.prototype, {
	__class__: h3d_prim_Plane2D
});
class h3d_prim_RawPrimitive extends h3d_prim_Primitive {
	constructor(inf,persist) {
		if(persist == null) {
			persist = false;
		}
		super();
		this.onContextLost = function() {
			return inf;
		};
		this.bounds = inf.bounds;
		this.alloc(null);
		if(!persist) {
			this.onContextLost = null;
		}
	}
	alloc(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		let inf = this.onContextLost();
		let flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	getBounds() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
}
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
Object.assign(h3d_prim_RawPrimitive.prototype, {
	__class__: h3d_prim_RawPrimitive
});
class h3d_scene_Object {
	constructor(parent) {
		if(h3d_scene_Object._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(parent);
	}
	_hx_constructor(parent) {
		this.flags = 0;
		this.absPos = new h3d_Matrix();
		this.absPos.identity();
		this.x = 0;
		this.flags |= 1;
		this.y = 0;
		this.flags |= 1;
		this.z = 0;
		this.flags |= 1;
		this.scaleX = 1;
		this.flags |= 1;
		this.scaleY = 1;
		this.flags |= 1;
		this.scaleZ = 1;
		this.flags |= 1;
		this.qRot = new h3d_Quat();
		let b = this.follow != null;
		if(b) {
			this.flags |= 1;
		} else {
			this.flags &= -2;
		}
		this.flags |= 2;
		this.children = [];
		if(parent != null) {
			parent.addChild(this);
		}
	}
	localToGlobal(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		let m = this.absPos;
		let px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		let py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		let pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	getInvPos() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	addChild(o) {
		this.addChildAt(o,this.children.length);
	}
	addChildAt(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		let p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			let old = (o.flags & 32) != 0;
			o.flags &= -33;
			o.parent.removeChild(o);
			if(old) {
				o.flags |= 32;
			} else {
				o.flags &= -33;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		o.flags |= 1;
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	iterVisibleMeshes(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			let m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	onParentChanged() {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	onAdd() {
		this.flags |= 32;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	onRemove() {
		this.flags &= -33;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	removeChild(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			o.flags |= 1;
		}
	}
	getScene() {
		let p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	getAbsPos() {
		this.syncPos();
		return this.absPos;
	}
	draw(ctx) {
	}
	calcAbsPos() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				let _this = this.absPos;
				let a = this.absPos;
				let b = this.parent.absPos;
				let m11 = a._11;
				let m12 = a._12;
				let m13 = a._13;
				let m21 = a._21;
				let m22 = a._22;
				let m23 = a._23;
				let a31 = a._31;
				let a32 = a._32;
				let a33 = a._33;
				let a41 = a._41;
				let a42 = a._42;
				let a43 = a._43;
				let b11 = b._11;
				let b12 = b._12;
				let b13 = b._13;
				let b21 = b._21;
				let b22 = b._22;
				let b23 = b._23;
				let b31 = b._31;
				let b32 = b._32;
				let b33 = b._33;
				let b41 = b._41;
				let b42 = b._42;
				let b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			let _this = this.absPos;
			let a = this.absPos;
			let b = this.parent.absPos;
			let m11 = a._11;
			let m12 = a._12;
			let m13 = a._13;
			let m21 = a._21;
			let m22 = a._22;
			let m23 = a._23;
			let a31 = a._31;
			let a32 = a._32;
			let a33 = a._33;
			let a41 = a._41;
			let a42 = a._42;
			let a43 = a._43;
			let b11 = b._11;
			let b12 = b._12;
			let b13 = b._13;
			let b21 = b._21;
			let b22 = b._22;
			let b23 = b._23;
			let b31 = b._31;
			let b32 = b._32;
			let b33 = b._33;
			let b41 = b._41;
			let b42 = b._42;
			let b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			let _this = this.absPos;
			let a = this.defaultTransform;
			let b = this.absPos;
			let m11 = a._11;
			let m12 = a._12;
			let m13 = a._13;
			let m21 = a._21;
			let m22 = a._22;
			let m23 = a._23;
			let a31 = a._31;
			let a32 = a._32;
			let a33 = a._33;
			let a41 = a._41;
			let a42 = a._42;
			let a43 = a._43;
			let b11 = b._11;
			let b12 = b._12;
			let b13 = b._13;
			let b21 = b._21;
			let b22 = b._22;
			let b23 = b._23;
			let b31 = b._31;
			let b32 = b._32;
			let b33 = b._33;
			let b41 = b._41;
			let b42 = b._42;
			let b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	sync(ctx) {
	}
	syncRec(ctx) {
		if(this.currentAnimation != null) {
			let old = this.parent;
			let dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		let old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		let changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		let b = this.follow != null;
		if(b) {
			this.flags |= 1;
		} else {
			this.flags &= -2;
		}
		this.lastFrame = ctx.frame;
		let p = 0;
		let len = this.children.length;
		while(p < len) {
			let c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.flags |= 1;
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
	}
	syncPos() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			let b = this.follow != null;
			if(b) {
				this.flags |= 1;
			} else {
				this.flags &= -2;
			}
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.flags |= 1;
			}
		}
	}
	emit(ctx) {
	}
	emitRec(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			let b = this.follow != null;
			if(b) {
				this.flags |= 1;
			} else {
				this.flags &= -2;
			}
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.flags |= 1;
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
	}
}
h3d_scene_Object.__name__ = "h3d.scene.Object";
Object.assign(h3d_scene_Object.prototype, {
	__class__: h3d_scene_Object
});
class h3d_scene_Mesh extends h3d_scene_Object {
	constructor(primitive,material,parent) {
		super(parent);
		this.set_primitive(primitive);
		if(material == null) {
			material = h3d_mat_MaterialSetup.current.createMaterial();
			material.set_props(material.getDefaultProps());
		}
		this.material = material;
	}
	draw(ctx) {
		this.primitive.render(ctx.engine);
	}
	emit(ctx) {
		let p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	onAdd() {
		super.onAdd();
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	onRemove() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		super.onRemove();
	}
	set_primitive(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
}
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
Object.assign(h3d_scene_Mesh.prototype, {
	__class__: h3d_scene_Mesh
});
class h3d_scene_Interactive extends h3d_scene_Object {
	constructor(shape,parent) {
		h3d_scene_Object._hx_skip_constructor = true;
		super();
		h3d_scene_Object._hx_skip_constructor = false;
		this._hx_constructor(shape,parent);
	}
	_hx_constructor(shape,parent) {
		this.hitPoint = new h3d_Vector();
		this.mouseDownButton = -1;
		this.propagateEvents = false;
		this.cancelEvents = false;
		super._hx_constructor(parent);
		this.shape = shape;
		this.set_cursor(hxd_Cursor.Button);
	}
	onAdd() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		super.onAdd();
	}
	onRemove() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		super.onRemove();
	}
	getInteractiveScene() {
		return this.scene;
	}
	handleEvent(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	set_cursor(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	onOver(e) {
	}
	onOut(e) {
	}
	onPush(e) {
	}
	onRelease(e) {
	}
	onReleaseOutside(e) {
	}
	onClick(e) {
	}
	onMove(e) {
	}
	onWheel(e) {
	}
	onFocus(e) {
	}
	onFocusLost(e) {
	}
	onKeyUp(e) {
	}
	onKeyDown(e) {
	}
	onCheck(e) {
	}
	onTextInput(e) {
	}
}
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__super__ = h3d_scene_Object;
Object.assign(h3d_scene_Interactive.prototype, {
	__class__: h3d_scene_Interactive
});
class h3d_scene_Light extends h3d_scene_Object {
	constructor(shader,parent) {
		h3d_scene_Object._hx_skip_constructor = true;
		super();
		h3d_scene_Object._hx_skip_constructor = false;
		this._hx_constructor(shader,parent);
	}
	_hx_constructor(shader,parent) {
		this.priority = 0;
		this.cullingDistance = -1;
		super._hx_constructor(parent);
		this.shader = shader;
	}
	emit(ctx) {
		ctx.emitLight(this);
	}
	getShadowDirection() {
		return null;
	}
}
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
Object.assign(h3d_scene_Light.prototype, {
	__class__: h3d_scene_Light
});
class h3d_scene_LightSystem {
	constructor() {
		if(h3d_scene_LightSystem._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.ambientLight = new h3d_Vector(1,1,1);
	}
	initGlobals(globals) {
	}
	cullLights() {
		let l = this.ctx.lights;
		let prev = null;
		let s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	initLights(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			let l = ctx.lights;
			while(l != null) {
				let dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	computeLight(obj,shaders) {
		return shaders;
	}
}
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
Object.assign(h3d_scene_LightSystem.prototype, {
	__class__: h3d_scene_LightSystem
});
class h3d_scene__$RenderContext_SharedGlobal {
	constructor(gid,value) {
		this.gid = gid;
		this.value = value;
	}
}
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
Object.assign(h3d_scene__$RenderContext_SharedGlobal.prototype, {
	__class__: h3d_scene__$RenderContext_SharedGlobal
});
class h3d_scene_RenderContext extends h3d_impl_RenderContext {
	constructor() {
		super();
		this.cachedShaderList = [];
		this.cachedPassObjects = [];
	}
	start() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	setGlobalID(gid,value) {
		let _g = 0;
		let _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			let g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	emitPass(pass,obj) {
		let o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	allocShaderList(s,next) {
		let sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	emitLight(l) {
		l.next = this.lights;
		this.lights = l;
	}
	done() {
		this.drawPass = null;
		let p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		let _g = 0;
		let _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
}
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
Object.assign(h3d_scene_RenderContext.prototype, {
	__class__: h3d_scene_RenderContext
});
class h3d_scene_PassObjects {
	constructor() {
		this.passes = new h3d_pass_PassList();
	}
}
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
Object.assign(h3d_scene_PassObjects.prototype, {
	__class__: h3d_scene_PassObjects
});
class h3d_scene_Renderer extends hxd_impl_AnyProps {
	constructor() {
		super();
		if(h3d_scene_Renderer._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.hasSetTarget = false;
		this.emptyPasses = new h3d_pass_PassList();
		this.allPasses = [];
		this.passObjects = new haxe_ds_StringMap();
		this.set_props(this.getDefaultProps());
		let _g = $bind(this,this.depthSort);
		let frontToBack = true;
		this.frontToBack = function(passes) {
			_g(frontToBack,passes);
		};
		let _g1 = $bind(this,this.depthSort);
		let frontToBack1 = false;
		this.backToFront = function(passes) {
			_g1(frontToBack1,passes);
		};
	}
	depthSort(frontToBack,passes) {
		let cam = this.ctx.camera.m;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			let z = tmp.obj.absPos._41 * cam._13 + tmp.obj.absPos._42 * cam._23 + tmp.obj.absPos._43 * cam._33 + cam._43;
			let w = tmp.obj.absPos._41 * cam._14 + tmp.obj.absPos._42 * cam._24 + tmp.obj.absPos._43 * cam._34 + cam._44;
			tmp.depth = z / w;
		}
		if(frontToBack) {
			let list = passes.current;
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							++_g;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			let list = passes.current;
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							++_g;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? -1 : 1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	resetTarget() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	has(name) {
		return this.passObjects.h[name] != null;
	}
	get(name) {
		let p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	render() {
		throw haxe_Exception.thrown("Not implemented");
	}
	computeStatic() {
		throw haxe_Exception.thrown("Not implemented");
	}
	start() {
	}
	process(passes) {
		this.hasSetTarget = false;
		let _g = 0;
		let _g1 = this.allPasses;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		let _g2 = 0;
		while(_g2 < passes.length) {
			let p = passes[_g2];
			++_g2;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		let _g3 = 0;
		while(_g3 < passes.length) {
			let p = passes[_g3];
			++_g3;
			this.passObjects.h[p.name] = null;
		}
	}
}
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
Object.assign(h3d_scene_Renderer.prototype, {
	__class__: h3d_scene_Renderer
});
class h3d_scene_Scene extends h3d_scene_Object {
	constructor(createRenderer,createLightSystem) {
		h3d_scene_Object._hx_skip_constructor = true;
		super();
		h3d_scene_Object._hx_skip_constructor = false;
		this._hx_constructor(createRenderer,createLightSystem);
	}
	_hx_constructor(createRenderer,createLightSystem) {
		if(createLightSystem == null) {
			createLightSystem = true;
		}
		if(createRenderer == null) {
			createRenderer = true;
		}
		this.checkPasses = true;
		super._hx_constructor(null);
		this.window = hxd_Window.getInstance();
		this.eventListeners = [];
		this.hitInteractives = [];
		this.interactives = [];
		this.camera = new h3d_Camera();
		let engine = h3d_Engine.CURRENT;
		if(engine != null) {
			this.camera.screenRatio = engine.width / engine.height;
		}
		this.ctx = new h3d_scene_RenderContext();
		if(createRenderer) {
			this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
		}
		if(createLightSystem) {
			this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
		}
	}
	setEvents(events) {
		this.events = events;
	}
	dispatchListeners(event) {
		let _g = 0;
		let _g1 = this.eventListeners;
		while(_g < _g1.length) {
			let l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	set_renderer(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	sortHitPointByCameraDistance(i1,i2) {
		let z1 = i1.hitPoint.w;
		let z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	dispatchEvent(event,to) {
		let i = to;
		i.handleEvent(event);
	}
	isInteractiveVisible(i) {
		let o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	handleEvent(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			let screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			let screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			let p0 = this.camera.unproject(screenX,screenY,0);
			let p1 = this.camera.unproject(screenX,screenY,1);
			let x = p0.x;
			let y = p0.y;
			let z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let p1_x = x;
			let p1_y = y;
			let p1_z = z;
			let x1 = p1.x;
			let y1 = p1.y;
			let z1 = p1.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let p2_x = x1;
			let p2_y = y1;
			let p2_z = z1;
			let r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			let saveR_px = r.px;
			let saveR_py = r.py;
			let saveR_pz = r.pz;
			let saveR_lx = r.lx;
			let saveR_ly = r.ly;
			let saveR_lz = r.lz;
			let priority = -2147483648;
			let _g = 0;
			let _g1 = this.interactives;
			while(_g < _g1.length) {
				let i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				let p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				let minv = i.getInvPos();
				let x = r.px;
				let y = r.py;
				let z = r.pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let p_x = x;
				let p_y = y;
				let p_z = z;
				let px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + minv._41;
				let py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + minv._42;
				let pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r.px = p_x;
				r.py = p_y;
				r.pz = p_z;
				let x1 = r.lx;
				let y1 = r.ly;
				let z1 = r.lz;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let l_x = x1;
				let l_y = y1;
				let l_z = z1;
				let px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				let py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				let pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r.lx = l_x;
				r.ly = l_y;
				r.lz = l_z;
				r.normalize();
				if(r.lx != r.lx) {
					r.px = saveR_px;
					r.py = saveR_py;
					r.pz = saveR_pz;
					r.lx = saveR_lx;
					r.ly = saveR_ly;
					r.lz = saveR_lz;
					continue;
				}
				let hit = i.shape.rayIntersection(r,i.bestMatch);
				if(hit < 0) {
					r.px = saveR_px;
					r.py = saveR_py;
					r.pz = saveR_pz;
					r.lx = saveR_lx;
					r.ly = saveR_ly;
					r.lz = saveR_lz;
					continue;
				}
				let x2 = r.px + hit * r.lx;
				let y2 = r.py + hit * r.ly;
				let z2 = r.pz + hit * r.lz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				let hitPoint_x = x2;
				let hitPoint_y = y2;
				let hitPoint_z = z2;
				r.px = saveR_px;
				r.py = saveR_py;
				r.pz = saveR_pz;
				r.lx = saveR_lx;
				r.ly = saveR_ly;
				r.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				let _g = 0;
				let _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					let i = _g1[_g];
					++_g;
					let m = i.invPos;
					let wfactor = 0.;
					if(i.preciseShape != null) {
						let x = r.px;
						let y = r.py;
						let z = r.pz;
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						let p_x = x;
						let p_y = y;
						let p_z = z;
						let px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
						let py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
						let pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
						p_x = px;
						p_y = py;
						p_z = pz;
						r.px = p_x;
						r.py = p_y;
						r.pz = p_z;
						let x1 = r.lx;
						let y1 = r.ly;
						let z1 = r.lz;
						if(z1 == null) {
							z1 = 0.;
						}
						if(y1 == null) {
							y1 = 0.;
						}
						if(x1 == null) {
							x1 = 0.;
						}
						let l_x = x1;
						let l_y = y1;
						let l_z = z1;
						let px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
						let py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
						let pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
						l_x = px1;
						l_y = py1;
						l_z = pz1;
						r.lx = l_x;
						r.ly = l_y;
						r.lz = l_z;
						r.normalize();
						let hit = i.preciseShape.rayIntersection(r,i.bestMatch);
						if(hit > 0) {
							let x = r.px + hit * r.lx;
							let y = r.py + hit * r.ly;
							let z = r.pz + hit * r.lz;
							if(z == null) {
								z = 0.;
							}
							if(y == null) {
								y = 0.;
							}
							if(x == null) {
								x = 0.;
							}
							let hitPoint_x = x;
							let hitPoint_y = y;
							let hitPoint_z = z;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r.px = saveR_px;
						r.py = saveR_py;
						r.pz = saveR_pz;
						r.lx = saveR_lx;
						r.ly = saveR_ly;
						r.lz = saveR_lz;
					}
					let _this = i.hitPoint;
					let x = _this.x;
					let y = _this.y;
					let z = _this.z;
					let w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let p_x = x;
					let p_y = y;
					let p_z = z;
					let p_w = w;
					p_w = 1;
					let m1 = i.absPos;
					let px = p_x * m1._11 + p_y * m1._21 + p_z * m1._31 + p_w * m1._41;
					let py = p_x * m1._12 + p_y * m1._22 + p_z * m1._32 + p_w * m1._42;
					let pz = p_x * m1._13 + p_y * m1._23 + p_z * m1._33 + p_w * m1._43;
					p_x = px;
					p_y = py;
					p_z = pz;
					let m2 = this.camera.m;
					let px1 = p_x * m2._11 + p_y * m2._21 + p_z * m2._31 + p_w * m2._41;
					let py1 = p_x * m2._12 + p_y * m2._22 + p_z * m2._32 + p_w * m2._42;
					let pz1 = p_x * m2._13 + p_y * m2._23 + p_z * m2._33 + p_w * m2._43;
					let iw = 1 / (p_x * m2._14 + p_y * m2._24 + p_z * m2._34 + p_w * m2._44);
					p_x = px1 * iw;
					p_y = py1 * iw;
					p_z = pz1 * iw;
					p_w = 1;
					i.hitPoint.w = p_z + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			let i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	addEventTarget(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	removeEventTarget(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	setElapsedTime(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	render(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		let t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		let list = this.ctx.passes;
		let tmp;
		if(list == null) {
			tmp = null;
		} else {
			let insize = 1;
			let nmerges;
			let psize = 0;
			let qsize = 0;
			let p;
			let q;
			let e;
			let tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					let _g = 0;
					let _g1 = insize;
					while(_g < _g1) {
						++_g;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		let curPass = this.ctx.passes;
		let passes = [];
		let passIndex = -1;
		while(curPass != null) {
			let passId = curPass.pass.passId;
			let p = curPass;
			let prev = null;
			while(p != null && p.pass.passId == passId) {
				prev = p;
				p = p.next;
			}
			prev.next = null;
			let pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			let _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(!this.ctx.computingStatic && this.checkPasses) {
			let _g = 0;
			while(_g < passes.length) {
				let p = passes[_g];
				++_g;
				if(!p.rendered) {
					haxe_Log.trace("Pass " + p.name + " has not been rendered : don't know how to handle.",{ fileName : "h3d/scene/Scene.hx", lineNumber : 438, className : "h3d.scene.Scene", methodName : "render"});
				}
			}
		}
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		let _g = 0;
		let _g1 = passIndex;
		while(_g < _g1) {
			let i = _g++;
			let p = this.ctx.cachedPassObjects[i];
			p.name = null;
			let _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
}
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__super__ = h3d_scene_Object;
Object.assign(h3d_scene_Scene.prototype, {
	__class__: h3d_scene_Scene
});
class h3d_scene_fwd_LightSystem extends h3d_scene_LightSystem {
	constructor() {
		h3d_scene_LightSystem._hx_skip_constructor = true;
		super();
		h3d_scene_LightSystem._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.perPixelLighting = true;
		this.maxLightsPerObject = 6;
		super._hx_constructor();
		let _this = this.ambientLight;
		_this.x = 0.5;
		_this.y = 0.5;
		_this.z = 0.5;
		_this.w = 1.;
		this.ambientShader = new h3d_shader_AmbientLight();
		this.set_additiveLighting(true);
	}
	set_additiveLighting(b) {
		let value = this.ambientShader;
		let _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	initLights(ctx) {
		super.initLights(ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			let list = ctx.lights;
			let cmp = $bind(this,this.sortLight);
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							++_g;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	initGlobals(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	sortLight(l1,l2) {
		let p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	computeLight(obj,shaders) {
		if(this.lightCount > this.maxLightsPerObject) {
			let l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					let dx = l.absPos._41 - this.ctx.camera.target.x;
					let dy = l.absPos._42 - this.ctx.camera.target.y;
					let dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					let dx = l.absPos._41 - obj.absPos._41;
					let dy = l.absPos._42 - obj.absPos._42;
					let dz = l.absPos._43 - obj.absPos._43;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				}
				l = l.next;
			}
			let list = this.ctx.lights;
			let cmp = $bind(this,this.sortLight);
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							++_g;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = this.ctx.allocShaderList(this.ambientShader,shaders);
		let l = this.ctx.lights;
		let i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = this.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
}
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
Object.assign(h3d_scene_fwd_LightSystem.prototype, {
	__class__: h3d_scene_fwd_LightSystem
});
class h3d_scene_fwd_DepthPass extends h3d_pass_Default {
	constructor() {
		h3d_pass_Base._hx_skip_constructor = true;
		super();
		h3d_pass_Base._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.enableSky = false;
		super._hx_constructor("depth");
		this.depthMapId = hxsl_Globals.allocID("depthMap");
	}
	getOutputs() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	draw(passes,sort) {
		let texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		super.draw(passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
}
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
Object.assign(h3d_scene_fwd_DepthPass.prototype, {
	__class__: h3d_scene_fwd_DepthPass
});
class h3d_scene_fwd_NormalPass extends h3d_pass_Default {
	constructor() {
		super("normal");
		this.normalMapId = hxsl_Globals.allocID("normalMap");
	}
	getOutputs() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	draw(passes,sort) {
		let texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		super.draw(passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
}
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
Object.assign(h3d_scene_fwd_NormalPass.prototype, {
	__class__: h3d_scene_fwd_NormalPass
});
class h3d_scene_fwd_Renderer extends h3d_scene_Renderer {
	constructor() {
		h3d_scene_Renderer._hx_skip_constructor = true;
		super();
		h3d_scene_Renderer._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.shadow = new h3d_pass_DefaultShadowMap(1024);
		this.normal = new h3d_scene_fwd_NormalPass();
		this.depth = new h3d_scene_fwd_DepthPass();
		super._hx_constructor();
		this.defaultPass = new h3d_pass_Default("default");
		this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
	}
	renderPass(p,passes,sort) {
		p.draw(passes,sort);
	}
	render() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
}
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
Object.assign(h3d_scene_fwd_Renderer.prototype, {
	__class__: h3d_scene_fwd_Renderer
});
class h3d_shader_AmbientLight extends hxsl_Shader {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
Object.assign(h3d_shader_AmbientLight.prototype, {
	__class__: h3d_shader_AmbientLight
});
class h3d_shader_Base2d extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.viewport__ = new h3d_Vector();
		this.halfPixelInverse__ = new h3d_Vector();
		this.uvPos__ = new h3d_Vector();
		this.filterMatrixB__ = new h3d_Vector();
		this.filterMatrixA__ = new h3d_Vector();
		this.absoluteMatrixB__ = new h3d_Vector();
		this.absoluteMatrixA__ = new h3d_Vector();
		this.color__ = new h3d_Vector();
		this.zValue__ = 0;
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
}
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
Object.assign(h3d_shader_Base2d.prototype, {
	__class__: h3d_shader_Base2d
});
class h3d_shader_BaseMesh extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.specularColor__ = new h3d_Vector();
		this.specularAmount__ = 0;
		this.specularPower__ = 0;
		this.color__ = new h3d_Vector();
		super._hx_constructor();
		let _this = this.color__;
		_this.x = 1;
		_this.y = 1;
		_this.z = 1;
		_this.w = 1.;
		let _this1 = this.specularColor__;
		_this1.x = 1;
		_this1.y = 1;
		_this1.z = 1;
		_this1.w = 1.;
		this.specularPower__ = 50;
		this.specularAmount__ = 1;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
}
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
Object.assign(h3d_shader_BaseMesh.prototype, {
	__class__: h3d_shader_BaseMesh
});
class h3d_shader_Blur extends h3d_shader_ScreenShader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.cubeDir__ = new h3d_Matrix();
		this.fixedColor__ = new h3d_Vector();
		this.pixel__ = new h3d_Vector();
		this.offsets__ = [];
		this.values__ = [];
		this.Quality__ = 0;
		this.cameraInverseViewProj__ = new h3d_Matrix();
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
Object.assign(h3d_shader_Blur.prototype, {
	__class__: h3d_shader_Blur
});
class h3d_shader_ShaderBuffers {
	constructor(s) {
		this.globals = new Float32Array(s.globalsSize << 2);
		this.params = new Float32Array(s.paramsSize << 2);
		let this1 = new Array(s.texturesCount);
		this.tex = this1;
		let tmp;
		if(s.bufferCount > 0) {
			let this1 = new Array(s.bufferCount);
			tmp = this1;
		} else {
			tmp = null;
		}
		this.buffers = tmp;
	}
	grow(s) {
		let ng = s.globalsSize << 2;
		let np = s.paramsSize << 2;
		let nt = s.texturesCount;
		let nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			let this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			let this1 = new Array(nb);
			this.buffers = this1;
		}
	}
}
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
Object.assign(h3d_shader_ShaderBuffers.prototype, {
	__class__: h3d_shader_ShaderBuffers
});
class h3d_shader_Buffers {
	constructor(s) {
		this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
		this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
	}
}
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
Object.assign(h3d_shader_Buffers.prototype, {
	__class__: h3d_shader_Buffers
});
class h3d_shader_ColorAdd extends hxsl_Shader {
	constructor(color) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(color);
	}
	_hx_constructor(color) {
		if(color == null) {
			color = 0;
		}
		this.color__ = new h3d_Vector();
		super._hx_constructor();
		let _this = this.color__;
		_this.x = (color >> 16 & 255) / 255;
		_this.y = (color >> 8 & 255) / 255;
		_this.z = (color & 255) / 255;
		_this.w = (color >>> 24) / 255;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
Object.assign(h3d_shader_ColorAdd.prototype, {
	__class__: h3d_shader_ColorAdd
});
class h3d_shader_ColorKey extends hxsl_Shader {
	constructor(v) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(v);
	}
	_hx_constructor(v) {
		if(v == null) {
			v = 0;
		}
		this.colorKey__ = new h3d_Vector();
		super._hx_constructor();
		let _this = this.colorKey__;
		_this.x = (v >> 16 & 255) / 255;
		_this.y = (v >> 8 & 255) / 255;
		_this.z = (v & 255) / 255;
		_this.w = (v >>> 24) / 255;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
Object.assign(h3d_shader_ColorKey.prototype, {
	__class__: h3d_shader_ColorKey
});
class h3d_shader_ColorMatrix extends hxsl_Shader {
	constructor(m) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(m);
	}
	_hx_constructor(m) {
		this.matrix__ = new h3d_Matrix();
		super._hx_constructor();
		if(m != null) {
			this.matrix__.loadValues(m);
		} else {
			this.matrix__.identity();
		}
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
Object.assign(h3d_shader_ColorMatrix.prototype, {
	__class__: h3d_shader_ColorMatrix
});
class h3d_shader_DirShadow extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.poissonDiskVeryHigh__ = [];
		this.poissonDiskHigh__ = [];
		this.poissonDiskLow__ = [];
		this.shadowBias__ = 0;
		this.shadowProj__ = new h3d_Matrix();
		this.shadowMapChannel__ = hxsl_Channel.Unknown;
		this.shadowRes__ = new h3d_Vector();
		this.pcfScale__ = 0;
		this.pcfQuality__ = 0;
		this.shadowPower__ = 0;
		super._hx_constructor();
		this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
		this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
		this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		let v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
}
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
Object.assign(h3d_shader_DirShadow.prototype, {
	__class__: h3d_shader_DirShadow
});
class h3d_shader_LineShader extends hxsl_Shader {
	constructor(width,lengthScale) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(width,lengthScale);
	}
	_hx_constructor(width,lengthScale) {
		if(lengthScale == null) {
			lengthScale = 1.;
		}
		if(width == null) {
			width = 1.5;
		}
		this.width__ = 0;
		this.lengthScale__ = 0;
		super._hx_constructor();
		this.width__ = width;
		this.lengthScale__ = lengthScale;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
}
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
Object.assign(h3d_shader_LineShader.prototype, {
	__class__: h3d_shader_LineShader
});
class h3d_shader_MinMaxShader extends h3d_shader_ScreenShader {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
Object.assign(h3d_shader_MinMaxShader.prototype, {
	__class__: h3d_shader_MinMaxShader
});
class h3d_shader_CubeMinMaxShader extends h3d_shader_ScreenShader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.mat__ = new h3d_Matrix();
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
}
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
Object.assign(h3d_shader_CubeMinMaxShader.prototype, {
	__class__: h3d_shader_CubeMinMaxShader
});
class h3d_shader_NormalMap extends hxsl_Shader {
	constructor(texture) {
		super();
		this.texture__ = texture;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
Object.assign(h3d_shader_NormalMap.prototype, {
	__class__: h3d_shader_NormalMap
});
class h3d_shader_Shadow extends hxsl_Shader {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
Object.assign(h3d_shader_Shadow.prototype, {
	__class__: h3d_shader_Shadow
});
class h3d_shader_SignedDistanceField extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.smoothing__ = 0.041666666666666664;
		this.alphaCutoff__ = 0.5;
		this.channel__ = 0;
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
}
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
Object.assign(h3d_shader_SignedDistanceField.prototype, {
	__class__: h3d_shader_SignedDistanceField
});
class h3d_shader_SkinBase extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.bonesMatrixes__ = [];
		this.MaxBones__ = 0;
		super._hx_constructor();
		this.constModified = true;
		this.MaxBones__ = 34;
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
Object.assign(h3d_shader_SkinBase.prototype, {
	__class__: h3d_shader_SkinBase
});
class h3d_shader_Skin extends h3d_shader_SkinBase {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
Object.assign(h3d_shader_Skin.prototype, {
	__class__: h3d_shader_Skin
});
class h3d_shader_SkinTangent extends h3d_shader_SkinBase {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
Object.assign(h3d_shader_SkinTangent.prototype, {
	__class__: h3d_shader_SkinTangent
});
class h3d_shader_SpecularTexture extends hxsl_Shader {
	constructor(tex) {
		super();
		this.texture__ = tex;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
Object.assign(h3d_shader_SpecularTexture.prototype, {
	__class__: h3d_shader_SpecularTexture
});
class h3d_shader_Texture extends hxsl_Shader {
	constructor(tex) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(tex);
	}
	_hx_constructor(tex) {
		this.killAlphaThreshold__ = 0;
		super._hx_constructor();
		this.texture__ = tex;
		this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
}
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
Object.assign(h3d_shader_Texture.prototype, {
	__class__: h3d_shader_Texture
});
class h3d_shader_UVDelta extends hxsl_Shader {
	constructor(dx,dy,sx,sy) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(dx,dy,sx,sy);
	}
	_hx_constructor(dx,dy,sx,sy) {
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.uvScale__ = new h3d_Vector();
		this.uvDelta__ = new h3d_Vector();
		super._hx_constructor();
		let _this = this.uvDelta__;
		let x = dx;
		let y = dy;
		if(dy == null) {
			y = 0.;
		}
		if(dx == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		let _this1 = this.uvScale__;
		let x1 = sx;
		let y1 = sy;
		if(sy == null) {
			y1 = 0.;
		}
		if(sx == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = 0.;
		_this1.w = 1.;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
Object.assign(h3d_shader_UVDelta.prototype, {
	__class__: h3d_shader_UVDelta
});
class h3d_shader_VertexColorAlpha extends hxsl_Shader {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
Object.assign(h3d_shader_VertexColorAlpha.prototype, {
	__class__: h3d_shader_VertexColorAlpha
});
class h3d_shader_VolumeDecal extends hxsl_Shader {
	constructor(objectWidth,objectHeight) {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor(objectWidth,objectHeight);
	}
	_hx_constructor(objectWidth,objectHeight) {
		this.isCentered__ = true;
		this.tangent__ = new h3d_Vector();
		this.normal__ = new h3d_Vector();
		this.scale__ = new h3d_Vector();
		super._hx_constructor();
		let _this = this.normal__;
		_this.x = 0;
		_this.y = 0;
		_this.z = 1;
		_this.w = 1.;
		let _this1 = this.tangent__;
		_this1.x = 1;
		_this1.y = 0;
		_this1.z = 0;
		_this1.w = 1.;
		let _this2 = this.scale__;
		let x = 1 / objectWidth;
		let y = 1 / objectHeight;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this2.x = x;
		_this2.y = y;
		_this2.z = 0.;
		_this2.w = 1.;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
Object.assign(h3d_shader_VolumeDecal.prototype, {
	__class__: h3d_shader_VolumeDecal
});
class haxe_EntryPoint {
	static processEvents() {
		while(true) {
			let f = haxe_EntryPoint.pending.shift();
			if(f == null) {
				break;
			}
			f();
		}
		let time = haxe_MainLoop.tick();
		if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
			return -1;
		}
		return time;
	}
	static run() {
		let nextTick = haxe_EntryPoint.processEvents();
		if(typeof(window) != "undefined") {
			let $window = window;
			let rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
			if(rqf != null) {
				rqf(haxe_EntryPoint.run);
			} else if(nextTick >= 0) {
				setTimeout(haxe_EntryPoint.run,nextTick * 1000);
			}
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	}
}
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = "haxe.Log";
class haxe_MainEvent {
	constructor(f,p) {
		this.isBlocking = true;
		this.f = f;
		this.priority = p;
		this.nextRun = -Infinity;
	}
}
haxe_MainEvent.__name__ = "haxe.MainEvent";
Object.assign(haxe_MainEvent.prototype, {
	__class__: haxe_MainEvent
});
class haxe_MainLoop {
	static hasEvents() {
		let p = haxe_MainLoop.pending;
		while(p != null) {
			if(p.isBlocking) {
				return true;
			}
			p = p.next;
		}
		return false;
	}
	static add(f,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(f == null) {
			throw haxe_Exception.thrown("Event function is null");
		}
		let e = new haxe_MainEvent(f,priority);
		let head = haxe_MainLoop.pending;
		if(head != null) {
			head.prev = e;
		}
		e.next = head;
		haxe_MainLoop.pending = e;
		return e;
	}
	static sortEvents() {
		let list = haxe_MainLoop.pending;
		if(list == null) {
			return;
		}
		let insize = 1;
		let nmerges;
		let psize = 0;
		let qsize = 0;
		let p;
		let q;
		let e;
		let tail;
		while(true) {
			p = list;
			list = null;
			tail = null;
			nmerges = 0;
			while(p != null) {
				++nmerges;
				q = p;
				psize = 0;
				let _g = 0;
				let _g1 = insize;
				while(_g < _g1) {
					++_g;
					++psize;
					q = q.next;
					if(q == null) {
						break;
					}
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.next;
						--qsize;
					} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
						e = p;
						p = p.next;
						--psize;
					} else {
						e = q;
						q = q.next;
						--qsize;
					}
					if(tail != null) {
						tail.next = e;
					} else {
						list = e;
					}
					e.prev = tail;
					tail = e;
				}
				p = q;
			}
			tail.next = null;
			if(nmerges <= 1) {
				break;
			}
			insize *= 2;
		}
		list.prev = null;
		haxe_MainLoop.pending = list;
	}
	static tick() {
		haxe_MainLoop.sortEvents();
		let e = haxe_MainLoop.pending;
		let now = HxOverrides.now() / 1000;
		let wait = 1e9;
		while(e != null) {
			let next = e.next;
			let wt = e.nextRun - now;
			if(wt <= 0) {
				wait = 0;
				if(e.f != null) {
					e.f();
				}
			} else if(wait > wt) {
				wait = wt;
			}
			e = next;
		}
		return wait;
	}
}
haxe_MainLoop.__name__ = "haxe.MainLoop";
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = "haxe.Timer";
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	setInt32(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
}
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
class haxe_crypto_Base64 {
	static decode(str,complement) {
		if(complement == null) {
			complement = true;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	}
}
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
class haxe_crypto_BaseCode {
	constructor(base) {
		let len = base.length;
		let nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	initTable() {
		let tbl = [];
		let _g = 0;
		while(_g < 256) {
			let i = _g++;
			tbl[i] = -1;
		}
		let _g1 = 0;
		let _g2 = this.base.length;
		while(_g1 < _g2) {
			let i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	decodeBytes(b) {
		let nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		let tbl = this.tbl;
		let size = b.length * nbits >> 3;
		let out = new haxe_io_Bytes(new ArrayBuffer(size));
		let buf = 0;
		let curbits = 0;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				let i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
}
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
});
class haxe_crypto_Md5 {
	constructor() {
	}
	bitOR(a,b) {
		let lsb = a & 1 | b & 1;
		let msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	bitXOR(a,b) {
		let lsb = a & 1 ^ b & 1;
		let msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	bitAND(a,b) {
		let lsb = a & 1 & (b & 1);
		let msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	addme(x,y) {
		let lsw = (x & 65535) + (y & 65535);
		let msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	hex(a) {
		let str = "";
		let _g = 0;
		while(_g < a.length) {
			let num = a[_g];
			++_g;
			str += "0123456789abcdef".charAt(num >> 4 & 15) + "0123456789abcdef".charAt(num & 15);
			str += "0123456789abcdef".charAt(num >> 12 & 15) + "0123456789abcdef".charAt(num >> 8 & 15);
			str += "0123456789abcdef".charAt(num >> 20 & 15) + "0123456789abcdef".charAt(num >> 16 & 15);
			str += "0123456789abcdef".charAt(num >> 28 & 15) + "0123456789abcdef".charAt(num >> 24 & 15);
		}
		return str;
	}
	rol(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	cmn(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	ff(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	gg(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	hh(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	ii(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	doEncode(x) {
		let a = 1732584193;
		let b = -271733879;
		let c = -1732584194;
		let d = 271733878;
		let i = 0;
		while(i < x.length) {
			let olda = a;
			let oldb = b;
			let oldc = c;
			let oldd = d;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	static encode(s) {
		let m = new haxe_crypto_Md5();
		let h = m.doEncode(haxe_crypto_Md5.str2blks(s));
		return m.hex(h);
	}
	static str2blks(str) {
		let str1 = haxe_io_Bytes.ofString(str);
		let nblk = (str1.length + 8 >> 6) + 1;
		let blks = [];
		let blksSize = nblk * 16;
		let _g = 0;
		while(_g < blksSize) {
			let i = _g++;
			blks[i] = 0;
		}
		let i = 0;
		let max = str1.length;
		let l = max * 8;
		while(i < max) {
			blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
			++i;
		}
		blks[i >> 2] |= 128 << (l + i) % 4 * 8;
		let k = nblk * 16 - 2;
		blks[k] = l & 255;
		blks[k] = (blks[k] |= (l >>> 8 & 255) << 8) | (l >>> 16 & 255) << 16;
		blks[k] |= (l >>> 24 & 255) << 24;
		return blks;
	}
}
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
Object.assign(haxe_crypto_Md5.prototype, {
	__class__: haxe_crypto_Md5
});
class haxe_ds_ArraySort {
	static sort(a,cmp) {
		haxe_ds_ArraySort.rec(a,cmp,0,a.length);
	}
	static rec(a,cmp,from,to) {
		let middle = from + to >> 1;
		if(to - from < 12) {
			if(to <= from) {
				return;
			}
			let _g = from + 1;
			while(_g < to) {
				let i = _g++;
				let j = i;
				while(j > from) {
					if(cmp(a[j],a[j - 1]) < 0) {
						haxe_ds_ArraySort.swap(a,j - 1,j);
					} else {
						break;
					}
					--j;
				}
			}
			return;
		}
		haxe_ds_ArraySort.rec(a,cmp,from,middle);
		haxe_ds_ArraySort.rec(a,cmp,middle,to);
		haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
	}
	static doMerge(a,cmp,from,pivot,to,len1,len2) {
		while(true) {
			let first_cut;
			let second_cut;
			let len11;
			let len22;
			if(len1 == 0 || len2 == 0) {
				return;
			}
			if(len1 + len2 == 2) {
				if(cmp(a[pivot],a[from]) < 0) {
					haxe_ds_ArraySort.swap(a,pivot,from);
				}
				return;
			}
			if(len1 > len2) {
				len11 = len1 >> 1;
				first_cut = from + len11;
				second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
				len22 = second_cut - pivot;
			} else {
				len22 = len2 >> 1;
				second_cut = pivot + len22;
				first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
				len11 = first_cut - from;
			}
			haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
			let new_mid = first_cut + len22;
			haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
			from = new_mid;
			pivot = second_cut;
			len1 -= len11;
			len2 -= len22;
		}
	}
	static rotate(a,cmp,from,mid,to) {
		if(from == mid || mid == to) {
			return;
		}
		let n = haxe_ds_ArraySort.gcd(to - from,mid - from);
		while(n-- != 0) {
			let val = a[from + n];
			let shift = mid - from;
			let p1 = from + n;
			let p2 = from + n + shift;
			while(p2 != from + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(to - p2 > shift) {
					p2 += shift;
				} else {
					p2 = from + (shift - (to - p2));
				}
			}
			a[p1] = val;
		}
	}
	static gcd(m,n) {
		while(n != 0) {
			let t = m % n;
			m = n;
			n = t;
		}
		return m;
	}
	static upper(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[val],a[mid]) < 0) {
				len = half;
			} else {
				from = mid + 1;
				len = len - half - 1;
			}
		}
		return from;
	}
	static lower(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[mid],a[val]) < 0) {
				from = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		return from;
	}
	static swap(a,i,j) {
		let tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
}
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	iterator() {
		let ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			let nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			let nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	balance(l,k,v,r) {
		let hl = l == null ? 0 : l._height;
		let hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			let _this = l.left;
			let _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			let _this = r.right;
			let _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	static iteratorLoop(node,acc) {
		while(true) {
			if(node != null) {
				haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
				acc.push(node.value);
				node = node.right;
				continue;
			}
			return;
		}
	}
}
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
Object.assign(haxe_ds_BalancedTree.prototype, {
	__class__: haxe_ds_BalancedTree
});
class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			let tmp;
			let _this = this.left;
			let _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				let _this = this.left;
				tmp = _this == null ? 0 : _this._height;
			} else {
				let _this = this.right;
				tmp = _this == null ? 0 : _this._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
}
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
Object.assign(haxe_ds_TreeNode.prototype, {
	__class__: haxe_ds_TreeNode
});
class haxe_ds_EnumValueMap extends haxe_ds_BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		let d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		let p1 = Type.enumParameters(k1);
		let p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		let ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		let _g = 0;
		let _g1 = a1.length;
		while(_g < _g1) {
			let i = _g++;
			let d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
}
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
Object.assign(haxe_ds_EnumValueMap.prototype, {
	__class__: haxe_ds_EnumValueMap
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
}
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
}
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
class haxe_io_Input {
	readByte() {
		throw haxe_Exception.thrown("Not implemented");
	}
	readBytes(s,pos,len) {
		let k = len;
		let b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	read(nbytes) {
		let s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		let p = 0;
		while(nbytes > 0) {
			let k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	readDouble() {
		let i1 = this.readInt32();
		let i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	readUInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	readInt32() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		let ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
}
haxe_io_Input.__name__ = "haxe.io.Input";
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
});
class haxe_io_BytesInput extends haxe_io_Input {
	constructor(b,pos,len) {
		super();
		if(pos == null) {
			pos = 0;
		}
		if(len == null) {
			len = b.length - pos;
		}
		if(pos < 0 || len < 0 || pos + len > b.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		this.b = b.b;
		this.pos = pos;
		this.len = len;
		this.totlen = len;
	}
	readByte() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	readBytes(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		let b1 = this.b;
		let b2 = buf.b;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
}
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
Object.assign(haxe_io_BytesInput.prototype, {
	__class__: haxe_io_BytesInput
});
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = "haxe.io.Eof";
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
class haxe_io_FPHelper {
	static i64ToDouble(low,high) {
		haxe_io_FPHelper.helper.setInt32(0,low,true);
		haxe_io_FPHelper.helper.setInt32(4,high,true);
		return haxe_io_FPHelper.helper.getFloat64(0,true);
	}
}
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
class help_Grid {
	static drawGrid(numColumns,numRows,cellHeight,cellWidth,graphics) {
		graphics.clear();
		graphics.lineStyle(1,15655141,0.2);
		let _g = 0;
		let _g1 = numColumns + 1;
		while(_g < _g1) {
			let col = _g++;
			let _g1 = 0;
			let _g2 = numRows + 1;
			while(_g1 < _g2) {
				let row = _g1++;
				let x = col * cellWidth;
				graphics.flush();
				graphics.addVertex(x,0,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x * graphics.ma + 0 * graphics.mc + graphics.mx,x * graphics.mb + 0 * graphics.md + graphics.my);
				let x1 = col * cellWidth;
				let y = cellHeight * numRows;
				graphics.addVertex(x1,y,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x1 * graphics.ma + y * graphics.mc + graphics.mx,x1 * graphics.mb + y * graphics.md + graphics.my);
				let y1 = row * cellHeight;
				graphics.flush();
				graphics.addVertex(0,y1,graphics.curR,graphics.curG,graphics.curB,graphics.curA,0 * graphics.ma + y1 * graphics.mc + graphics.mx,0 * graphics.mb + y1 * graphics.md + graphics.my);
				let x2 = cellWidth * numColumns;
				let y2 = row * cellHeight;
				graphics.addVertex(x2,y2,graphics.curR,graphics.curG,graphics.curB,graphics.curA,x2 * graphics.ma + y2 * graphics.mc + graphics.mx,x2 * graphics.mb + y2 * graphics.md + graphics.my);
			}
		}
	}
}
help_Grid.__name__ = "help.Grid";
class hxd_BitmapData {
	constructor(width,height) {
		if(!(width == -101 && height == -102)) {
			let canvas = window.document.createElement("canvas");
			canvas.width = width;
			canvas.height = height;
			this.ctx = canvas.getContext("2d",null);
		}
	}
}
hxd_BitmapData.__name__ = "hxd.BitmapData";
Object.assign(hxd_BitmapData.prototype, {
	__class__: hxd_BitmapData
});
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
class hxd_CustomCursor {
	constructor(frames,speed,offsetX,offsetY) {
		this.frames = frames;
		this.speed = speed;
		this.offsetX = offsetX;
		this.offsetY = offsetY;
		this.frameDelay = 1 / speed;
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	reset() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	update(dt) {
		let newTime = this.frameTime + dt;
		let delay = this.frameDelay;
		let index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
}
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
Object.assign(hxd_CustomCursor.prototype, {
	__class__: hxd_CustomCursor
});
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
class hxd_Event {
	constructor(k,x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.button = 0;
		this.kind = k;
		this.relX = x;
		this.relY = y;
	}
}
hxd_Event.__name__ = "hxd.Event";
Object.assign(hxd_Event.prototype, {
	__class__: hxd_Event
});
class hxd__$FloatBuffer_Float32Expand {
	static _new(length) {
		let this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
		return this1;
	}
}
class hxd_Key {
	static initialize() {
		if(hxd_Key.initDone) {
			hxd_Key.dispose();
		}
		hxd_Key.initDone = true;
		hxd_Key.keyPressed = [];
		hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
	}
	static dispose() {
		if(hxd_Key.initDone) {
			hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
			hxd_Key.initDone = false;
			hxd_Key.keyPressed = [];
		}
	}
	static onEvent(e) {
		switch(e.kind._hx_index) {
		case 0:
			if(e.button < 5) {
				hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
			}
			break;
		case 1:
			if(e.button < 5) {
				hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
			}
			break;
		case 5:
			hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
			break;
		case 8:
			if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
				return;
			}
			hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
			break;
		case 9:
			hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
			break;
		default:
		}
	}
}
hxd_Key.__name__ = "hxd.Key";
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
class hxd_Pixels {
	constructor(width,height,bytes,format,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.width = width;
		this.height = height;
		this.bytes = bytes;
		this.set_innerFormat(format);
		this.offset = offset;
		this.flags = 0;
	}
	set_innerFormat(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	invalidFormat() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	copyInner() {
		let old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.stride));
		this.bytes.blit(0,old,this.offset,this.height * this.stride);
		this.offset = 0;
		this.flags &= -2;
	}
	setFlip(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 4) != 0 == b) {
			return;
		}
		if((this.flags & 1) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 4;
		} else {
			this.flags &= -5;
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		let _g = 0;
		let _g1 = this.height >> 1;
		while(_g < _g1) {
			let y = _g++;
			let p1 = y * this.stride + this.offset;
			let p2 = (this.height - 1 - y) * this.stride + this.offset;
			let _g1 = 0;
			let _g2 = this.stride >> 2;
			while(_g1 < _g2) {
				++_g1;
				let a = this.bytes.getInt32(p1);
				let b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	convert(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1) != 0) {
			this.copyInner();
		}
		let bytes = this.bytes.b;
		let _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				let _g1 = 0;
				let _g2 = this.width * this.height;
				while(_g1 < _g2) {
					let i = _g1++;
					let p = (i << 2) + this.offset;
					let a = bytes[p];
					let r = bytes[p + 1];
					let g = bytes[p + 2];
					let b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				let _g3 = 0;
				let _g4 = this.width * this.height;
				while(_g3 < _g4) {
					let i = _g3++;
					let p = (i << 2) + this.offset;
					let a = bytes[p];
					let v = bytes[p + 1];
					bytes[p] = v;
					let v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					let v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				let _g5 = 0;
				let _g6 = this.width * this.height;
				while(_g5 < _g6) {
					let i = _g5++;
					let p = (i << 2) + this.offset;
					let a = bytes[p];
					let r = bytes[p + 1];
					let g = bytes[p + 2];
					let b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				let _g7 = 0;
				let _g8 = this.width * this.height;
				while(_g7 < _g8) {
					let i = _g7++;
					let p = (i << 2) + this.offset;
					let b = bytes[p];
					let r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				let _g9 = 0;
				let _g10 = this.width * this.height;
				while(_g9 < _g10) {
					let i = _g9++;
					let p = (i << 2) + this.offset;
					let a = bytes[p + 3];
					let v = bytes[p + 2];
					bytes[p + 3] = v;
					let v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					let v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				let _g11 = 0;
				let _g12 = this.width * this.height;
				while(_g11 < _g12) {
					let i = _g11++;
					let p = (i << 2) + this.offset;
					let b = bytes[p];
					let r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 18) {
				if(_g.v != target.v) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	dispose() {
		this.bytes = null;
	}
	static calcStride(width,format) {
		let tmp;
		switch(format._hx_index) {
		case 3:
			tmp = 8;
			break;
		case 4:
			tmp = 16;
			break;
		case 5:
			tmp = 1;
			break;
		case 6:
			tmp = 2;
			break;
		case 7:
			tmp = 4;
			break;
		case 8:
			tmp = 2;
			break;
		case 9:
			tmp = 4;
			break;
		case 10:
			tmp = 8;
			break;
		case 11:
			tmp = 3;
			break;
		case 12:
			tmp = 6;
			break;
		case 13:
			tmp = 12;
			break;
		case 0:case 1:case 2:case 14:case 15:
			tmp = 4;
			break;
		case 16:
			tmp = 4;
			break;
		case 17:
			tmp = 4;
			break;
		case 18:
			let _g = format.v;
			if(_g == 1 || _g == 4) {
				return width >> 1;
			}
			tmp = 1;
			break;
		}
		return width * tmp;
	}
	static alloc(width,height,format) {
		return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(height * hxd_Pixels.calcStride(width,format))),format);
	}
}
hxd_Pixels.__name__ = "hxd.Pixels";
Object.assign(hxd_Pixels.prototype, {
	__class__: hxd_Pixels
});
class hxd_SceneEvents {
	constructor($window) {
		this.defaultCursor = hxd_Cursor.Default;
		this.mouseCheckMove = true;
		this.enablePhysicalMouse = true;
		this.isOut = false;
		this.onOver = new hxd_Event(hxd_EventKind.EOver);
		this.onOut = new hxd_Event(hxd_EventKind.EOut);
		this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
		this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
		this.lastTouch = 0;
		this.mouseY = -1.;
		this.mouseX = -1.;
		this.overIndex = -1;
		this.scenes = [];
		this.pendingEvents = [];
		this.pushList = [];
		this.overList = [];
		this.overCandidates = [];
		if($window == null) {
			$window = hxd_Window.getInstance();
		}
		this.window = $window;
		$window.addEventTarget($bind(this,this.onEvent));
	}
	onRemove(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			let index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	addScene(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	blur() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	checkFocus() {
		if(this.currentFocus == null) {
			return;
		}
		let s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	emitEvent(event) {
		let oldX = event.relX;
		let oldY = event.relY;
		let overCandidateCount = 0;
		let handled = false;
		let checkOver = false;
		let fillOver = false;
		let checkPush = false;
		let cancelFocus = false;
		let updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		default:
		}
		let _g = 0;
		let _g1 = this.scenes;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			let last = null;
			while(true) {
				let i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						let idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								let info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					let e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				let i = 0;
				let ev = this.onOver;
				while(true) {
					let info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
					if(!(i < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			let _g = 0;
			let _g1 = this.pushList;
			while(_g < _g1.length) {
				let i = _g1[_g];
				++_g;
				if(i == null) {
					this.dispatchListeners(event);
				} else {
					let s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	checkEvents() {
		let old = this.pendingEvents;
		let checkMoved = !this.mouseCheckMove;
		let checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			let _g = 0;
			while(_g < old.length) {
				let e = old[_g];
				++_g;
				let ox = e.relX;
				let oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						let i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	updateCursor(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	selectCursor() {
		let cur = this.defaultCursor;
		let _g = 0;
		let _g1 = this.overList;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			cur.f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	onEvent(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	dispatchListeners(event) {
		let ox = event.relX;
		let oy = event.relY;
		event.propagate = true;
		let _g = 0;
		let _g1 = this.scenes;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
}
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
Object.assign(hxd_SceneEvents.prototype, {
	__class__: hxd_SceneEvents
});
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
class hxd_Timer {
	static update() {
		hxd_Timer.frameCount++;
		let newTime = HxOverrides.now() / 1000;
		hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
		hxd_Timer.lastTimeStamp = newTime;
		if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
			let a = hxd_Timer.elapsedTime;
			hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
		} else {
			hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
		}
		hxd_Timer.dt = hxd_Timer.currentDT;
	}
	static skip() {
		hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
	}
}
hxd_Timer.__name__ = "hxd.Timer";
class hxd_Window {
	constructor(canvas,globalEvents) {
		this.useScreenPixels = true;
		this.curMouseY = 0.;
		this.curMouseX = 0.;
		let _gthis = this;
		let customCanvas = canvas != null;
		this.eventTargets = new haxe_ds_List();
		this.resizeEvents = new haxe_ds_List();
		if(canvas == null) {
			canvas = window.document.getElementById("webgl");
			if(canvas == null) {
				throw haxe_Exception.thrown("Missing canvas #webgl");
			}
			if(canvas.getAttribute("globalEvents") == "1") {
				globalEvents = true;
			}
		}
		this.canvas = canvas;
		this.propagateKeyEvents = globalEvents;
		let propagate = canvas.getAttribute("propagateKeyEvents");
		if(propagate != null) {
			this.propagateKeyEvents = propagate != "0" && propagate != "false";
		}
		this.focused = globalEvents;
		this.element = globalEvents ? window : canvas;
		this.canvasPos = canvas.getBoundingClientRect();
		if(customCanvas) {
			canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
		} else {
			window.addEventListener("mousemove",$bind(this,this.onMouseMove));
		}
		this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
		this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
		this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
		this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
		this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
		this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
		this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
		this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
		this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
		let _g = $bind(this,this.onFocus);
		let b = false;
		let tmp = function() {
			_g(b);
		};
		this.element.addEventListener("blur",tmp);
		let _g1 = $bind(this,this.onFocus);
		let b1 = true;
		let tmp1 = function() {
			_g1(b1);
		};
		this.element.addEventListener("focus",tmp1);
		canvas.oncontextmenu = function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		};
		if(globalEvents) {
			canvas.addEventListener("mousedown",function(e) {
				_gthis.onMouseDown(e);
				e.stopPropagation();
				e.preventDefault();
			});
			this.element.addEventListener("contextmenu",function(e) {
				e.stopPropagation();
				e.preventDefault();
				return false;
			});
		} else {
			if(canvas.getAttribute("tabindex") == null) {
				canvas.setAttribute("tabindex","1");
			}
			canvas.style.outline = "none";
		}
		this.curW = this.get_width();
		this.curH = this.get_height();
		this.timer = new haxe_Timer(100);
		this.timer.run = $bind(this,this.checkResize);
	}
	checkResize() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		let cw = this.get_width();
		let ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	event(e) {
		let _g_head = this.eventTargets.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			val(e);
		}
	}
	addEventTarget(et) {
		this.eventTargets.add(et);
	}
	removeEventTarget(et) {
		let _g_head = this.eventTargets.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(Reflect.compareMethods(val,et)) {
				this.eventTargets.remove(val);
				break;
			}
		}
	}
	addResizeEvent(f) {
		this.resizeEvents.push(f);
	}
	removeResizeEvent(f) {
		let _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(Reflect.compareMethods(val,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	onResize(e) {
		let _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			val();
		}
	}
	getPixelRatio() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	get_width() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	get_height() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	get_mouseX() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	get_mouseY() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	onMouseDown(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		let ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		let _g = e.button;
		let tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			tmp = _g;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseUp(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		let ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		let _g = e.button;
		let tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			tmp = _g;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseMove(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	onMouseWheel(e) {
		e.preventDefault();
		let ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	onTouchStart(e) {
		e.preventDefault();
		let x;
		let y;
		let ev;
		let _g = 0;
		let _g1 = e.changedTouches;
		while(_g < _g1.length) {
			let touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onTouchMove(e) {
		e.preventDefault();
		let x;
		let y;
		let ev;
		let _g = 0;
		let _g1 = e.changedTouches;
		while(_g < _g1.length) {
			let touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onTouchEnd(e) {
		e.preventDefault();
		let x;
		let y;
		let ev;
		let _g = 0;
		let _g1 = e.changedTouches;
		while(_g < _g1.length) {
			let touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onKeyUp(e) {
		let ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	onKeyDown(e) {
		let ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	onKeyPress(e) {
		let ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	onFocus(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	set_displayMode(m) {
		let doc = window.document;
		let elt = doc.documentElement;
		let fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	static getInstance() {
		if(hxd_Window.inst == null) {
			hxd_Window.inst = new hxd_Window();
		}
		return hxd_Window.inst;
	}
}
hxd_Window.__name__ = "hxd.Window";
Object.assign(hxd_Window.prototype, {
	__class__: hxd_Window
});
class hxd_System {
	static setLoop(f) {
		if(!hxd_System.loopInit) {
			hxd_System.loopInit = true;
			hxd_System.browserLoop();
		}
		hxd_System.loopFunc = f;
	}
	static browserLoop() {
		let $window = window;
		let rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		rqf(hxd_System.browserLoop);
		if(hxd_System.loopFunc != null) {
			hxd_System.loopFunc();
		}
	}
	static start(callb) {
		callb();
	}
	static setNativeCursor(c) {
		if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
			return;
		}
		hxd_System.currentNativeCursor = c;
		hxd_System.currentCustomCursor = null;
		let canvas = hxd_Window.getInstance().canvas;
		if(canvas != null) {
			let tmp;
			switch(c._hx_index) {
			case 0:
				tmp = "default";
				break;
			case 1:
				tmp = "pointer";
				break;
			case 2:
				tmp = "move";
				break;
			case 3:
				tmp = "text";
				break;
			case 4:
				tmp = "none";
				break;
			case 5:
				let _g = c.custom;
				if(_g.alloc == null) {
					_g.alloc = [];
					let _g1 = 0;
					let _g2 = _g.frames;
					while(_g1 < _g2.length) {
						let frame = _g2[_g1];
						++_g1;
						_g.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + _g.offsetX + " " + _g.offsetY + ", default");
					}
				}
				if(_g.frames.length > 1) {
					hxd_System.currentCustomCursor = _g;
					_g.reset();
				}
				tmp = _g.alloc[_g.frameIndex];
				break;
			case 6:
				throw haxe_Exception.thrown("assert");
			}
			canvas.style.cursor = tmp;
		}
	}
	static getDefaultFrameRate() {
		return 60.;
	}
	static getValue(s) {
		switch(s._hx_index) {
		case 0:
			if(hxd_System.get_platform() != hxd_Platform.Android) {
				return hxd_System.get_platform() == hxd_Platform.IOS;
			} else {
				return true;
			}
			break;
		case 1:
			return true;
		case 2:
			if(hxd_System.get_platform() != hxd_Platform.Android) {
				return hxd_System.get_platform() == hxd_Platform.IOS;
			} else {
				return true;
			}
			break;
		}
	}
	static updateCursor() {
		if(hxd_System.currentCustomCursor != null) {
			let change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
			if(change != -1) {
				let canvas = hxd_Window.getInstance().canvas;
				if(canvas != null) {
					canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
				}
			}
		}
	}
	static get_platform() {
		let ua = $global.navigator.userAgent.toLowerCase();
		if(ua.indexOf("android") >= 0) {
			return hxd_Platform.Android;
		} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
			return hxd_Platform.IOS;
		} else {
			return hxd_Platform.PC;
		}
	}
}
hxd_System.__name__ = "hxd.System";
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__ : true, __constructs__ : ["Windowed","Borderless","Fullscreen","FullscreenResize"]
	,Windowed: {_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
class hxd_earcut_EarNode {
	constructor() {
	}
}
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
Object.assign(hxd_earcut_EarNode.prototype, {
	__class__: hxd_earcut_EarNode
});
class hxd_earcut_Earcut {
	constructor() {
	}
	triangulate_h2d_GPoint(points,holes) {
		let hasHoles = holes != null && holes.length > 0;
		let outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		let root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	eliminateHoles_triangulate_T(points,holes,root) {
		let queue = [];
		let _g = 0;
		let _g1 = holes.length;
		while(_g < _g1) {
			let i = _g++;
			let s = holes[i];
			let e = i == holes.length - 1 ? points.length : holes[i + 1];
			let node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		let _g2 = 0;
		while(_g2 < queue.length) {
			let q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	setLinkedList_eliminateHoles_T(points,start,end,clockwise) {
		let sum = 0.;
		let j = end - 1;
		let _g = start;
		while(_g < end) {
			let i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		let last = null;
		let n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		let node = n;
		let first = node;
		if(clockwise == sum > 0) {
			let _g = start;
			while(_g < end) {
				let i = _g++;
				let p = points[i];
				let n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = p.x;
				n.y = p.y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			let i = end - 1;
			while(i >= start) {
				let p = points[i];
				let n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = p.x;
				n.y = p.y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	setLinkedList_triangulate_T(points,start,end,clockwise) {
		let sum = 0.;
		let j = end - 1;
		let _g = start;
		while(_g < end) {
			let i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		let last = null;
		let n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		let node = n;
		let first = node;
		if(clockwise == sum > 0) {
			let _g = start;
			while(_g < end) {
				let i = _g++;
				let p = points[i];
				let n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = p.x;
				n.y = p.y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			let i = end - 1;
			while(i >= start) {
				let p = points[i];
				let n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = p.x;
				n.y = p.y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	triangulateNode(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			let maxX = root.x;
			this.minX = maxX;
			let maxY = root.y;
			this.minY = maxY;
			let p = root.next;
			while(p != root) {
				let x = p.x;
				let y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			let a = maxX - this.minX;
			let b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		let result = this.triangles;
		this.triangles = null;
		let n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	eliminateHole(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			let b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	findHoleBridge(hole,root) {
		let p = root;
		let hx = hole.x;
		let hy = hole.y;
		let qx = -Infinity;
		let m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				let x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		let stop = m;
		let tanMin = Infinity;
		let tan;
		p = m.next;
		while(p != stop) {
			let tmp;
			if(hx >= p.x && p.x >= m.x) {
				let ax = hy < m.y ? hx : qx;
				let bx = m.x;
				let by = m.y;
				let cx = hy < m.y ? qx : hx;
				let px = p.x;
				let py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				let f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				let tmp;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					let p1 = p.prev;
					let r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						let r = p.next;
						if((hole.y - p.y) * (r.x - hole.x) - (hole.x - p.x) * (r.y - hole.y) >= 0) {
							let q = p.prev;
							tmp = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp = false;
						}
					} else {
						let r = p.prev;
						if(!((hole.y - p.y) * (r.x - hole.x) - (hole.x - p.x) * (r.y - hole.y) < 0)) {
							let q = p.next;
							tmp = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) < 0;
						} else {
							tmp = true;
						}
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	getLeftmost(node) {
		let p = node;
		let leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	compareX(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	filterPoints(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		let p = start;
		let again;
		while(true) {
			again = false;
			let tmp;
			if(!p.steiner) {
				let p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					let p1 = p.prev;
					let r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	earcutLinked(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		let stop = ear;
		let prev;
		let next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(next == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(next),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(next);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(next);
					break;
				}
				break;
			}
		}
	}
	isEar(ear) {
		let a = ear.prev;
		let c = ear.next;
		if((ear.y - a.y) * (c.x - ear.x) - (ear.x - a.x) * (c.y - ear.y) >= 0) {
			return false;
		}
		let p = ear.next.next;
		while(p != ear.prev) {
			let tmp;
			let ax = a.x;
			let ay = a.y;
			let bx = ear.x;
			let by = ear.y;
			let cx = c.x;
			let cy = c.y;
			let px = p.x;
			let py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				let p1 = p.prev;
				let r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	isEarHashed(ear) {
		let a = ear.prev;
		let c = ear.next;
		if((ear.y - a.y) * (c.x - ear.x) - (ear.x - a.x) * (c.y - ear.y) >= 0) {
			return false;
		}
		let minTX = a.x < ear.x ? a.x < c.x ? a.x : c.x : ear.x < c.x ? ear.x : c.x;
		let minTY = a.y < ear.y ? a.y < c.y ? a.y : c.y : ear.y < c.y ? ear.y : c.y;
		let maxTX = a.x > ear.x ? a.x > c.x ? a.x : c.x : ear.x > c.x ? ear.x : c.x;
		let maxTY = a.y > ear.y ? a.y > c.y ? a.y : c.y : ear.y > c.y ? ear.y : c.y;
		let x = 32767 * (minTX - this.minX) / this.size | 0;
		let y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		let minZ = x | y << 1;
		let x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		let y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		let maxZ = x1 | y1 << 1;
		let p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			let tmp;
			let tmp1;
			if(p != ear.prev && p != ear.next) {
				let ax = a.x;
				let ay = a.y;
				let bx = ear.x;
				let by = ear.y;
				let cx = c.x;
				let cy = c.y;
				let px = p.x;
				let py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p1 = p.prev;
				let r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			let tmp;
			let tmp1;
			if(p != ear.prev && p != ear.next) {
				let ax = a.x;
				let ay = a.y;
				let bx = ear.x;
				let by = ear.y;
				let cx = c.x;
				let cy = c.y;
				let px = p.x;
				let py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p1 = p.prev;
				let r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	cureLocalIntersections(start) {
		let p = start;
		while(true) {
			let a = p.prev;
			let b = p.next.next;
			let tmp;
			let tmp1;
			let p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				let p = a.prev;
				let r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					let r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						let q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					let r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						let q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p = b.prev;
				let r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					let r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						let q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					let r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						let q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				let p1 = p.next;
				p1.next.prev = p1.prev;
				p1.prev.next = p1.next;
				if(p1.prevZ != null) {
					p1.prevZ.nextZ = p1.nextZ;
				}
				if(p1.nextZ != null) {
					p1.nextZ.prevZ = p1.prevZ;
				}
				start = b;
				p = b;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	splitEarcut(start) {
		let a = start;
		while(true) {
			let b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					let c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	splitPolygon(a,b) {
		let last = null;
		let n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = a.i;
		n.z = -1;
		n.x = a.x;
		n.y = a.y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		let a2 = n;
		let last1 = null;
		let n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = b.i;
		n1.z = -1;
		n1.x = b.x;
		n1.y = b.y;
		n1.next = null;
		n1.prev = last1;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		let b2 = n1;
		let an = a.next;
		let bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	isValidDiagonal(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			let tmp;
			let tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				let p = a.prev;
				let r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					let r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						let q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					let r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						let q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p = b.prev;
				let r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					let r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						let q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					let r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						let q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	middleInside(a,b) {
		let p = a;
		let inside = false;
		let px = (a.x + b.x) / 2;
		let py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	intersectsPolygon(a,b) {
		let p = a;
		while(true) {
			let tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				let q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	indexCurve(start) {
		let p = start;
		while(true) {
			if(p.z < 0) {
				let x = 32767 * (p.x - this.minX) / this.size | 0;
				let y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	sortLinked(list) {
		let p;
		let q;
		let e;
		let tail;
		let numMerges;
		let pSize;
		let qSize;
		let inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				let _g = 0;
				let _g1 = inSize;
				while(_g < _g1) {
					++_g;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
}
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
Object.assign(hxd_earcut_Earcut.prototype, {
	__class__: hxd_earcut_Earcut
});
class hxd_fs_NotFound {
	constructor(path) {
		this.path = path;
	}
	toString() {
		return "Resource file not found '" + this.path + "'";
	}
}
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
Object.assign(hxd_fs_NotFound.prototype, {
	__class__: hxd_fs_NotFound
});
class hxd_impl_Allocator {
	constructor() {
	}
	onContextLost() {
	}
	static get() {
		if(hxd_impl_Allocator.inst == null) {
			hxd_impl_Allocator.inst = new hxd_impl_Allocator();
		}
		return hxd_impl_Allocator.inst;
	}
}
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
Object.assign(hxd_impl_Allocator.prototype, {
	__class__: hxd_impl_Allocator
});
class hxd_res_Embed {
}
hxd_res_Embed.__name__ = "hxd.res.Embed";
class hxmath_math_Vector2Default {
	constructor(x,y) {
		this.x = x;
		this.y = y;
	}
}
hxmath_math_Vector2Default.__name__ = "hxmath.math.Vector2Default";
Object.assign(hxmath_math_Vector2Default.prototype, {
	__class__: hxmath_math_Vector2Default
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
class hxsl_Error {
	constructor(msg,pos) {
		this.msg = msg;
		this.pos = pos;
	}
	toString() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	static t(msg,pos) {
		throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
	}
}
hxsl_Error.__name__ = "hxsl.Error";
Object.assign(hxsl_Error.prototype, {
	__class__: hxsl_Error
});
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TexelLod","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelFetchLod","Trace","VertexID","InstanceID"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TexelLod: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetchLod: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TexelLod,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelFetchLod,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
class hxsl_Tools {
	static allocVarId() {
		return ++hxsl_Tools.UID;
	}
	static getName(v) {
		if(v.qualifiers == null) {
			return v.name;
		}
		let _g = 0;
		let _g1 = v.qualifiers;
		while(_g < _g1.length) {
			let q = _g1[_g];
			++_g;
			if(q._hx_index == 4) {
				return q.n;
			}
		}
		return v.name;
	}
	static getConstBits(v) {
		switch(v.type._hx_index) {
		case 1:
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 0) {
					let _g = q.max;
					if(_g != null) {
						let bits = 0;
						while(_g >= 1 << bits) ++bits;
						return bits;
					}
					return 8;
				}
			}
			break;
		case 2:
			return 1;
		case 17:
			return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
		default:
		}
		return 0;
	}
	static isConst(v) {
		if(v.type._hx_index == 17) {
			return true;
		}
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 0) {
					return true;
				}
			}
		}
		return false;
	}
	static hasQualifier(v,q) {
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q2 = _g1[_g];
				++_g;
				if(q2 == q) {
					return true;
				}
			}
		}
		return false;
	}
	static isSampler(t) {
		switch(t._hx_index) {
		case 10:case 11:case 12:
			return true;
		case 17:
			return true;
		default:
			return false;
		}
	}
	static toString(t) {
		switch(t._hx_index) {
		case 5:
			let _g = t.size;
			let prefix;
			switch(t.t._hx_index) {
			case 0:
				prefix = "I";
				break;
			case 1:
				prefix = "";
				break;
			case 2:
				prefix = "B";
				break;
			}
			return prefix + "Vec" + _g;
		case 9:
			return "Bytes" + t.size;
		case 13:
			let _g1 = t.vl;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < _g1.length) {
				let v = _g1[_g3];
				++_g3;
				_g2.push(v.name + " : " + hxsl_Tools.toString(v.type));
			}
			return "{" + _g2.join(",") + "}";
		case 15:
			let _g4 = t.size;
			let tmp = hxsl_Tools.toString(t.t) + "[";
			let tmp1;
			switch(_g4._hx_index) {
			case 0:
				tmp1 = "" + _g4.v;
				break;
			case 1:
				tmp1 = _g4.v.name;
				break;
			}
			return tmp + tmp1 + "]";
		case 16:
			let _g5 = t.size;
			let tmp2 = "buffer " + hxsl_Tools.toString(t.t) + "[";
			let tmp3;
			switch(_g5._hx_index) {
			case 0:
				tmp3 = "" + _g5.v;
				break;
			case 1:
				tmp3 = _g5.v.name;
				break;
			}
			return tmp2 + tmp3 + "]";
		default:
			return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
		}
	}
	static hasSideEffect(e) {
		while(true) {
			let _g = e.e;
			switch(_g._hx_index) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return false;
			case 3:
				e = _g.e;
				continue;
			case 4:
				let _g1 = _g.el;
				let _g2 = 0;
				while(_g2 < _g1.length) {
					let e = _g1[_g2];
					++_g2;
					if(hxsl_Tools.hasSideEffect(e)) {
						return true;
					}
				}
				return false;
			case 5:
				let _g3 = _g.e2;
				let _g4 = _g.e1;
				switch(_g.op._hx_index) {
				case 4:
					return true;
				case 20:
					return true;
				default:
					if(!hxsl_Tools.hasSideEffect(_g4)) {
						return hxsl_Tools.hasSideEffect(_g3);
					} else {
						return true;
					}
				}
				break;
			case 6:
				e = _g.e1;
				continue;
			case 7:
				return true;
			case 8:
				return true;
			case 9:
				e = _g.e;
				continue;
			case 10:
				let _g5 = _g.eelse;
				if(!(hxsl_Tools.hasSideEffect(_g.econd) || hxsl_Tools.hasSideEffect(_g.eif))) {
					if(_g5 != null) {
						return hxsl_Tools.hasSideEffect(_g5);
					} else {
						return false;
					}
				} else {
					return true;
				}
				break;
			case 11:case 14:case 15:
				return true;
			case 12:
				return true;
			case 13:
				if(!hxsl_Tools.hasSideEffect(_g.it)) {
					return hxsl_Tools.hasSideEffect(_g.loop);
				} else {
					return true;
				}
				break;
			case 16:
				if(!hxsl_Tools.hasSideEffect(_g.e)) {
					return hxsl_Tools.hasSideEffect(_g.index);
				} else {
					return true;
				}
				break;
			case 17:
				let _g6 = _g.el;
				let _g7 = 0;
				while(_g7 < _g6.length) {
					let e = _g6[_g7];
					++_g7;
					if(hxsl_Tools.hasSideEffect(e)) {
						return true;
					}
				}
				return false;
			case 18:
				let _g8 = _g.def;
				let _g9 = _g.cases;
				let _g10 = _g.e;
				let _g11 = 0;
				while(_g11 < _g9.length) {
					let c = _g9[_g11];
					++_g11;
					let _g = 0;
					let _g1 = c.values;
					while(_g < _g1.length) {
						let v = _g1[_g];
						++_g;
						if(hxsl_Tools.hasSideEffect(v)) {
							return true;
						}
					}
					if(hxsl_Tools.hasSideEffect(c.expr)) {
						return true;
					}
				}
				if(!hxsl_Tools.hasSideEffect(_g10)) {
					if(_g8 != null) {
						return hxsl_Tools.hasSideEffect(_g8);
					} else {
						return false;
					}
				} else {
					return true;
				}
				break;
			case 19:
				if(!hxsl_Tools.hasSideEffect(_g.e)) {
					return hxsl_Tools.hasSideEffect(_g.loop);
				} else {
					return true;
				}
				break;
			case 20:
				e = _g.e;
				continue;
			}
		}
	}
	static iter(e,f) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			f(_g.e);
			break;
		case 4:
			let _g1 = _g.el;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let e = _g1[_g2];
				++_g2;
				f(e);
			}
			break;
		case 5:
			f(_g.e1);
			f(_g.e2);
			break;
		case 6:
			f(_g.e1);
			break;
		case 7:
			let _g3 = _g.init;
			if(_g3 != null) {
				f(_g3);
			}
			break;
		case 8:
			let _g4 = _g.args;
			f(_g.e);
			let _g5 = 0;
			while(_g5 < _g4.length) {
				let a = _g4[_g5];
				++_g5;
				f(a);
			}
			break;
		case 9:
			f(_g.e);
			break;
		case 10:
			let _g6 = _g.eelse;
			f(_g.econd);
			f(_g.eif);
			if(_g6 != null) {
				f(_g6);
			}
			break;
		case 11:case 14:case 15:
			break;
		case 12:
			let _g7 = _g.e;
			if(_g7 != null) {
				f(_g7);
			}
			break;
		case 13:
			f(_g.it);
			f(_g.loop);
			break;
		case 16:
			f(_g.e);
			f(_g.index);
			break;
		case 17:
			let _g8 = _g.el;
			let _g9 = 0;
			while(_g9 < _g8.length) {
				let e = _g8[_g9];
				++_g9;
				f(e);
			}
			break;
		case 18:
			let _g10 = _g.def;
			let _g11 = _g.cases;
			f(_g.e);
			let _g12 = 0;
			while(_g12 < _g11.length) {
				let c = _g11[_g12];
				++_g12;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					f(v);
				}
				f(c.expr);
			}
			if(_g10 != null) {
				f(_g10);
			}
			break;
		case 19:
			f(_g.e);
			f(_g.loop);
			break;
		case 20:
			f(_g.e);
			break;
		}
	}
	static map(e,f) {
		let ed;
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			ed = e.e;
			break;
		case 1:
			ed = e.e;
			break;
		case 2:
			ed = e.e;
			break;
		case 3:
			ed = hxsl_TExprDef.TParenthesis(f(_g.e));
			break;
		case 4:
			let _g1 = _g.el;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < _g1.length) {
				let e = _g1[_g3];
				++_g3;
				_g2.push(f(e));
			}
			ed = hxsl_TExprDef.TBlock(_g2);
			break;
		case 5:
			ed = hxsl_TExprDef.TBinop(_g.op,f(_g.e1),f(_g.e2));
			break;
		case 6:
			ed = hxsl_TExprDef.TUnop(_g.op,f(_g.e1));
			break;
		case 7:
			let _g4 = _g.init;
			ed = hxsl_TExprDef.TVarDecl(_g.v,_g4 != null ? f(_g4) : null);
			break;
		case 8:
			let _g5 = _g.args;
			let ed1 = f(_g.e);
			let _g6 = [];
			let _g7 = 0;
			while(_g7 < _g5.length) {
				let a = _g5[_g7];
				++_g7;
				_g6.push(f(a));
			}
			ed = hxsl_TExprDef.TCall(ed1,_g6);
			break;
		case 9:
			ed = hxsl_TExprDef.TSwiz(f(_g.e),_g.regs);
			break;
		case 10:
			let _g8 = _g.eelse;
			ed = hxsl_TExprDef.TIf(f(_g.econd),f(_g.eif),_g8 != null ? f(_g8) : null);
			break;
		case 11:case 14:case 15:
			ed = e.e;
			break;
		case 12:
			let _g9 = _g.e;
			ed = hxsl_TExprDef.TReturn(_g9 != null ? f(_g9) : null);
			break;
		case 13:
			ed = hxsl_TExprDef.TFor(_g.v,f(_g.it),f(_g.loop));
			break;
		case 16:
			ed = hxsl_TExprDef.TArray(f(_g.e),f(_g.index));
			break;
		case 17:
			let _g10 = _g.el;
			let _g11 = [];
			let _g12 = 0;
			while(_g12 < _g10.length) {
				let e = _g10[_g12];
				++_g12;
				_g11.push(f(e));
			}
			ed = hxsl_TExprDef.TArrayDecl(_g11);
			break;
		case 18:
			let _g13 = _g.def;
			let _g14 = _g.cases;
			let ed2 = f(_g.e);
			let _g15 = [];
			let _g16 = 0;
			while(_g16 < _g14.length) {
				let c = _g14[_g16];
				++_g16;
				let _g = [];
				let _g1 = 0;
				let _g2 = c.values;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					_g.push(f(v));
				}
				_g15.push({ values : _g, expr : f(c.expr)});
			}
			ed = hxsl_TExprDef.TSwitch(ed2,_g15,_g13 == null ? null : f(_g13));
			break;
		case 19:
			ed = hxsl_TExprDef.TWhile(f(_g.e),f(_g.loop),_g.normalWhile);
			break;
		case 20:
			ed = hxsl_TExprDef.TMeta(_g.m,_g.args,f(_g.e));
			break;
		}
		return { e : ed, t : e.t, p : e.p};
	}
	static size(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:case 3:
			return 1;
		case 2:case 4:case 10:case 11:case 12:
			return 0;
		case 5:
			return t.size;
		case 6:
			return 9;
		case 7:
			return 16;
		case 8:
			return 12;
		case 9:
			return t.size;
		case 13:
			let _g = t.vl;
			let s = 0;
			let _g1 = 0;
			while(_g1 < _g.length) {
				let v = _g[_g1];
				++_g1;
				s += hxsl_Tools.size(v.type);
			}
			return s;
		case 14:
			return 0;
		case 15:
			let _g2 = t.size;
			let _g3 = t.t;
			switch(_g2._hx_index) {
			case 0:
				return hxsl_Tools.size(_g3) * _g2.v;
			case 1:
				return 0;
			}
			break;
		case 16:
			let _g4 = t.size;
			if(_g4._hx_index == 0) {
				return hxsl_Tools.size(t.t) * _g4.v;
			} else {
				return 0;
			}
			break;
		case 17:
			return t.size;
		}
	}
}
hxsl_Tools.__name__ = "hxsl.Tools";
class hxsl_Tools2 {
	static toString(g) {
		let n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
		return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
	}
}
hxsl_Tools2.__name__ = "hxsl.Tools2";
class hxsl_BatchShader extends hxsl_Shader {
	constructor() {
		hxsl_Shader._hx_skip_constructor = true;
		super();
		hxsl_Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.Batch_Count__ = 0;
		super._hx_constructor();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
}
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
Object.assign(hxsl_BatchShader.prototype, {
	__class__: hxsl_BatchShader
});
class hxsl_SearchMap {
	constructor() {
	}
}
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
Object.assign(hxsl_SearchMap.prototype, {
	__class__: hxsl_SearchMap
});
class hxsl_Cache {
	constructor() {
		this.constsToGlobal = false;
		this.linkCache = new hxsl_SearchMap();
		this.linkShaders = new haxe_ds_StringMap();
		this.batchShaders = new haxe_ds_IntMap();
		this.byID = new haxe_ds_StringMap();
	}
	getLinkShader(vars) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < vars.length) {
			let v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		let key = _g.join(",");
		let shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		let s = new hxsl_SharedShader("");
		let id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		let pos = null;
		let outVars_h = Object.create(null);
		let outputCount = 0;
		let tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		let makeVec = function(g,size,args,makeOutExpr) {
			let out = [];
			let rem = size;
			let _g = 0;
			let _g1 = args.length;
			while(_g < _g1) {
				let i = _g++;
				let e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		let makeVar = function(name,t,parent) {
			let path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			let v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				let _g = parent.type;
				if(_g._hx_index == 13) {
					_g.vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		let makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v.v)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				let _g = v.size;
				let _g1 = v.v;
				let v1 = outVars_h[_g1];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				let path = _g1.split(".");
				let parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(_g != null) {
					rem = _g;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v.v,3)]), t : tvec4, p : pos};
			case 3:
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v.v,1)]), t : tvec4, p : pos};
			case 4:
				return makeVec(hxsl_TGlobal.Vec2,2,v.a,makeOutExpr);
			case 5:
				return makeVec(hxsl_TGlobal.Vec3,3,v.a,makeOutExpr);
			case 6:
				return makeVec(hxsl_TGlobal.Vec4,4,v.a,makeOutExpr);
			case 7:
				let _g2 = v.swiz;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v.a,4),_g2), t : hxsl_Type.TVec(_g2.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		let makeOutput = function(v) {
			outputCount += 1;
			let ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		let defineFun = function(kind,vars) {
			let fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			let _g = [];
			let _g1 = 0;
			while(_g1 < vars.length) {
				let v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			let f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	link(shaders,batchMode) {
		let c = this.linkCache;
		let last = null;
		let _g_l = shaders;
		while(_g_l != last) {
			let s = _g_l.s;
			_g_l = _g_l.next;
			let i = s.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			let cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	compileRuntimeShader(shaders,batchMode) {
		let shaderDatas = [];
		let index = 0;
		let last = null;
		let _g_l = shaders;
		while(_g_l != last) {
			let s = _g_l.s;
			_g_l = _g_l.next;
			let i = s.instance;
			shaderDatas.push({ inst : i, p : s.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		let _g = 0;
		while(_g < shaderDatas.length) {
			let s = shaderDatas[_g];
			++_g;
			hxsl_Printer.check(s.inst.shader);
		}
		let linker = new hxsl_Linker(batchMode);
		let s;
		try {
			let _g = [];
			let _g1 = 0;
			while(_g1 < shaderDatas.length) {
				let s = shaderDatas[_g1];
				++_g1;
				_g.push(s.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				let e = _g1;
				let _g = [];
				let _g2 = 0;
				while(_g2 < shaderDatas.length) {
					let s = shaderDatas[_g2];
					++_g2;
					_g.push(hxsl_Printer.shaderToString(s.inst.shader));
				}
				e.msg += "\n\nin\n\n" + _g.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		let _g1 = [];
		let _g2 = 0;
		while(_g2 < shaderDatas.length) {
			let s = shaderDatas[_g2];
			++_g2;
			_g1.push(s.inst.shader);
		}
		hxsl_Printer.check(s,_g1);
		let paramVars = new haxe_ds_IntMap();
		let _g3 = 0;
		let _g4 = linker.allVars;
		while(_g3 < _g4.length) {
			let v = _g4[_g3];
			++_g3;
			if(v.v.kind == hxsl_VarKind.Param) {
				if(v.v.type._hx_index == 13) {
					continue;
				}
				let inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		let prev = s;
		let s1;
		try {
			s1 = new hxsl_Splitter().split(s);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				let e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(batchMode) {
			let _g = 0;
			let _g1 = s1.vertex.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					v.kind = hxsl_VarKind.Local;
				}
			}
		}
		hxsl_Printer.check(s1.vertex,[prev]);
		hxsl_Printer.check(s1.fragment,[prev]);
		let prev1 = s1;
		let s2 = new hxsl_Dce().dce(s1.vertex,s1.fragment);
		hxsl_Printer.check(s2.vertex,[prev1.vertex]);
		hxsl_Printer.check(s2.fragment,[prev1.fragment]);
		let r = this.buildRuntimeShader(s2.vertex,s2.fragment,paramVars);
		let _g5 = [];
		let last1 = null;
		let _g7_l = shaders;
		while(_g7_l != last1) {
			let s = _g7_l.s;
			_g7_l = _g7_l.next;
			_g5.push(new hxsl_ShaderInstanceDesc(s.shader,s.constBits));
		}
		r.spec = { instances : _g5, signature : null};
		let _g6 = 0;
		let _g7 = shaderDatas.length;
		while(_g6 < _g7) {
			let i = _g6++;
			let s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		let _g8 = [];
		let _g9 = 0;
		let _g10 = r.spec.instances;
		while(_g9 < _g10.length) {
			let i = _g10[_g9];
			++_g9;
			_g8.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		let tmp = _g8.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		let r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	buildRuntimeShader(vertex,fragment,paramVars) {
		let r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		hxsl_Printer.check(r.vertex.data,[vertex]);
		hxsl_Printer.check(r.fragment.data,[fragment]);
		return r;
	}
	initGlobals(r,s) {
		let p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		let p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	getPath(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	flattenShader(s,kind,params) {
		let flat = new hxsl_Flatten();
		let c = new hxsl_RuntimeShaderData();
		let data = flat.flatten(s,kind,this.constsToGlobal);
		let textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		let g = flat.allocData.keys();
		while(g.hasNext()) {
			let g1 = g.next();
			let alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				let _g = [];
				let _g1 = 0;
				while(_g1 < alloc.length) {
					let a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				let _g2 = 0;
				let _g3 = _g.length - 1;
				while(_g2 < _g3) {
					let i = _g2++;
					_g[i].next = _g[i + 1];
				}
				let _g4 = g1.type;
				if(_g4._hx_index == 15) {
					let _g1 = _g4.size;
					let _g2 = _g4.t;
					if(_g2._hx_index == 5) {
						if(_g2.size == 4) {
							if(_g2.t._hx_index == 1) {
								if(_g1._hx_index == 0) {
									c.globals = _g[0];
									c.globalsSize = _g1.v;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				let out = [];
				let _g5 = 0;
				while(_g5 < alloc.length) {
					let a = alloc[_g5];
					++_g5;
					if(a.v == null) {
						continue;
					}
					let p = params.h[a.v.id];
					if(p == null) {
						let ap = new hxsl_AllocParam(a.v.name,a.pos,-1,-1,a.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a.v),a.v.type);
						out.push(ap);
						continue;
					}
					out.push(new hxsl_AllocParam(a.v.name,a.pos,p.instance,p.index,a.v.type));
				}
				let _g6 = 0;
				let _g7 = out.length - 1;
				while(_g6 < _g7) {
					let i = _g6++;
					out[i].next = out[i + 1];
				}
				let _g8 = g1.type;
				if(_g8._hx_index == 15) {
					let _g = _g8.size;
					let _g1 = _g8.t;
					if(hxsl_Tools.isSampler(_g1)) {
						textures.push({ t : _g1, all : out});
						c.texturesCount += out.length;
					} else {
						switch(_g1._hx_index) {
						case 5:
							if(_g1.size == 4) {
								if(_g1.t._hx_index == 1) {
									if(_g._hx_index == 0) {
										c.params = out[0];
										c.paramsSize = _g.v;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							c.buffers = out[0];
							c.bufferCount = out.length;
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			let _g = 1;
			let _g1 = textures.length;
			while(_g < _g1) {
				let i = _g++;
				let prevAll = textures[i - 1].all;
				let prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	static get() {
		let c = hxsl_Cache.INST;
		if(c == null) {
			c = new hxsl_Cache();
			hxsl_Cache.INST = c;
		}
		return c;
	}
}
hxsl_Cache.__name__ = "hxsl.Cache";
Object.assign(hxsl_Cache.prototype, {
	__class__: hxsl_Cache
});
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
class hxsl_Clone {
	constructor() {
		this.varMap = new haxe_ds_IntMap();
	}
	tvar(v) {
		let v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	tfun(f) {
		let tmp = this.ttype(f.ret);
		let f1 = f.kind;
		let tmp1 = this.tvar(f.ref);
		let _g = [];
		let _g1 = 0;
		let _g2 = f.args;
		while(_g1 < _g2.length) {
			let a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	ttype(t) {
		switch(t._hx_index) {
		case 13:
			let _g = t.vl;
			let _g1 = [];
			let _g2 = 0;
			while(_g2 < _g.length) {
				let v = _g[_g2];
				++_g2;
				_g1.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g1);
		case 14:
			return hxsl_Type.TFun(t.variants);
		case 15:
			let _g3 = t.size;
			let tmp = this.ttype(t.t);
			let tmp1;
			switch(_g3._hx_index) {
			case 0:
				tmp1 = _g3;
				break;
			case 1:
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(_g3.v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	texpr(e) {
		let e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		let _g = e2.e;
		let tmp;
		switch(_g._hx_index) {
		case 1:
			tmp = hxsl_TExprDef.TVar(this.tvar(_g.v));
			break;
		case 7:
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(_g.v),_g.init);
			break;
		case 13:
			tmp = hxsl_TExprDef.TFor(this.tvar(_g.v),_g.it,_g.loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	shader(s) {
		let s1 = s.name;
		let _g = [];
		let _g1 = 0;
		let _g2 = s.vars;
		while(_g1 < _g2.length) {
			let v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		let _g3 = [];
		let _g4 = 0;
		let _g5 = s.funs;
		while(_g4 < _g5.length) {
			let f = _g5[_g4];
			++_g4;
			_g3.push(this.tfun(f));
		}
		return { name : s1, vars : _g, funs : _g3};
	}
	static shaderData(s) {
		return new hxsl_Clone().shader(s);
	}
}
hxsl_Clone.__name__ = "hxsl.Clone";
Object.assign(hxsl_Clone.prototype, {
	__class__: hxsl_Clone
});
class hxsl__$Dce_VarDeps {
	constructor(v) {
		this.v = v;
		this.used = false;
		this.deps = new haxe_ds_IntMap();
	}
}
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
Object.assign(hxsl__$Dce_VarDeps.prototype, {
	__class__: hxsl__$Dce_VarDeps
});
class hxsl_Dce {
	constructor() {
	}
	dce(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		let inputs = [];
		let _g = 0;
		let _g1 = vertex.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			let i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		let _g2 = 0;
		let _g3 = fragment.vars;
		while(_g2 < _g3.length) {
			let v = _g3[_g2];
			++_g2;
			let i = this.get(v);
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		let _g4 = 0;
		let _g5 = vertex.funs;
		while(_g4 < _g5.length) {
			let f = _g5[_g4];
			++_g4;
			this.check(f.expr,[],[]);
		}
		let _g6 = 0;
		let _g7 = fragment.funs;
		while(_g6 < _g7.length) {
			let f = _g7[_g6];
			++_g6;
			this.check(f.expr,[],[]);
		}
		let outExprs = [];
		while(true) {
			let v = this.used.iterator();
			while(v.hasNext()) {
				let v1 = v.next();
				if(v1.keep) {
					this.markRec(v1);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			let _g = 0;
			while(_g < inputs.length) {
				let v = inputs[_g];
				++_g;
				this.markRec(v);
			}
			outExprs = [];
			let _g1 = 0;
			let _g2 = vertex.funs;
			while(_g1 < _g2.length) {
				let f = _g2[_g1];
				++_g1;
				outExprs.push(this.mapExpr(f.expr,false));
			}
			let _g3 = 0;
			let _g4 = fragment.funs;
			while(_g3 < _g4.length) {
				let f = _g4[_g3];
				++_g3;
				outExprs.push(this.mapExpr(f.expr,false));
			}
			this.markAsKeep = false;
			let _g5 = 0;
			while(_g5 < outExprs.length) {
				let e = outExprs[_g5];
				++_g5;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		let _g8 = 0;
		let _g9 = vertex.funs;
		while(_g8 < _g9.length) {
			let f = _g9[_g8];
			++_g8;
			f.expr = outExprs.shift();
		}
		let _g10 = 0;
		let _g11 = fragment.funs;
		while(_g10 < _g11.length) {
			let f = _g11[_g10];
			++_g10;
			f.expr = outExprs.shift();
		}
		let v = this.used.iterator();
		while(v.hasNext()) {
			let v1 = v.next();
			if(v1.used) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v1.v);
			HxOverrides.remove(fragment.vars,v1.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	get(v) {
		let vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	markRec(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		let d = v.deps.iterator();
		while(d.hasNext()) {
			let d1 = d.next();
			this.markRec(d1);
		}
	}
	link(v,writeTo) {
		let vd = this.get(v);
		let _g = 0;
		while(_g < writeTo.length) {
			let w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	check(e,writeTo,isAffected) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			this.link(_g.v,writeTo);
			break;
		case 4:
			let _g1 = _g.el;
			let noWrite = [];
			let _g2 = 0;
			let _g3 = _g1.length;
			while(_g2 < _g3) {
				let i = _g2++;
				this.check(_g1[i],i < _g1.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			let _g4 = _g.e2;
			let _g5 = _g.e1;
			switch(_g.op._hx_index) {
			case 4:
				let _g6 = _g5.e;
				switch(_g6._hx_index) {
				case 1:
					let v = this.get(_g6.v);
					writeTo.push(v);
					this.check(_g4,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v) < 0) {
						isAffected.push(v);
					}
					break;
				case 9:
					let _g7 = _g6.e.e;
					if(_g7._hx_index == 1) {
						let v = this.get(_g7.v);
						writeTo.push(v);
						this.check(_g4,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v) < 0) {
							isAffected.push(v);
						}
					} else {
						let _g = $bind(this,this.check);
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					let _g8 = $bind(this,this.check);
					let writeTo1 = writeTo;
					let isAffected1 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g8(e,writeTo1,isAffected1);
					});
				}
				break;
			case 20:
				let _g9 = _g5.e;
				switch(_g9._hx_index) {
				case 1:
					let v1 = this.get(_g9.v);
					writeTo.push(v1);
					this.check(_g4,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					let _g10 = _g9.e.e;
					if(_g10._hx_index == 1) {
						let v = this.get(_g10.v);
						writeTo.push(v);
						this.check(_g4,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v) < 0) {
							isAffected.push(v);
						}
					} else {
						let _g = $bind(this,this.check);
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					let _g11 = $bind(this,this.check);
					let writeTo2 = writeTo;
					let isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g11(e,writeTo2,isAffected2);
					});
				}
				break;
			default:
				let _g12 = $bind(this,this.check);
				let writeTo3 = writeTo;
				let isAffected3 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g12(e,writeTo3,isAffected3);
				});
			}
			break;
		case 7:
			let _g13 = _g.init;
			if(_g13 != null) {
				writeTo.push(this.get(_g.v));
				this.check(_g13,writeTo,isAffected);
				writeTo.pop();
			} else {
				let _g = $bind(this,this.check);
				let writeTo1 = writeTo;
				let isAffected1 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g(e,writeTo1,isAffected1);
				});
			}
			break;
		case 8:
			let _g14 = _g.args;
			let _g15 = _g.e.e;
			if(_g15._hx_index == 2) {
				switch(_g15.g._hx_index) {
				case 63:
					if(_g14.length == 3) {
						let _g = _g14[0].e;
						if(_g._hx_index == 1) {
							let _g1 = _g.v;
							let _g2 = _g14[2].e;
							if(_g2._hx_index == 0) {
								let _g = _g2.c;
								if(_g._hx_index == 2) {
									let _g2 = _g.v;
									this.check(_g14[1],writeTo,isAffected);
									if(this.channelVars[_g2] == null) {
										this.channelVars[_g2] = _g1;
										this.link(_g1,writeTo);
									} else {
										this.link(this.channelVars[_g2],writeTo);
									}
								} else {
									let _g = $bind(this,this.check);
									let writeTo1 = writeTo;
									let isAffected1 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g(e,writeTo1,isAffected1);
									});
								}
							} else {
								let _g = $bind(this,this.check);
								let writeTo1 = writeTo;
								let isAffected1 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g(e,writeTo1,isAffected1);
								});
							}
						} else {
							let _g = $bind(this,this.check);
							let writeTo1 = writeTo;
							let isAffected1 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g(e,writeTo1,isAffected1);
							});
						}
					} else {
						let _g = $bind(this,this.check);
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g(e,writeTo1,isAffected1);
						});
					}
					break;
				case 64:
					if(_g14.length == 4) {
						let _g = _g14[2];
						let _g1 = _g14[0].e;
						if(_g1._hx_index == 1) {
							let _g2 = _g1.v;
							let _g3 = _g14[3].e;
							if(_g3._hx_index == 0) {
								let _g1 = _g3.c;
								if(_g1._hx_index == 2) {
									let _g3 = _g1.v;
									this.check(_g14[1],writeTo,isAffected);
									this.check(_g,writeTo,isAffected);
									if(this.channelVars[_g3] == null) {
										this.channelVars[_g3] = _g2;
										this.link(_g2,writeTo);
									} else {
										this.link(this.channelVars[_g3],writeTo);
									}
								} else {
									let _g = $bind(this,this.check);
									let writeTo1 = writeTo;
									let isAffected1 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g(e,writeTo1,isAffected1);
									});
								}
							} else {
								let _g = $bind(this,this.check);
								let writeTo1 = writeTo;
								let isAffected1 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g(e,writeTo1,isAffected1);
								});
							}
						} else {
							let _g = $bind(this,this.check);
							let writeTo1 = writeTo;
							let isAffected1 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g(e,writeTo1,isAffected1);
							});
						}
					} else {
						let _g = $bind(this,this.check);
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					let _g16 = $bind(this,this.check);
					let writeTo4 = writeTo;
					let isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g16(e,writeTo4,isAffected4);
					});
				}
			} else {
				let _g = $bind(this,this.check);
				let writeTo1 = writeTo;
				let isAffected1 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g(e,writeTo1,isAffected1);
				});
			}
			break;
		case 10:
			let _g17 = _g.eelse;
			let _g18 = _g.econd;
			let affect = [];
			this.check(_g.eif,writeTo,affect);
			if(_g17 != null) {
				this.check(_g17,writeTo,affect);
			}
			let len = affect.length;
			let _g19 = 0;
			while(_g19 < writeTo.length) {
				let v = writeTo[_g19];
				++_g19;
				if(affect.indexOf(v) < 0) {
					affect.push(v);
				}
			}
			this.check(_g18,affect,isAffected);
			let _g20 = 0;
			while(_g20 < len) {
				let i = _g20++;
				let v = affect[i];
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		case 13:
			let affect1 = [];
			this.check(_g.loop,writeTo,affect1);
			this.check(_g.it,affect1,isAffected);
			let _g21 = 0;
			while(_g21 < affect1.length) {
				let v = affect1[_g21];
				++_g21;
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		default:
			let _g22 = $bind(this,this.check);
			let writeTo5 = writeTo;
			let isAffected5 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g22(e,writeTo5,isAffected5);
			});
		}
	}
	checkBranches(e) {
		let _g = e.e;
		if(_g._hx_index == 10) {
			let writeTo = [null];
			this.check(_g.econd,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	mapExpr(e,isVar) {
		let _gthis = this;
		let _g = e.e;
		switch(_g._hx_index) {
		case 4:
			let _g1 = _g.el;
			let out = [];
			let count = 0;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let e = _g1[_g2];
				++_g2;
				let isVar1 = isVar && count == _g1.length - 1;
				let e1 = this.mapExpr(e,isVar1);
				if(hxsl_Tools.hasSideEffect(e1) || isVar1) {
					out.push(e1);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			let _g3 = _g.e1;
			switch(_g.op._hx_index) {
			case 4:
				let _g4 = _g3.e;
				switch(_g4._hx_index) {
				case 1:
					if(!this.get(_g4.v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					let _g5 = _g4.e.e;
					if(_g5._hx_index == 1) {
						if(!this.get(_g5.v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				let _g6 = _g3.e;
				switch(_g6._hx_index) {
				case 1:
					if(!this.get(_g6.v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					let _g7 = _g6.e.e;
					if(_g7._hx_index == 1) {
						if(!this.get(_g7.v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			if(!this.get(_g.v).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			let _g8 = _g.args;
			let _g9 = _g.e.e;
			if(_g9._hx_index == 2) {
				switch(_g9.g._hx_index) {
				case 63:
					if(_g8.length == 3) {
						let _g = _g8[2].e;
						if(_g._hx_index == 0) {
							let _g1 = _g.c;
							if(_g1._hx_index == 2) {
								let c = this.channelVars[_g1.v];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(_g8[1],true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 64:
					if(_g8.length == 4) {
						let _g = _g8[2];
						let _g1 = _g8[3].e;
						if(_g1._hx_index == 0) {
							let _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								let c = this.channelVars[_g2.v];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(_g8[1],true),this.mapExpr(_g,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					if(_g8.length == 3) {
						let _g = _g8[2].e;
						if(_g._hx_index == 0) {
							let _g1 = _g.c;
							if(_g1._hx_index == 2) {
								let c = this.channelVars[_g1.v];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(_g8[1],true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					if(_g8.length == 4) {
						let _g = _g8[2];
						let _g1 = _g8[3].e;
						if(_g1._hx_index == 0) {
							let _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								let c = this.channelVars[_g2.v];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(_g8[1],true),this.mapExpr(_g,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			let _g10 = _g.eelse;
			let e1 = this.mapExpr(_g.econd,true);
			let econd = this.mapExpr(_g.eif,isVar);
			let eelse = _g10 == null ? null : this.mapExpr(_g10,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd) && (eelse == null || !hxsl_Tools.hasSideEffect(eelse))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e1.t, p : e1.p};
			}
			return { e : hxsl_TExprDef.TIf(e1,econd,eelse), p : e1.p, t : e1.t};
		case 13:
			let it = this.mapExpr(_g.it,true);
			let loop = this.mapExpr(_g.loop,false);
			if(!hxsl_Tools.hasSideEffect(loop)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(_g.v,it,loop), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
}
hxsl_Dce.__name__ = "hxsl.Dce";
Object.assign(hxsl_Dce.prototype, {
	__class__: hxsl_Dce
});
class hxsl_Eval {
	constructor() {
		this.varMap = new haxe_ds_ObjectMap();
		this.funMap = new haxe_ds_ObjectMap();
		this.constants = new haxe_ds_IntMap();
	}
	setConstant(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	mapVar(v) {
		let v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		v2 = { id : v.type._hx_index == 17 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		let _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			let _g1 = _g.vl;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < _g1.length) {
				let v = _g1[_g3];
				++_g3;
				_g2.push(this.mapVar(v));
			}
			v2.type = hxsl_Type.TStruct(_g2);
			break;
		case 15:
			let _g4 = _g.size;
			let _g5 = _g.t;
			if(_g4._hx_index == 1) {
				let _g = _g4.v;
				let c = this.constants.h[_g.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + _g.name,null);
					} else if(c._hx_index == 0) {
						let _g1 = c.c;
						if(_g1._hx_index == 2) {
							let _g = _g1.v;
							v2.type = v2.type._hx_index == 15 ? hxsl_Type.TArray(_g5,hxsl_SizeDecl.SConst(_g)) : hxsl_Type.TBuffer(_g5,hxsl_SizeDecl.SConst(_g));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + _g.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + _g.name,null);
					}
				} else {
					let vs2 = this.mapVar(_g);
					v2.type = v2.type._hx_index == 15 ? hxsl_Type.TArray(_g5,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(_g5,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			let _g6 = _g.size;
			let _g7 = _g.t;
			if(_g6._hx_index == 1) {
				let _g = _g6.v;
				let c = this.constants.h[_g.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + _g.name,null);
					} else if(c._hx_index == 0) {
						let _g1 = c.c;
						if(_g1._hx_index == 2) {
							let _g = _g1.v;
							v2.type = v2.type._hx_index == 15 ? hxsl_Type.TArray(_g7,hxsl_SizeDecl.SConst(_g)) : hxsl_Type.TBuffer(_g7,hxsl_SizeDecl.SConst(_g));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + _g.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + _g.name,null);
					}
				} else {
					let vs2 = this.mapVar(_g);
					v2.type = v2.type._hx_index == 15 ? hxsl_Type.TArray(_g7,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(_g7,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		default:
		}
		return v2;
	}
	eval(s) {
		let funs = [];
		let _g = 0;
		let _g1 = s.funs;
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			let f1 = f.kind;
			let f2 = this.mapVar(f.ref);
			let _g2 = [];
			let _g3 = 0;
			let _g4 = f.args;
			while(_g3 < _g4.length) {
				let a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			let f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		let _g2 = 0;
		let _g3 = funs.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		let s1 = s.name;
		let _g4 = [];
		let _g5 = 0;
		let _g6 = s.vars;
		while(_g5 < _g6.length) {
			let v = _g6[_g5];
			++_g5;
			_g4.push(this.mapVar(v));
		}
		return { name : s1, vars : _g4, funs : funs};
	}
	hasReturn(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	hasReturnLoop(e) {
		if(e.e._hx_index == 12) {
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	handleReturn(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		let _g = e.e;
		switch(_g._hx_index) {
		case 3:
			let v = this.handleReturn(_g.e,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v), t : v.t, p : e.p};
		case 4:
			let _g1 = _g.el;
			let i = 0;
			let last = _g1.length;
			let out = [];
			_hx_loop1: while(i < last) {
				let e = _g1[i++];
				if(i == last) {
					out.push(this.handleReturn(e,isFinal));
				} else {
					let _g = e.e;
					switch(_g._hx_index) {
					case 10:
						let _g2 = _g.eif;
						if(_g.eelse == null) {
							if(isFinal && this.hasReturn(_g2)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(_g.econd,_g2,{ e : hxsl_TExprDef.TBlock(_g1.slice(i)), t : e.t, p : e.p}), t : e.t, p : e.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e));
							}
						} else {
							out.push(this.handleReturn(e));
						}
						break;
					case 12:
						out.push(this.handleReturn(_g.e,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e));
					}
				}
			}
			let t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			let _g2 = _g.eelse;
			if(_g2 != null && isFinal) {
				let cond = this.handleReturn(_g.econd);
				let eif = this.handleReturn(_g.eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond,eif,this.handleReturn(_g2,isFinal)), t : eif.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			let _g3 = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(_g3 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(_g3,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	handleReturnDef(e) {
		return this.handleReturn(e);
	}
	evalCall(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				let _g = args[0].e;
				if(_g._hx_index == 0) {
					let _g1 = _g.c;
					if(_g1._hx_index == 2) {
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(_g1.v));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			let i;
			let _g = args[0].e;
			if(_g._hx_index == 0) {
				let _g1 = _g.c;
				if(_g1._hx_index == 2) {
					i = _g1.v;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			let channel = oldArgs[0];
			let _g1 = channel.e;
			let channel1;
			if(_g1._hx_index == 1) {
				channel1 = hxsl_TExprDef.TVar(this.mapVar(_g1.v));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			let count;
			let _g2 = channel.t;
			if(_g2._hx_index == 17) {
				count = _g2.size;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			let channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			let targs = [channel];
			let _g3 = 1;
			let _g4 = args.length;
			while(_g3 < _g4) {
				let i = _g3++;
				targs.push(args[i]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			let tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				let zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				let tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			let _g5 = 0;
			while(_g5 < args.length) {
				let a = args[_g5];
				++_g5;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	constantsToString() {
		let _g = [];
		let c = this.constants.keys();
		while(c.hasNext()) {
			let c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	evalExpr(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		let _gthis = this;
		let d;
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			d = e.e;
			break;
		case 1:
			let _g1 = _g.v;
			let c = this.constants.h[_g1.id];
			if(c != null) {
				d = c;
			} else {
				let v2 = this.mapVar(_g1);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			d = e.e;
			break;
		case 3:
			let e1 = this.evalExpr(_g.e,isVal);
			d = e1.e._hx_index == 0 ? e1.e : hxsl_TExprDef.TParenthesis(e1);
			break;
		case 4:
			let _g2 = _g.el;
			let out = [];
			let last = _g2.length - 1;
			let _g3 = 0;
			let _g4 = _g2.length;
			while(_g3 < _g4) {
				let i = _g3++;
				let isVal1 = isVal && i == last;
				let e = this.evalExpr(_g2[i],isVal1);
				switch(e.e._hx_index) {
				case 0:
					if(isVal1) {
						out.push(e);
					}
					break;
				case 1:
					if(isVal1) {
						out.push(e);
					}
					break;
				default:
					out.push(e);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			let _g5 = _g.op;
			let e11 = this.evalExpr(_g.e1);
			let e2 = this.evalExpr(_g.e2);
			switch(_g5._hx_index) {
			case 0:
				let _g6 = e2.e;
				let _g7 = e11.e;
				if(_g7._hx_index == 0) {
					let _g = _g7.c;
					switch(_g._hx_index) {
					case 2:
						if(_g6._hx_index == 0) {
							let _g1 = _g6.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v + _g1.v | 0)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						if(_g6._hx_index == 0) {
							let _g1 = _g6.c;
							d = _g1._hx_index == 3 ? hxsl_TExprDef.TConst(hxsl_Const.CFloat(_g.v + _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 1:
				let _g8 = e2.e;
				let _g9 = e11.e;
				if(_g9._hx_index == 0) {
					let _g = _g9.c;
					switch(_g._hx_index) {
					case 2:
						if(_g8._hx_index == 0) {
							let _g1 = _g8.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v * _g1.v | 0)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						if(_g8._hx_index == 0) {
							let _g1 = _g8.c;
							d = _g1._hx_index == 3 ? hxsl_TExprDef.TConst(hxsl_Const.CFloat(_g.v * _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 2:
				let _g10 = e2.e;
				let _g11 = e11.e;
				if(_g11._hx_index == 0) {
					let _g = _g11.c;
					switch(_g._hx_index) {
					case 2:
						if(_g10._hx_index == 0) {
							let _g1 = _g10.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v / _g1.v | 0)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						if(_g10._hx_index == 0) {
							let _g1 = _g10.c;
							d = _g1._hx_index == 3 ? hxsl_TExprDef.TConst(hxsl_Const.CFloat(_g.v / _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 3:
				let _g12 = e2.e;
				let _g13 = e11.e;
				if(_g13._hx_index == 0) {
					let _g = _g13.c;
					switch(_g._hx_index) {
					case 2:
						if(_g12._hx_index == 0) {
							let _g1 = _g12.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v - _g1.v | 0)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						if(_g12._hx_index == 0) {
							let _g1 = _g12.c;
							d = _g1._hx_index == 3 ? hxsl_TExprDef.TConst(hxsl_Const.CFloat(_g.v - _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				break;
			case 5:
				let _g14 = e2.e;
				let _g15 = e11.e;
				if(_g15._hx_index == 0) {
					let _g = _g15.c;
					switch(_g._hx_index) {
					case 0:
						d = _g14._hx_index == 0 ? _g14.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g14._hx_index == 0) {
							let _g = _g14.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g1 == _g.b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g14._hx_index == 0) {
							let _g = _g14.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(_g2 - _g.v == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g14._hx_index == 0) {
							let _g = _g14.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g3 > _g1 ? 1 : _g3 == _g1 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g14._hx_index == 0) {
							let _g = _g14.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g4 > _g1 ? 1 : _g4 == _g1 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 6:
				let _g16 = e2.e;
				let _g17 = e11.e;
				if(_g17._hx_index == 0) {
					let _g = _g17.c;
					switch(_g._hx_index) {
					case 0:
						d = _g16._hx_index == 0 ? _g16.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g16._hx_index == 0) {
							let _g = _g16.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g1 == _g.b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g16._hx_index == 0) {
							let _g = _g16.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(_g2 - _g.v != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g16._hx_index == 0) {
							let _g = _g16.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g3 > _g1 ? 1 : _g3 == _g1 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g16._hx_index == 0) {
							let _g = _g16.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g4 > _g1 ? 1 : _g4 == _g1 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 7:
				let _g18 = e2.e;
				let _g19 = e11.e;
				if(_g19._hx_index == 0) {
					let _g = _g19.c;
					switch(_g._hx_index) {
					case 0:
						d = _g18._hx_index == 0 ? _g18.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g18._hx_index == 0) {
							let _g = _g18.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g1 == _g.b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g18._hx_index == 0) {
							let _g = _g18.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(_g2 - _g.v > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g18._hx_index == 0) {
							let _g = _g18.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g3 > _g1 ? 1 : _g3 == _g1 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g18._hx_index == 0) {
							let _g = _g18.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g4 > _g1 ? 1 : _g4 == _g1 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 8:
				let _g20 = e2.e;
				let _g21 = e11.e;
				if(_g21._hx_index == 0) {
					let _g = _g21.c;
					switch(_g._hx_index) {
					case 0:
						d = _g20._hx_index == 0 ? _g20.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g20._hx_index == 0) {
							let _g = _g20.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g1 == _g.b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g20._hx_index == 0) {
							let _g = _g20.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(_g2 - _g.v >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g20._hx_index == 0) {
							let _g = _g20.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g3 > _g1 ? 1 : _g3 == _g1 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g20._hx_index == 0) {
							let _g = _g20.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g4 > _g1 ? 1 : _g4 == _g1 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 9:
				let _g22 = e2.e;
				let _g23 = e11.e;
				if(_g23._hx_index == 0) {
					let _g = _g23.c;
					switch(_g._hx_index) {
					case 0:
						d = _g22._hx_index == 0 ? _g22.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g22._hx_index == 0) {
							let _g = _g22.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g1 == _g.b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g22._hx_index == 0) {
							let _g = _g22.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(_g2 - _g.v < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g22._hx_index == 0) {
							let _g = _g22.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g3 > _g1 ? 1 : _g3 == _g1 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g22._hx_index == 0) {
							let _g = _g22.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g4 > _g1 ? 1 : _g4 == _g1 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 10:
				let _g24 = e2.e;
				let _g25 = e11.e;
				if(_g25._hx_index == 0) {
					let _g = _g25.c;
					switch(_g._hx_index) {
					case 0:
						d = _g24._hx_index == 0 ? _g24.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g24._hx_index == 0) {
							let _g = _g24.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g1 == _g.b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g24._hx_index == 0) {
							let _g = _g24.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(_g2 - _g.v <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g24._hx_index == 0) {
							let _g = _g24.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g3 > _g1 ? 1 : _g3 == _g1 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g24._hx_index == 0) {
							let _g = _g24.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								let _g1 = _g.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((_g4 > _g1 ? 1 : _g4 == _g1 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(_g5,e11,e2);
							}
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 11:
				let _g26 = e2.e;
				let _g27 = e11.e;
				if(_g27._hx_index == 0) {
					let _g = _g27.c;
					if(_g._hx_index == 2) {
						if(_g26._hx_index == 0) {
							let _g1 = _g26.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v & _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 12:
				let _g28 = e2.e;
				let _g29 = e11.e;
				if(_g29._hx_index == 0) {
					let _g = _g29.c;
					if(_g._hx_index == 2) {
						if(_g28._hx_index == 0) {
							let _g1 = _g28.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v | _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 13:
				let _g30 = e2.e;
				let _g31 = e11.e;
				if(_g31._hx_index == 0) {
					let _g = _g31.c;
					if(_g._hx_index == 2) {
						if(_g30._hx_index == 0) {
							let _g1 = _g30.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v ^ _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 14:
				let _g32 = e2.e;
				let _g33 = e11.e;
				if(_g33._hx_index == 0) {
					let _g = _g33.c;
					if(_g._hx_index == 1) {
						let _g1 = _g.b;
						if(_g32._hx_index == 0) {
							let _g = _g32.c;
							d = _g._hx_index == 1 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1 && _g.b)) : _g1 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e2.e;
						} else {
							d = _g1 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e2.e;
						}
					} else if(_g32._hx_index == 0) {
						let _g = _g32.c;
						if(_g._hx_index == 1) {
							let _g1 = _g.b;
							d = _g1 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else if(_g32._hx_index == 0) {
					let _g = _g32.c;
					if(_g._hx_index == 1) {
						let _g1 = _g.b;
						d = _g1 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 15:
				let _g34 = e2.e;
				let _g35 = e11.e;
				if(_g35._hx_index == 0) {
					let _g = _g35.c;
					if(_g._hx_index == 1) {
						let _g1 = _g.b;
						if(_g34._hx_index == 0) {
							let _g = _g34.c;
							d = _g._hx_index == 1 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1 || _g.b)) : _g1 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e2.e;
						} else {
							d = _g1 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e2.e;
						}
					} else if(_g34._hx_index == 0) {
						let _g = _g34.c;
						if(_g._hx_index == 1) {
							let _g1 = _g.b;
							d = _g1 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else if(_g34._hx_index == 0) {
					let _g = _g34.c;
					if(_g._hx_index == 1) {
						let _g1 = _g.b;
						d = _g1 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(_g1)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 16:
				let _g36 = e2.e;
				let _g37 = e11.e;
				if(_g37._hx_index == 0) {
					let _g = _g37.c;
					if(_g._hx_index == 2) {
						if(_g36._hx_index == 0) {
							let _g1 = _g36.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v << _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 17:
				let _g38 = e2.e;
				let _g39 = e11.e;
				if(_g39._hx_index == 0) {
					let _g = _g39.c;
					if(_g._hx_index == 2) {
						if(_g38._hx_index == 0) {
							let _g1 = _g38.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v >> _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 18:
				let _g40 = e2.e;
				let _g41 = e11.e;
				if(_g41._hx_index == 0) {
					let _g = _g41.c;
					if(_g._hx_index == 2) {
						if(_g40._hx_index == 0) {
							let _g1 = _g40.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v >>> _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
					} else {
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 19:
				let _g42 = e2.e;
				let _g43 = e11.e;
				if(_g43._hx_index == 0) {
					let _g = _g43.c;
					switch(_g._hx_index) {
					case 2:
						if(_g42._hx_index == 0) {
							let _g1 = _g42.c;
							d = _g1._hx_index == 2 ? hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.v % _g1.v | 0)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					case 3:
						if(_g42._hx_index == 0) {
							let _g1 = _g42.c;
							d = _g1._hx_index == 3 ? hxsl_TExprDef.TConst(hxsl_Const.CFloat(_g.v % _g1.v)) : hxsl_TExprDef.TBinop(_g5,e11,e2);
						} else {
							d = hxsl_TExprDef.TBinop(_g5,e11,e2);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(_g5,e11,e2);
					}
				} else {
					d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				}
				break;
			case 20:
				d = hxsl_TExprDef.TBinop(_g5,e11,e2);
				break;
			case 22:
				throw haxe_Exception.thrown("assert");
			case 23:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			let _g44 = _g.op;
			let e3 = this.evalExpr(_g.e1);
			let _g45 = e3.e;
			if(_g45._hx_index == 0) {
				let _g = _g45.c;
				switch(_g44._hx_index) {
				case 2:
					d = _g._hx_index == 1 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(!_g.b)) : hxsl_TExprDef.TUnop(_g44,e3);
					break;
				case 3:
					switch(_g._hx_index) {
					case 2:
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-_g.v));
						break;
					case 3:
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-_g.v));
						break;
					default:
						d = hxsl_TExprDef.TUnop(_g44,e3);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(_g44,e3);
				}
			} else {
				d = hxsl_TExprDef.TUnop(_g44,e3);
			}
			break;
		case 7:
			let _g46 = _g.init;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(_g.v),_g46 == null ? null : this.evalExpr(_g46));
			break;
		case 8:
			let _g47 = _g.args;
			let c1 = this.evalExpr(_g.e);
			let _g48 = [];
			let _g49 = 0;
			while(_g49 < _g47.length) {
				let a = _g47[_g49];
				++_g49;
				_g48.push(this.evalExpr(a));
			}
			let _g50 = c1.e;
			switch(_g50._hx_index) {
			case 1:
				let _g51 = _g50.v;
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c1,_g48);
				} else if(this.funMap.h.__keys__[_g51.__id__] != null) {
					let f = this.funMap.h[_g51.__id__];
					let outExprs = [];
					let undo = [];
					let _g = 0;
					let _g1 = f.args.length;
					while(_g < _g1) {
						let i = _g++;
						let v = f.args[i];
						let e = _g48[i];
						let _g1 = e.e;
						switch(_g1._hx_index) {
						case 0:
							let old = this.constants.h[v.id];
							undo.push(function() {
								if(old == null) {
									_gthis.constants.remove(v.id);
								} else {
									_gthis.constants.h[v.id] = old;
								}
							});
							this.constants.h[v.id] = e.e;
							break;
						case 1:
							switch(_g1.v.kind._hx_index) {
							case 0:case 1:case 2:
								let old1 = this.constants.h[v.id];
								undo.push(function() {
									if(old1 == null) {
										_gthis.constants.remove(v.id);
									} else {
										_gthis.constants.h[v.id] = old1;
									}
								});
								this.constants.h[v.id] = e.e;
								break;
							default:
								let old2 = this.varMap.h[v.__id__];
								if(old2 == null) {
									undo.push(function() {
										_gthis.varMap.remove(v);
									});
								} else {
									this.varMap.remove(v);
									undo.push(function() {
										_gthis.varMap.set(v,old2);
									});
								}
								let v2 = this.mapVar(v);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e), t : hxsl_Type.TVoid, p : e.p});
							}
							break;
						default:
							let old3 = this.varMap.h[v.__id__];
							if(old3 == null) {
								undo.push(function() {
									_gthis.varMap.remove(v);
								});
							} else {
								this.varMap.remove(v);
								undo.push(function() {
									_gthis.varMap.set(v,old3);
								});
							}
							let v21 = this.mapVar(v);
							outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e), t : hxsl_Type.TVoid, p : e.p});
						}
					}
					let e = this.handleReturn(this.evalExpr(f.expr,false),true);
					let _g2 = 0;
					while(_g2 < undo.length) {
						let u = undo[_g2];
						++_g2;
						u();
					}
					let _g3 = e.e;
					if(_g3._hx_index == 4) {
						let _g = _g3.el;
						let _g1 = 0;
						while(_g1 < _g.length) {
							let e = _g[_g1];
							++_g1;
							outExprs.push(e);
						}
					} else {
						outExprs.push(e);
					}
					d = hxsl_TExprDef.TBlock(outExprs);
				} else {
					d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
				}
				break;
			case 2:
				let v = this.evalCall(_g50.g,_g48,_g47,e.p);
				d = v != null ? v : hxsl_TExprDef.TCall(c1,_g48);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			d = hxsl_TExprDef.TSwiz(this.evalExpr(_g.e),_g.regs.slice());
			break;
		case 10:
			let _g52 = _g.eelse;
			let _g53 = _g.eif;
			let eelse = _g52;
			let eif = _g53;
			let econd = this.evalExpr(_g.econd);
			let _g54 = econd.e;
			if(_g54._hx_index == 0) {
				let _g = _g54.c;
				if(_g._hx_index == 1) {
					d = _g.b ? this.evalExpr(_g53,isVal).e : _g52 == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(_g52,isVal).e;
				} else if(isVal && _g52 != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(_g52,true),this.evalExpr(_g53,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd.p},[econd]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(_g53,isVal);
					if(_g52 != null) {
						eelse = this.evalExpr(_g52,isVal);
						let _g = eelse.e;
						if(_g._hx_index == 0 && _g.c._hx_index == 0) {
							eelse = null;
						}
					}
					d = hxsl_TExprDef.TIf(econd,eif,eelse);
				}
			} else if(isVal && _g52 != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(_g52,true),this.evalExpr(_g53,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd.p},[econd]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(_g53,isVal);
				if(_g52 != null) {
					eelse = this.evalExpr(_g52,isVal);
					let _g = eelse.e;
					if(_g._hx_index == 0 && _g.c._hx_index == 0) {
						eelse = null;
					}
				}
				d = hxsl_TExprDef.TIf(econd,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			let _g55 = _g.e;
			d = hxsl_TExprDef.TReturn(_g55 == null ? null : this.evalExpr(_g55));
			break;
		case 13:
			let _g56 = _g.loop;
			let _g57 = _g.v;
			let v2 = this.mapVar(_g57);
			let it = this.evalExpr(_g.it);
			let e4;
			let _g58 = it.e;
			if(_g58._hx_index == 5) {
				if(_g58.op._hx_index == 21) {
					let _g = _g58.e1.e;
					if(_g._hx_index == 0) {
						let _g1 = _g.c;
						if(_g1._hx_index == 2) {
							let _g = _g58.e2.e;
							if(_g._hx_index == 0) {
								let _g2 = _g.c;
								if(_g2._hx_index == 2) {
									let _g = _g2.v;
									if(this.unrollLoops) {
										let out = [];
										let _g2 = _g1.v;
										while(_g2 < _g) {
											let i = _g2++;
											this.constants.h[_g57.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(_g56,false));
										}
										this.constants.remove(_g57.id);
										e4 = hxsl_TExprDef.TBlock(out);
									} else {
										e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
									}
								} else {
									e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
								}
							} else {
								e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
							}
						} else {
							e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
						}
					} else {
						e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
					}
				} else {
					e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
				}
			} else {
				e4 = hxsl_TExprDef.TFor(v2,it,this.evalExpr(_g56,false));
			}
			this.varMap.remove(_g57);
			d = e4;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			let e12 = this.evalExpr(_g.e);
			let e21 = this.evalExpr(_g.index);
			let _g59 = e21.e;
			let _g60 = e12.e;
			if(_g60._hx_index == 17) {
				let _g = _g60.el;
				if(_g59._hx_index == 0) {
					let _g1 = _g59.c;
					if(_g1._hx_index == 2) {
						let _g2 = _g1.v;
						d = _g2 >= 0 && _g2 < _g.length ? _g[_g2].e : hxsl_TExprDef.TArray(e12,e21);
					} else {
						d = hxsl_TExprDef.TArray(e12,e21);
					}
				} else {
					d = hxsl_TExprDef.TArray(e12,e21);
				}
			} else {
				d = hxsl_TExprDef.TArray(e12,e21);
			}
			break;
		case 17:
			let _g61 = _g.el;
			let _g62 = [];
			let _g63 = 0;
			while(_g63 < _g61.length) {
				let e = _g61[_g63];
				++_g63;
				_g62.push(this.evalExpr(e));
			}
			d = hxsl_TExprDef.TArrayDecl(_g62);
			break;
		case 18:
			let _g64 = _g.def;
			let _g65 = _g.cases;
			let e5 = this.evalExpr(_g.e);
			let _g66 = [];
			let _g67 = 0;
			while(_g67 < _g65.length) {
				let c = _g65[_g67];
				++_g67;
				let _g = [];
				let _g1 = 0;
				let _g2 = c.values;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					_g.push(this.evalExpr(v));
				}
				_g66.push({ values : _g, expr : this.evalExpr(c.expr,isVal)});
			}
			let def = _g64 == null ? null : this.evalExpr(_g64,isVal);
			let hasCase = false;
			let _g68 = e5.e;
			if(_g68._hx_index == 0) {
				let _g = _g68.c;
				if(_g._hx_index == 2) {
					let _g1 = _g.v;
					let _g2 = 0;
					while(_g2 < _g66.length) {
						let c = _g66[_g2];
						++_g2;
						let _g = 0;
						let _g3 = c.values;
						while(_g < _g3.length) {
							let v = _g3[_g];
							++_g;
							let _g2 = v.e;
							if(_g2._hx_index == 0) {
								let _g = _g2.c;
								switch(_g._hx_index) {
								case 2:
									if(_g.v == _g1) {
										return c.expr;
									}
									break;
								case 3:
									if(_g.v == _g1) {
										return c.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(_g));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e5,_g66,def) : def == null ? hxsl_TExprDef.TBlock([]) : def.e;
			break;
		case 19:
			let cond = this.evalExpr(_g.e);
			let loop = this.evalExpr(_g.loop,false);
			d = hxsl_TExprDef.TWhile(cond,loop,_g.normalWhile);
			break;
		case 20:
			let _g69 = _g.e;
			let _g70 = _g.m;
			let e22;
			if(_g70 == "unroll") {
				this.unrollLoops = true;
				e22 = this.evalExpr(_g69,isVal);
				this.unrollLoops = false;
			} else {
				e22 = this.evalExpr(_g69,isVal);
			}
			d = hxsl_TExprDef.TMeta(_g70,_g.args,e22);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
}
hxsl_Eval.__name__ = "hxsl.Eval";
Object.assign(hxsl_Eval.prototype, {
	__class__: hxsl_Eval
});
class hxsl__$Flatten_Alloc {
	constructor(g,t,pos,size) {
		this.g = g;
		this.t = t;
		this.pos = pos;
		this.size = size;
	}
}
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
Object.assign(hxsl__$Flatten_Alloc.prototype, {
	__class__: hxsl__$Flatten_Alloc
});
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
class hxsl_Flatten {
	constructor() {
	}
	flatten(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			let p = s.funs[0].expr.p;
			let gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			let s1 = s.name;
			let s2 = s.vars.slice();
			let _g = [];
			let _g1 = 0;
			let _g2 = s.funs;
			while(_g1 < _g2.length) {
				let f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			let _g3 = 0;
			let _g4 = s.vars;
			while(_g3 < _g4.length) {
				let v = _g4[_g3];
				++_g3;
				if(v.type._hx_index == 9) {
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		let _g = 0;
		let _g1 = s.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		let prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		let allVars = this.globals.concat(this.params);
		let textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		let _g2 = [];
		let _g3 = 0;
		let _g4 = s.funs;
		while(_g3 < _g4.length) {
			let f = _g4[_g3];
			++_g3;
			_g2.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		let _g5 = 0;
		while(_g5 < textures.length) {
			let t = textures[_g5];
			++_g5;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : _g2};
	}
	mapFun(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	mapExpr(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let _g1 = _g.v;
			let a = this.varMap.h[_g1.__id__];
			if(a != null) {
				e = this.access(a,_g1.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 16:
			let _g2 = _g.index;
			let _g3 = _g.e;
			let _g4 = _g3.p;
			let _g5 = _g3.e;
			if(_g5._hx_index == 1) {
				let _g = _g5.v;
				let eindex = _g2;
				let _g1 = _g2.e;
				if(!(_g1._hx_index == 0 && _g1.c._hx_index == 2)) {
					let a = this.varMap.h[_g.__id__];
					if(a != null) {
						let _g1 = _g.type;
						if(_g1._hx_index == 15) {
							let _g = _g1.t;
							let stride = this.varSize(_g,a.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(_g2);
							let toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : _g4},[eindex]), t : hxsl_Type.TInt, p : _g4};
							e = this.access(a,_g,_g4,hxsl_ARead.AOffset(a,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : _g4}), t : hxsl_Type.TInt, p : _g4}));
						} else {
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	mapConsts(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.c;
			switch(_g1._hx_index) {
			case 2:
				return this.allocConst(_g1.v,e.p);
			case 3:
				return this.allocConst(_g1.v,e.p);
			default:
				return e;
			}
			break;
		case 2:
			switch(_g.g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			if(_g.op._hx_index == 1) {
				if(_g.e2.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			let _g2 = _g.args;
			let _g3 = _g.e.e;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 42) {
					if(_g2.length == 2) {
						let _g = _g2[1];
						let _g1 = _g2[0];
						let _g3 = _g1.t;
						let _g4 = _g1.e;
						if(_g4._hx_index == 1) {
							switch(_g4.v.kind._hx_index) {
							case 0:
								if(_g3._hx_index == 5) {
									if(_g3.size == 3) {
										if(_g3.t._hx_index == 1) {
											let _g1 = _g.e;
											if(_g1._hx_index == 0) {
												let _g = _g1.c;
												if(_g._hx_index == 2) {
													if(_g.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g3._hx_index == 5) {
									if(_g3.size == 3) {
										if(_g3.t._hx_index == 1) {
											let _g1 = _g.e;
											if(_g1._hx_index == 0) {
												let _g = _g1.c;
												if(_g._hx_index == 2) {
													if(_g.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g3._hx_index == 5) {
									if(_g3.size == 3) {
										if(_g3.t._hx_index == 1) {
											let _g1 = _g.e;
											if(_g1._hx_index == 0) {
												let _g = _g1.c;
												if(_g._hx_index == 2) {
													if(_g.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g3._hx_index == 5) {
									if(_g3.size == 3) {
										if(_g3.t._hx_index == 1) {
											let _g1 = _g.e;
											if(_g1._hx_index == 0) {
												let _g = _g1.c;
												if(_g._hx_index == 2) {
													if(_g.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			let _g4 = _g.index;
			let _g5 = _g.e;
			let _g6 = _g4.e;
			if(_g6._hx_index == 0) {
				if(_g6.c._hx_index == 2) {
					return { e : hxsl_TExprDef.TArray(this.mapConsts(_g5),_g4), t : e.t, p : e.p};
				} else {
					let _g = _g5.t;
					if(_g._hx_index == 15) {
						let stride = this.varSize(_g.t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				let _g = _g5.t;
				if(_g._hx_index == 15) {
					let stride = this.varSize(_g.t,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	allocConst(v,p) {
		let index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	allocConsts(va,p) {
		let pad = va.length - 1 & 3;
		let index = -1;
		let _g = 0;
		let _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			let i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			let found = true;
			let _g1 = 0;
			let _g2 = va.length;
			while(_g1 < _g2) {
				let j = _g1++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			let _g = 0;
			while(_g < va.length) {
				let v = va[_g];
				++_g;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	access(a,t,pos,acc) {
		switch(t._hx_index) {
		case 6:
			let tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			let tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			let tmp2 = hxsl_Type.TFun([]);
			let tmp3;
			switch(acc._hx_index) {
			case 0:
				let _g = acc.a;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g.g), t : _g.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g.t), p : pos};
				break;
			case 1:
				let _g1 = acc.delta;
				let _g2 = acc.a;
				let index = _g2.pos >> 2;
				let offset = index == 0 ? _g1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g2.g), t : _g2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,_g2.t), p : pos};
				break;
			}
			let tmp4;
			switch(acc._hx_index) {
			case 0:
				let _g3 = acc.a;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g3.g), t : _g3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((_g3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g3.t), p : pos};
				break;
			case 1:
				let _g4 = acc.delta;
				let _g5 = acc.a;
				let index1 = (_g5.pos >> 2) + 1;
				let offset1 = index1 == 0 ? _g4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g5.g), t : _g5.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,_g5.t), p : pos};
				break;
			}
			let tmp5;
			switch(acc._hx_index) {
			case 0:
				let _g6 = acc.a;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g6.g), t : _g6.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((_g6.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g6.t), p : pos};
				break;
			case 1:
				let _g7 = acc.delta;
				let _g8 = acc.a;
				let index2 = (_g8.pos >> 2) + 2;
				let offset2 = index2 == 0 ? _g7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g8.g), t : _g8.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,_g8.t), p : pos};
				break;
			}
			let tmp6;
			switch(acc._hx_index) {
			case 0:
				let _g9 = acc.a;
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g9.g), t : _g9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((_g9.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g9.t), p : pos};
				break;
			case 1:
				let _g10 = acc.delta;
				let _g11 = acc.a;
				let index3 = (_g11.pos >> 2) + 3;
				let offset3 = index3 == 0 ? _g10 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g10,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g11.g), t : _g11.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,_g11.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			let tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			let tmp8 = hxsl_Type.TFun([]);
			let tmp9;
			switch(acc._hx_index) {
			case 0:
				let _g12 = acc.a;
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g12.g), t : _g12.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(_g12.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g12.t), p : pos};
				break;
			case 1:
				let _g13 = acc.delta;
				let _g14 = acc.a;
				let index4 = _g14.pos >> 2;
				let offset4 = index4 == 0 ? _g13 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g13,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g14.g), t : _g14.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,_g14.t), p : pos};
				break;
			}
			let tmp10;
			switch(acc._hx_index) {
			case 0:
				let _g15 = acc.a;
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g15.g), t : _g15.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((_g15.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g15.t), p : pos};
				break;
			case 1:
				let _g16 = acc.delta;
				let _g17 = acc.a;
				let index5 = (_g17.pos >> 2) + 1;
				let offset5 = index5 == 0 ? _g16 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g16,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g17.g), t : _g17.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,_g17.t), p : pos};
				break;
			}
			let tmp11;
			switch(acc._hx_index) {
			case 0:
				let _g18 = acc.a;
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g18.g), t : _g18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((_g18.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g18.t), p : pos};
				break;
			case 1:
				let _g19 = acc.delta;
				let _g20 = acc.a;
				let index6 = (_g20.pos >> 2) + 2;
				let offset6 = index6 == 0 ? _g19 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g19,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g20.g), t : _g20.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,_g20.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			let _g21 = t.size;
			let _g22 = t.t;
			if(_g21._hx_index == 0) {
				let _g = _g21.v;
				let stride = a.size / _g | 0;
				let _g1 = [];
				let _g2 = 0;
				while(_g2 < _g) {
					let i = _g2++;
					let a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g1.push(this.access(a1,_g22,pos,hxsl_ARead.AIndex(a1)));
				}
				return { e : hxsl_TExprDef.TArrayDecl(_g1), t : _g22, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					let e;
					switch(acc._hx_index) {
					case 0:
						let _g = acc.a;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g.g), t : _g.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g.t), p : pos};
						break;
					case 1:
						let _g1 = acc.delta;
						let _g2 = acc.a;
						let index = _g2.pos >> 2;
						let offset = index == 0 ? _g1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g2.g), t : _g2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,_g2.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				let size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				let e;
				switch(acc._hx_index) {
				case 0:
					let _g = acc.a;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g.g), t : _g.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g.t), p : pos};
					break;
				case 1:
					let _g1 = acc.delta;
					let _g2 = acc.a;
					let index = _g2.pos >> 2;
					let offset = index == 0 ? _g1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g2.g), t : _g2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,_g2.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					let sw = [];
					let _g = 0;
					while(_g < size) {
						let i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					break;
				case 5:
					let _g3 = t.size;
					if(t.t._hx_index == 0) {
						e.t = hxsl_Type.TVec(_g3,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][_g3 - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				let e;
				switch(acc._hx_index) {
				case 0:
					let _g = acc.a;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g.g), t : _g.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(_g.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g.t), p : pos};
					break;
				case 1:
					let _g1 = acc.delta;
					let _g2 = acc.a;
					let index = _g2.pos >> 2;
					let offset = index == 0 ? _g1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g2.g), t : _g2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,_g2.t), p : pos};
					break;
				}
				e.t = t;
				return e;
			}
			let size = this.varSize(t,a.t);
			if(size > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			let e;
			switch(acc._hx_index) {
			case 0:
				let _g23 = acc.a;
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g23.g), t : _g23.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(_g23.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,_g23.t), p : pos};
				break;
			case 1:
				let _g24 = acc.delta;
				let _g25 = acc.a;
				let index7 = _g25.pos >> 2;
				let offset7 = index7 == 0 ? _g24 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,_g24,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(_g25.g), t : _g25.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,_g25.t), p : pos};
				break;
			}
			if(size == 4) {
				if((a.pos & 3) != 0) {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				let sw = [];
				let _g = 0;
				while(_g < size) {
					let i = _g++;
					sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
				}
				e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e.t = hxsl_Type.TFloat;
				e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				break;
			case 5:
				let _g26 = t.size;
				if(t.t._hx_index == 0) {
					e.t = hxsl_Type.TVec(_g26,hxsl_VecType.VFloat);
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][_g26 - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				}
				break;
			default:
			}
			return e;
		}
	}
	optimize(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 8:
			let _g1 = _g.args;
			let _g2 = _g.e.e;
			if(_g2._hx_index == 2) {
				if(_g2.g._hx_index == 52) {
					if(_g1.length == 1) {
						let _g = _g1[0].e;
						if(_g._hx_index == 8) {
							let _g1 = _g.args;
							let _g2 = _g.e.e;
							if(_g2._hx_index == 2) {
								if(_g2.g._hx_index == 51) {
									let rem = 0;
									let size = 0;
									while(size < 4) {
										let t = _g1[_g1.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										let _g = 0;
										let _g2 = rem;
										while(_g < _g2) {
											++_g;
											_g1.pop();
										}
										let emat;
										let _g3 = e.e;
										if(_g3._hx_index == 8) {
											emat = _g3.e;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,_g1), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			let _g3 = _g.e.e;
			if(_g3._hx_index == 17) {
				let _g1 = _g3.el;
				let _g2 = _g.index.e;
				if(_g2._hx_index == 0) {
					let _g = _g2.c;
					if(_g._hx_index == 2) {
						let _g2 = _g.v;
						if(_g2 >= 0 && _g2 < _g1.length) {
							return _g1[_g2];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	packTextures(name,vars,t) {
		let alloc = [];
		let g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		let _g = 0;
		while(_g < vars.length) {
			let v = vars[_g];
			++_g;
			if(v.type != t) {
				if(!(t == hxsl_Type.TSampler2D && v.type._hx_index == 17)) {
					continue;
				}
			}
			let a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	packBuffers(vars) {
		let alloc = [];
		let g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		let _g = 0;
		while(_g < vars.length) {
			let v = vars[_g];
			++_g;
			if(v.type._hx_index == 16) {
				let a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	pack(name,kind,vars,t) {
		let alloc = [];
		let apos = 0;
		let g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		let _g = 0;
		while(_g < vars.length) {
			let v = vars[_g];
			++_g;
			if(hxsl_Tools.isSampler(v.type) || v.type._hx_index == 16) {
				continue;
			}
			let size = this.varSize(v.type,t);
			let best = null;
			let _g1 = 0;
			while(_g1 < alloc.length) {
				let a = alloc[_g1];
				++_g1;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				let free = best.size - size;
				if(free > 0) {
					let i = alloc.indexOf(best);
					let a = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				let a = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a.v = v;
				this.varMap.set(v,a);
				alloc.push(a);
				let pad = (4 - size % 4) % 4;
				if(pad > 0) {
					let a = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	varSize(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			if(t == v.t) {
				return v.size;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			let _g = v.size;
			if(_g._hx_index == 0) {
				return this.varSize(v.t,t) * _g.v;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	gatherVar(v) {
		let _g = v.type;
		if(_g._hx_index == 13) {
			let _g1 = _g.vl;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let v = _g1[_g2];
				++_g2;
				this.gatherVar(v);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
}
hxsl_Flatten.__name__ = "hxsl.Flatten";
Object.assign(hxsl_Flatten.prototype, {
	__class__: hxsl_Flatten
});
class hxsl_Globals {
	constructor() {
		this.channels = [];
		this.map = new haxe_ds_IntMap();
	}
	set(path,v) {
		let this1 = this.map;
		let key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	allocChannelID(t) {
		let _g = 0;
		let _g1 = this.maxChannels;
		while(_g < _g1) {
			let i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		let i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	static allocID(path) {
		if(hxsl_Globals.MAP == null) {
			hxsl_Globals.MAP = new haxe_ds_StringMap();
			hxsl_Globals.ALL = [];
		}
		let id = hxsl_Globals.MAP.h[path];
		if(id == null) {
			id = hxsl_Globals.ALL.length;
			hxsl_Globals.ALL.push(path);
			hxsl_Globals.MAP.h[path] = id;
		}
		return id;
	}
}
hxsl_Globals.__name__ = "hxsl.Globals";
Object.assign(hxsl_Globals.prototype, {
	__class__: hxsl_Globals
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = "js.Boot";
class hxsl_GlslOut {
	constructor() {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.exprIds = 0;
		this.varNames = new haxe_ds_IntMap();
		this.allNames = new haxe_ds_StringMap();
	}
	decl(s) {
		let _g = 0;
		let _g1 = this.decls;
		while(_g < _g1.length) {
			let d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	addType(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += "void";
			break;
		case 1:
			this.buf.b += "int";
			break;
		case 2:
			this.buf.b += "bool";
			break;
		case 3:
			this.buf.b += "float";
			break;
		case 4:
			this.buf.b += "string";
			break;
		case 5:
			let _g = t.size;
			switch(t.t._hx_index) {
			case 0:
				this.buf.b += "i";
				break;
			case 1:
				break;
			case 2:
				this.buf.b += "b";
				break;
			}
			this.buf.b += "vec";
			this.buf.b += Std.string(_g);
			break;
		case 6:
			this.buf.b += "mat3";
			break;
		case 7:
			this.buf.b += "mat4";
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += "_mat3x4";
			break;
		case 9:
			this.buf.b += "vec";
			this.buf.b += Std.string(t.size);
			break;
		case 10:
			this.buf.b += "sampler2D";
			break;
		case 11:
			this.buf.b += "sampler2DArray";
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += "samplerCube";
			break;
		case 13:
			let _g1 = t.vl;
			this.buf.b += "struct { ";
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let v = _g1[_g2];
				++_g2;
				this.addVar(v);
				this.buf.b += ";";
			}
			this.buf.b += " }";
			break;
		case 14:
			this.buf.b += "function";
			break;
		case 15:
			let _g3 = t.size;
			this.addType(t.t);
			this.buf.b += "[";
			switch(_g3._hx_index) {
			case 0:
				let _g4 = _g3.v;
				if(_g4 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += "2";
					} else {
						this.buf.b += Std.string(_g4);
					}
				} else {
					this.buf.b += Std.string(_g4);
				}
				break;
			case 1:
				let v = this.varName(_g3.v);
				this.buf.b += Std.string(v);
				break;
			}
			this.buf.b += "]";
			break;
		case 16:
			throw haxe_Exception.thrown("assert");
		case 17:
			this.buf.b += Std.string("channel" + t.size);
			break;
		}
	}
	addVar(v) {
		let _g = v.type;
		switch(_g._hx_index) {
		case 15:
			let _g1 = _g.size;
			let old = v.type;
			v.type = _g.t;
			this.addVar(v);
			v.type = old;
			this.buf.b += "[";
			switch(_g1._hx_index) {
			case 0:
				let _g2 = _g1.v;
				if(_g2 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += "2";
					} else {
						this.buf.b += Std.string(_g2);
					}
				} else {
					this.buf.b += Std.string(_g2);
				}
				break;
			case 1:
				let v1 = this.varName(_g1.v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += "]";
			break;
		case 16:
			let _g3 = _g.size;
			let _g4 = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += " { ";
			v.type = hxsl_Type.TArray(_g4,_g3);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(_g4,_g3);
			this.buf.b += "; }";
			break;
		default:
			this.addType(v.type);
			this.buf.b += " ";
			let v2 = this.varName(v);
			this.buf.b += Std.string(v2);
		}
	}
	addValue(e,tabs) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 4:
			let name = "val" + this.exprIds++;
			let tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += " ";
			this.buf.b += Std.string(name);
			this.buf.b += "(void)";
			let el2 = _g.el.slice();
			let last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			let e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += "()";
			break;
		case 10:
			this.buf.b += "( ";
			this.addValue(_g.econd,tabs);
			this.buf.b += " ) ? ";
			this.addValue(_g.eif,tabs);
			this.buf.b += " : ";
			this.addValue(_g.eelse,tabs);
			break;
		case 20:
			this.addValue(_g.e,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	addBlock(e,tabs) {
		this.addExpr(e,tabs);
	}
	getFunName(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			switch(args[0].t._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			switch(args[0].t._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:case 36:
			return "texelFetch";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	addExpr(e,tabs) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				this.buf.b += "null";
				break;
			case 1:
				this.buf.b += Std.string(_g1.b);
				break;
			case 2:
				this.buf.b += Std.string(_g1.v);
				break;
			case 3:
				let str = "" + _g1.v;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += ".";
				}
				break;
			case 4:
				this.buf.b += Std.string("\"" + _g1.v + "\"");
				break;
			}
			break;
		case 1:
			let v = this.varName(_g.v);
			this.buf.b += Std.string(v);
			break;
		case 2:
			let v1 = hxsl_GlslOut.GLOBALS.get(_g.g);
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += "(";
			this.addValue(_g.e,tabs);
			this.buf.b += ")";
			break;
		case 4:
			let _g2 = _g.el;
			this.buf.b += "{\n";
			let t2 = tabs + "\t";
			let _g3 = 0;
			while(_g3 < _g2.length) {
				let e = _g2[_g3];
				++_g3;
				this.buf.b += Std.string(t2);
				this.addExpr(e,t2);
				this.newLine(e);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += "}";
			break;
		case 5:
			let _g4 = _g.e2;
			let _g5 = _g.e1;
			let _g6 = _g.op;
			let _g7 = _g4.t;
			let _g8 = _g5.t;
			switch(_g6._hx_index) {
			case 1:
				if(_g8._hx_index == 5) {
					if(_g8.size == 3) {
						if(_g8.t._hx_index == 1) {
							if(_g7._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								if(_g6._hx_index == 20) {
									this.addValue(_g5,tabs);
									this.buf.b += " = ";
								}
								this.buf.b += "m3x4mult(";
								this.addValue(_g5,tabs);
								this.buf.b += ",";
								this.addValue(_g4,tabs);
								this.buf.b += ")";
							} else {
								this.addValue(_g5,tabs);
								this.buf.b += " ";
								this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
								this.buf.b += " ";
								this.addValue(_g4,tabs);
							}
						} else {
							this.addValue(_g5,tabs);
							this.buf.b += " ";
							this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
							this.buf.b += " ";
							this.addValue(_g4,tabs);
						}
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 5:
				if(_g8._hx_index == 5) {
					if(_g7._hx_index == 5) {
						this.buf.b += Std.string("vec" + _g8.size + "(");
						let v;
						switch(_g6._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += "(";
						this.addValue(_g5,tabs);
						this.buf.b += ",";
						this.addValue(_g4,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 6:
				if(_g8._hx_index == 5) {
					if(_g7._hx_index == 5) {
						this.buf.b += Std.string("vec" + _g8.size + "(");
						let v;
						switch(_g6._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += "(";
						this.addValue(_g5,tabs);
						this.buf.b += ",";
						this.addValue(_g4,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 7:
				if(_g8._hx_index == 5) {
					if(_g7._hx_index == 5) {
						this.buf.b += Std.string("vec" + _g8.size + "(");
						let v;
						switch(_g6._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += "(";
						this.addValue(_g5,tabs);
						this.buf.b += ",";
						this.addValue(_g4,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 8:
				if(_g8._hx_index == 5) {
					if(_g7._hx_index == 5) {
						this.buf.b += Std.string("vec" + _g8.size + "(");
						let v;
						switch(_g6._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += "(";
						this.addValue(_g5,tabs);
						this.buf.b += ",";
						this.addValue(_g4,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 9:
				if(_g8._hx_index == 5) {
					if(_g7._hx_index == 5) {
						this.buf.b += Std.string("vec" + _g8.size + "(");
						let v;
						switch(_g6._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += "(";
						this.addValue(_g5,tabs);
						this.buf.b += ",";
						this.addValue(_g4,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 10:
				if(_g8._hx_index == 5) {
					if(_g7._hx_index == 5) {
						this.buf.b += Std.string("vec" + _g8.size + "(");
						let v;
						switch(_g6._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += "(";
						this.addValue(_g5,tabs);
						this.buf.b += ",";
						this.addValue(_g4,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += "_ushr(";
				this.addValue(_g5,tabs);
				this.buf.b += ",";
				this.addValue(_g4,tabs);
				this.buf.b += ")";
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					if(_g6._hx_index == 20) {
						this.addValue(_g5,tabs);
						this.buf.b += " = ";
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[_g5,_g4]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			case 20:
				switch(_g6.op._hx_index) {
				case 1:
					if(_g8._hx_index == 5) {
						if(_g8.size == 3) {
							if(_g8.t._hx_index == 1) {
								if(_g7._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									if(_g6._hx_index == 20) {
										this.addValue(_g5,tabs);
										this.buf.b += " = ";
									}
									this.buf.b += "m3x4mult(";
									this.addValue(_g5,tabs);
									this.buf.b += ",";
									this.addValue(_g4,tabs);
									this.buf.b += ")";
								} else {
									this.addValue(_g5,tabs);
									this.buf.b += " ";
									this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
									this.buf.b += " ";
									this.addValue(_g4,tabs);
								}
							} else {
								this.addValue(_g5,tabs);
								this.buf.b += " ";
								this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
								this.buf.b += " ";
								this.addValue(_g4,tabs);
							}
						} else {
							this.addValue(_g5,tabs);
							this.buf.b += " ";
							this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
							this.buf.b += " ";
							this.addValue(_g4,tabs);
						}
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						if(_g6._hx_index == 20) {
							this.addValue(_g5,tabs);
							this.buf.b += " = ";
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[_g5,_g4]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(_g5,tabs);
						this.buf.b += " ";
						this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
						this.buf.b += " ";
						this.addValue(_g4,tabs);
					}
					break;
				default:
					this.addValue(_g5,tabs);
					this.buf.b += " ";
					this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
					this.buf.b += " ";
					this.addValue(_g4,tabs);
				}
				break;
			default:
				this.addValue(_g5,tabs);
				this.buf.b += " ";
				this.buf.b += Std.string(hxsl_Printer.opStr(_g6));
				this.buf.b += " ";
				this.addValue(_g4,tabs);
			}
			break;
		case 6:
			let _g9 = _g.e1;
			let _this = this.buf;
			let _this1 = _this.b;
			let tmp;
			switch(_g.op._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addValue(_g9,tabs);
			break;
		case 7:
			let _g10 = _g.init;
			let _g11 = _g.v;
			this.locals.h[_g11.id] = _g11;
			if(_g10 != null) {
				let v = this.varName(_g11);
				this.buf.b += Std.string(v);
				this.buf.b += " = ";
				this.addValue(_g10,tabs);
			} else {
				this.buf.b += "/*var*/";
			}
			break;
		case 8:
			let _g12 = _g.args;
			let _g13 = _g.e;
			let _g14 = _g13.e;
			if(_g14._hx_index == 2) {
				let _g = _g14.g;
				switch(_g._hx_index) {
				case 35:
					let v = this.getFunName(_g,_g12,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += "(";
					let _g1 = 0;
					while(_g1 < _g12.length) {
						let e = _g12[_g1];
						++_g1;
						this.addValue(e,tabs);
						this.buf.b += ", ";
					}
					this.buf.b += "0)";
					break;
				case 53:
					if(_g12.length == 1) {
						let _g = _g12[0];
						this.buf.b += "clamp(";
						this.addValue(_g,tabs);
						this.buf.b += ", 0., 1.)";
					} else {
						let _g = _g13.e;
						if(_g._hx_index == 2) {
							let v = this.getFunName(_g.g,_g12,e.t);
							this.buf.b += Std.string(v);
						} else {
							this.addValue(_g13,tabs);
						}
						this.buf.b += "(";
						let first = true;
						let _g1 = 0;
						while(_g1 < _g12.length) {
							let e = _g12[_g1];
							++_g1;
							if(first) {
								first = false;
							} else {
								this.buf.b += ", ";
							}
							this.addValue(e,tabs);
						}
						this.buf.b += ")";
					}
					break;
				default:
					let _g2 = _g13.e;
					if(_g2._hx_index == 2) {
						let v = this.getFunName(_g2.g,_g12,e.t);
						this.buf.b += Std.string(v);
					} else {
						this.addValue(_g13,tabs);
					}
					this.buf.b += "(";
					let first = true;
					let _g3 = 0;
					while(_g3 < _g12.length) {
						let e = _g12[_g3];
						++_g3;
						if(first) {
							first = false;
						} else {
							this.buf.b += ", ";
						}
						this.addValue(e,tabs);
					}
					this.buf.b += ")";
				}
			} else {
				let _g = _g13.e;
				if(_g._hx_index == 2) {
					let v = this.getFunName(_g.g,_g12,e.t);
					this.buf.b += Std.string(v);
				} else {
					this.addValue(_g13,tabs);
				}
				this.buf.b += "(";
				let first = true;
				let _g1 = 0;
				while(_g1 < _g12.length) {
					let e = _g12[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += ", ";
					}
					this.addValue(e,tabs);
				}
				this.buf.b += ")";
			}
			break;
		case 9:
			let _g15 = _g.regs;
			let _g16 = _g.e;
			if(_g16.t._hx_index == 3) {
				let _g = 0;
				while(_g < _g15.length) {
					let r = _g15[_g];
					++_g;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(_g15.length) {
				case 1:
					this.addValue(_g16,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += "_vec2(";
					this.addValue(_g16,tabs);
					this.buf.b += ")";
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += "_vec3(";
					this.addValue(_g16,tabs);
					this.buf.b += ")";
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += "_vec4(";
					this.addValue(_g16,tabs);
					this.buf.b += ")";
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(_g16,tabs);
				this.buf.b += ".";
				let _g = 0;
				while(_g < _g15.length) {
					let r = _g15[_g];
					++_g;
					let _this = this.buf;
					let _this1 = _this.b;
					let tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			let _g17 = _g.eelse;
			let _g18 = _g.eif;
			this.buf.b += "if( ";
			this.addValue(_g.econd,tabs);
			this.buf.b += ") ";
			this.addExpr(_g18,tabs);
			if(_g17 != null) {
				if(!this.isBlock(_g18)) {
					this.buf.b += ";";
				}
				this.buf.b += " else ";
				this.addExpr(_g17,tabs);
			}
			break;
		case 11:
			this.buf.b += "discard";
			break;
		case 12:
			let _g19 = _g.e;
			if(_g19 == null) {
				this.buf.b += "return";
			} else {
				this.buf.b += "return ";
				this.addValue(_g19,tabs);
			}
			break;
		case 13:
			let _g20 = _g.v;
			this.locals.h[_g20.id] = _g20;
			let _g21 = _g.it.e;
			if(_g21._hx_index == 5) {
				if(_g21.op._hx_index == 21) {
					this.buf.b += "for(";
					this.buf.b += Std.string(_g20.name + "=");
					this.addValue(_g21.e1,tabs);
					this.buf.b += Std.string(";" + _g20.name + "<");
					this.addValue(_g21.e2,tabs);
					this.buf.b += Std.string(";" + _g20.name + "++) ");
					this.addBlock(_g.loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += "continue";
			break;
		case 15:
			this.buf.b += "break";
			break;
		case 16:
			this.addValue(_g.e,tabs);
			this.buf.b += "[";
			this.addValue(_g.index,tabs);
			this.buf.b += "]";
			break;
		case 17:
			let _g22 = _g.el;
			let _g23 = e.t;
			if(_g23._hx_index == 15) {
				this.addType(_g23.t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + _g22.length + "]");
			this.buf.b += "(";
			let first = true;
			let _g24 = 0;
			while(_g24 < _g22.length) {
				let e = _g22[_g24];
				++_g24;
				if(first) {
					first = false;
				} else {
					this.buf.b += ", ";
				}
				this.addValue(e,tabs);
			}
			this.buf.b += ")";
			break;
		case 18:
			this.buf.b += "switch(...)";
			break;
		case 19:
			let _g25 = _g.loop;
			let _g26 = _g.e;
			if(_g.normalWhile == false) {
				tabs += "\t";
				this.buf.b += "do ";
				this.addBlock(_g25,tabs);
				this.buf.b += " while( ";
				this.addValue(_g26,tabs);
				this.buf.b += " )";
			} else {
				this.buf.b += "while( ";
				this.addValue(_g26,tabs);
				this.buf.b += " ) ";
				this.addBlock(_g25,tabs);
			}
			break;
		case 20:
			this.addExpr(_g.e,tabs);
			break;
		}
	}
	varName(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		let n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			let k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	newLine(e) {
		if(this.isBlock(e)) {
			this.buf.b += "\n";
		} else {
			this.buf.b += ";\n";
		}
	}
	isBlock(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 4:
			return true;
		case 13:
			return this.isBlock(_g.loop);
		case 19:
			if(_g.normalWhile == true) {
				return this.isBlock(_g.loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	initVar(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			if(v.type._hx_index == 16) {
				this.buf.b += "layout(std140) ";
			}
			this.buf.b += "uniform ";
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += "out ";
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					switch(q.p._hx_index) {
					case 0:
						this.buf.b += "lowp ";
						break;
					case 1:
						this.buf.b += "mediump ";
						break;
					case 2:
						this.buf.b += "highp ";
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += ";\n";
	}
	initVars(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		let _g = 0;
		let _g1 = s.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += "\n";
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	run(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		let f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		let tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += "void main(void) {\n";
		let _g = f.expr.e;
		if(_g._hx_index == 4) {
			let _g1 = _g.el;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let e = _g1[_g2];
				++_g2;
				this.buf.b += "\t";
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += "}";
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		let locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		let _g1 = 0;
		while(_g1 < locals.length) {
			let v = locals[_g1];
			++_g1;
			this.addVar(v);
			this.buf.b += ";\n";
		}
		this.buf.b += "\n";
		let _g2 = 0;
		let _g3 = this.exprValues;
		while(_g2 < _g3.length) {
			let e = _g3[_g2];
			++_g2;
			this.buf.b += Std.string(e);
			this.buf.b += "\n\n";
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
}
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
Object.assign(hxsl_GlslOut.prototype, {
	__class__: hxsl_GlslOut
});
class hxsl__$Linker_AllocatedVar {
	constructor() {
	}
}
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
Object.assign(hxsl__$Linker_AllocatedVar.prototype, {
	__class__: hxsl__$Linker_AllocatedVar
});
class hxsl__$Linker_ShaderInfos {
	constructor(n,v) {
		this.name = n;
		this.uid = hxsl__$Linker_ShaderInfos.UID++;
		this.vertex = v;
		this.processed = new haxe_ds_IntMap();
		this.usedFunctions = [];
		this.read = new haxe_ds_IntMap();
		this.write = new haxe_ds_IntMap();
	}
}
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
Object.assign(hxsl__$Linker_ShaderInfos.prototype, {
	__class__: hxsl__$Linker_ShaderInfos
});
class hxsl_Linker {
	constructor(batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.debugDepth = 0;
		this.batchMode = batchMode;
	}
	error(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	mergeVar(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		let _g = v2.type;
		let _g1 = v.type;
		if(_g1._hx_index == 13) {
			let _g2 = _g1.vl;
			if(_g._hx_index == 13) {
				let _g1 = _g.vl;
				let _g3 = 0;
				while(_g3 < _g2.length) {
					let f1 = _g2[_g3];
					++_g3;
					let ft = null;
					let _g = 0;
					while(_g < _g1.length) {
						let f2 = _g1[_g];
						++_g;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						_g1.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	allocVar(v,p,path,parent) {
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			let p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		let key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					key = q.n;
				}
			}
		}
		let v2 = this.varMap.h[key];
		let vname = v.name;
		if(v2 != null) {
			let _g = 0;
			let _g1 = v2.merged;
			while(_g < _g1.length) {
				let vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			let tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !this.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				let v = v2.v;
				tmp = v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !this.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				let k = 2;
				while(true) {
					let a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					let _g = 0;
					let _g1 = a.merged;
					while(_g < _g1.length) {
						let vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		let vid = this.allVars.length + 1;
		let v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		let a = new hxsl__$Linker_AllocatedVar();
		a.v = v21;
		a.merged = [v];
		a.path = key;
		a.id = vid;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		this.allVars.push(a);
		this.varMap.h[key] = a;
		let _g = v21.type;
		if(_g._hx_index == 13) {
			let _g1 = _g.vl;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < _g1.length) {
				let v = _g1[_g3];
				++_g3;
				_g2.push(this.allocVar(v,p,key,a).v);
			}
			v21.type = hxsl_Type.TStruct(_g2);
		}
		return a;
	}
	mapExprVar(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let _g1 = _g.v;
			if(!this.locals.h.hasOwnProperty(_g1.id)) {
				let v = this.allocVar(_g1,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v.id)) {
					this.curShader.read.h[v.id] = v;
					if(this.curShader.vertex == null && v.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v.v), t : v.v.type, p : e.p};
			}
			break;
		case 5:
			let _g2 = _g.e2;
			let _g3 = _g.e1;
			let _g4 = _g.op;
			let _g5 = _g3.e;
			switch(_g4._hx_index) {
			case 4:
				switch(_g5._hx_index) {
				case 1:
					let _g6 = _g5.v;
					if(!this.locals.h.hasOwnProperty(_g6.id)) {
						let e2 = this.mapExprVar(_g2);
						let v = this.allocVar(_g6,_g3.p);
						if(this.curShader != null) {
							this.curShader.write.h[v.id] = v;
						}
						return { e : hxsl_TExprDef.TBinop(_g4,{ e : hxsl_TExprDef.TVar(v.v), t : v.v.type, p : e.p},e2), t : e.t, p : e.p};
					} else if(!this.locals.h.hasOwnProperty(_g6.id)) {
						let e1 = this.mapExprVar(_g3);
						let e2 = this.mapExprVar(_g2);
						let v = this.allocVar(_g6,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v.id] = v;
						}
						return { e : hxsl_TExprDef.TBinop(_g4,e1,e2), t : e.t, p : e.p};
					}
					break;
				case 9:
					let _g7 = _g5.e.e;
					if(_g7._hx_index == 1) {
						let _g = _g7.v;
						if(!this.locals.h.hasOwnProperty(_g.id)) {
							let e1 = this.mapExprVar(_g3);
							let e2 = this.mapExprVar(_g2);
							let v = this.allocVar(_g,e1.p);
							if(this.curShader != null) {
								this.curShader.write.h[v.id] = v;
							}
							return { e : hxsl_TExprDef.TBinop(_g4,e1,e2), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				switch(_g5._hx_index) {
				case 1:
					let _g8 = _g5.v;
					if(!this.locals.h.hasOwnProperty(_g8.id)) {
						let e1 = this.mapExprVar(_g3);
						let e2 = this.mapExprVar(_g2);
						let v = this.allocVar(_g8,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v.id] = v;
						}
						return { e : hxsl_TExprDef.TBinop(_g4,e1,e2), t : e.t, p : e.p};
					}
					break;
				case 9:
					let _g9 = _g5.e.e;
					if(_g9._hx_index == 1) {
						let _g = _g9.v;
						if(!this.locals.h.hasOwnProperty(_g.id)) {
							let e1 = this.mapExprVar(_g3);
							let e2 = this.mapExprVar(_g2);
							let v = this.allocVar(_g,e1.p);
							if(this.curShader != null) {
								this.curShader.write.h[v.id] = v;
							}
							return { e : hxsl_TExprDef.TBinop(_g4,e1,e2), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			this.locals.h[_g.v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			this.locals.h[_g.v.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	addShader(name,vertex,e,p) {
		let s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	sortByPriorityDesc(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	buildDependency(s,v,isWritten) {
		let found = !isWritten;
		let _g = 0;
		let _g1 = this.shaders;
		while(_g < _g1.length) {
			let parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	initDependencies(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		let r = s.read.iterator();
		while(r.hasNext()) {
			let r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			let d = s.deps.keys();
			while(d.hasNext()) {
				let d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			let d = s.deps.keys();
			while(d.hasNext()) {
				let d1 = d.next();
				if(d1.vertex == null) {
					d1.vertex = true;
				}
			}
		}
	}
	collect(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		let _g = [];
		let d = cur.deps.keys();
		while(d.hasNext()) {
			let d1 = d.next();
			_g.push(d1);
		}
		_g.sort($bind(this,this.sortByPriorityDesc));
		let _g1 = 0;
		while(_g1 < _g.length) {
			let d = _g[_g1];
			++_g1;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	uniqueLocals(expr,locals) {
		let _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			let _g1 = _g.el;
			let _g2 = new haxe_ds_StringMap();
			let k = haxe_ds_StringMap.keysIterator(locals.h);
			while(k.hasNext()) {
				let k1 = k.next();
				_g2.h[k1] = true;
			}
			let _g3 = 0;
			while(_g3 < _g1.length) {
				let e = _g1[_g3];
				++_g3;
				this.uniqueLocals(e,_g2);
			}
			break;
		case 7:
			let _g4 = _g.v;
			if(Object.prototype.hasOwnProperty.call(locals.h,_g4.name)) {
				let k = 2;
				while(Object.prototype.hasOwnProperty.call(locals.h,_g4.name + k)) ++k;
				_g4.name += k;
			}
			locals.h[_g4.name] = true;
			break;
		default:
			let _g5 = $bind(this,this.uniqueLocals);
			let locals1 = locals;
			hxsl_Tools.iter(expr,function(expr) {
				_g5(expr,locals1);
			});
		}
	}
	link(shadersData) {
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		let dupShaders = new haxe_ds_ObjectMap();
		let _gthis = this;
		let _g = [];
		let _g1 = 0;
		while(_g1 < shadersData.length) {
			let s = shadersData[_g1];
			++_g1;
			let s1 = s;
			let sreal = s;
			if(dupShaders.h.__keys__[s.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		this.curInstance = 0;
		let outVars = [];
		let _g2 = 0;
		while(_g2 < _g.length) {
			let s = _g[_g2];
			++_g2;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s.name,"batchShader_");
			let _g1 = 0;
			let _g3 = s.vars;
			while(_g1 < _g3.length) {
				let v = _g3[_g1];
				++_g1;
				let v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			let _g4 = 0;
			let _g5 = s.funs;
			while(_g4 < _g5.length) {
				let f = _g5[_g4];
				++_g4;
				let v = this.allocVar(f.ref,f.expr.p);
				v.kind = f.kind;
			}
			this.curInstance++;
		}
		let priority = 0;
		let initPrio_init = [-3000];
		let initPrio_vert = [-2000];
		let initPrio_frag = [-1000];
		let _g3 = 0;
		while(_g3 < _g.length) {
			let s = _g[_g3];
			++_g3;
			let _g1 = 0;
			let _g2 = s.funs;
			while(_g1 < _g2.length) {
				let f = _g2[_g1];
				++_g1;
				let v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority);
					break;
				case 2:
					let prio;
					let status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					let _g = f.expr.e;
					if(_g._hx_index == 4) {
						let _g1 = _g.el;
						let index = 0;
						let _g2 = 0;
						while(_g2 < _g1.length) {
							let e = _g1[_g2];
							++_g2;
							this.addShader(s.name + "." + f.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		let entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		let _g4 = 0;
		while(_g4 < outVars.length) {
			let v = outVars[_g4];
			++_g4;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		let _g5 = 0;
		let _g6 = this.shaders;
		while(_g5 < _g6.length) {
			let s = _g6[_g5];
			++_g5;
			if(s.hasDiscard) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		let _g7 = 0;
		let _g8 = this.shaders;
		while(_g7 < _g8.length) {
			let s = _g8[_g7];
			++_g7;
			if(s.vertex != null) {
				continue;
			}
			let onlyParams = true;
			let r = s.read.iterator();
			while(r.hasNext()) {
				let r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s.vertex = false;
			}
		}
		let v = [];
		let f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		let _g9 = 0;
		let _g10 = this.shaders;
		while(_g9 < _g10.length) {
			let s = _g10[_g9];
			++_g9;
			s.marked = null;
		}
		let _g11 = 0;
		let _g12 = v.concat(f);
		while(_g11 < _g12.length) {
			let s = _g12[_g11];
			++_g11;
			let d = s.deps.keys();
			while(d.hasNext()) {
				let d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		let outVars1 = [];
		let varMap_h = { };
		let addVar = null;
		addVar = function(v) {
			while(true) {
				if(varMap_h.hasOwnProperty(v.id)) {
					return;
				}
				varMap_h[v.id] = true;
				if(v.v.parent != null) {
					v = v.parent;
					continue;
				} else {
					outVars1.push(v.v);
				}
				return;
			}
		};
		let _g13 = 0;
		let _g14 = v.concat(f);
		while(_g13 < _g14.length) {
			let s = _g14[_g13];
			++_g13;
			let v = s.read.iterator();
			while(v.hasNext()) {
				let v1 = v.next();
				addVar(v1);
			}
			let v1 = s.write.iterator();
			while(v1.hasNext()) {
				let v = v1.next();
				addVar(v);
			}
		}
		let cleanVar = null;
		cleanVar = function(v) {
			let _g = v.type;
			if(_g._hx_index == 13) {
				let _g1 = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					let vout = [];
					let _g = 0;
					while(_g < _g1.length) {
						let v = _g1[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v.id)) {
							cleanVar(v);
							vout.push(v);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		let _g15 = 0;
		while(_g15 < outVars1.length) {
			let v = outVars1[_g15];
			++_g15;
			cleanVar(v);
		}
		let build = function(kind,name,a) {
			let v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v);
			let exprs = [];
			let _g = 0;
			while(_g < a.length) {
				let s = a[_g];
				++_g;
				let _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					let _g = _g1.el;
					let _g2 = 0;
					while(_g2 < _g.length) {
						let e = _g[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			let expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		let funs = [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		let s = dupShaders.keys();
		while(s.hasNext()) {
			let s1 = s.next();
			let sreal = dupShaders.h[s1.__id__];
			if(s1 == sreal) {
				continue;
			}
			let _g = 0;
			let _g1 = s1.vars.length;
			while(_g < _g1) {
				let i = _g++;
				this.allocVar(s1.vars[i],null).merged.unshift(sreal.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
}
hxsl_Linker.__name__ = "hxsl.Linker";
Object.assign(hxsl_Linker.prototype, {
	__class__: hxsl_Linker
});
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
class hxsl_Printer {
	constructor(varId) {
		if(varId == null) {
			varId = false;
		}
		this.varId = varId;
	}
	shaderString(s) {
		this.buffer = new StringBuf();
		let _g = 0;
		let _g1 = s.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += ";\n";
		}
		if(s.vars.length > 0) {
			this.buffer.b += "\n";
		}
		let _g2 = 0;
		let _g3 = s.funs;
		while(_g2 < _g3.length) {
			let f = _g3[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += "\n\n";
		}
		return this.buffer.b;
	}
	exprString(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	addVar(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				let v;
				switch(q._hx_index) {
				case 0:
					let _g2 = q.max;
					v = "const" + (_g2 == null ? "" : "(" + _g2 + ")");
					break;
				case 1:
					v = "private";
					break;
				case 2:
					v = "nullable";
					break;
				case 3:
					v = "perObject";
					break;
				case 4:
					v = "name('" + q.n + "')";
					break;
				case 5:
					v = "shared";
					break;
				case 6:
					let _g3 = q.p;
					v = $hxEnums[_g3.__enum__].__constructs__[_g3._hx_index].toLowerCase() + "p";
					break;
				case 7:
					v = "range(" + q.min + "," + q.max + ")";
					break;
				case 8:
					v = "ignore";
					break;
				case 9:
					v = "perInstance(" + q.v + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += "@global ";
				break;
			case 1:
				this.buffer.b += "@input ";
				break;
			case 2:
				this.buffer.b += "@param ";
				break;
			case 3:
				this.buffer.b += "@var ";
				break;
			case 4:
				this.buffer.b += "@local ";
				break;
			case 5:
				this.buffer.b += "@output ";
				break;
			case 6:
				this.buffer.b += "@function ";
				break;
			}
		}
		this.buffer.b += "var ";
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += " : ";
		let _g = v.type;
		if(_g._hx_index == 13) {
			let _g1 = _g.vl;
			this.buffer.b += "{";
			let first = true;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let v = _g1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addVar(v,v.kind,tabs,v);
			}
			this.buffer.b += "}";
		} else {
			let v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	addFun(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		let first = true;
		let _g = 0;
		let _g1 = f.args;
		while(_g < _g1.length) {
			let a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += " ";
				first = false;
			} else {
				this.buffer.b += ", ";
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += " ";
		}
		let v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	addVarName(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += ".";
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	addConst(c) {
		let _this = this.buffer;
		let _this1 = _this.b;
		let tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			tmp = c.b;
			break;
		case 2:
			tmp = c.v;
			break;
		case 3:
			tmp = c.v;
			break;
		case 4:
			tmp = "\"" + c.v + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	addExpr(e,tabs) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			this.addConst(_g.c);
			break;
		case 1:
			this.addVarName(_g.v);
			break;
		case 2:
			let v = hxsl_Tools2.toString(_g.g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			this.buffer.b += "(";
			this.addExpr(_g.e,tabs);
			this.buffer.b += ")";
			break;
		case 4:
			let _g1 = _g.el;
			this.buffer.b += "{";
			tabs += "\t";
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let e = _g1[_g2];
				++_g2;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += ";";
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(_g1.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += "}";
			break;
		case 5:
			this.addExpr(_g.e1,tabs);
			this.buffer.b += Std.string(" " + hxsl_Printer.opStr(_g.op) + " ");
			this.addExpr(_g.e2,tabs);
			break;
		case 6:
			let _g3 = _g.e1;
			let _this = this.buffer;
			let _this1 = _this.b;
			let tmp;
			switch(_g.op._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(_g3,tabs);
			break;
		case 7:
			let _g4 = _g.init;
			this.addVar(_g.v,hxsl_VarKind.Local,tabs);
			if(_g4 != null) {
				this.buffer.b += " = ";
				this.addExpr(_g4,tabs);
			}
			break;
		case 8:
			let _g5 = _g.args;
			this.addExpr(_g.e,tabs);
			this.buffer.b += "(";
			let first = true;
			let _g6 = 0;
			while(_g6 < _g5.length) {
				let e = _g5[_g6];
				++_g6;
				if(first) {
					first = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += ")";
			break;
		case 9:
			let _g7 = _g.regs;
			this.addExpr(_g.e,tabs);
			this.buffer.b += ".";
			let _g8 = 0;
			while(_g8 < _g7.length) {
				let r = _g7[_g8];
				++_g8;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			let _g9 = _g.eelse;
			this.buffer.b += "if( ";
			this.addExpr(_g.econd,tabs);
			this.buffer.b += " ) ";
			this.addExpr(_g.eif,tabs);
			if(_g9 != null) {
				this.buffer.b += " else ";
				this.addExpr(_g9,tabs);
			}
			break;
		case 11:
			this.buffer.b += "discard";
			break;
		case 12:
			let _g10 = _g.e;
			this.buffer.b += "return";
			if(_g10 != null) {
				this.buffer.b += " ";
				this.addExpr(_g10,tabs);
			}
			break;
		case 13:
			this.buffer.b += "for( ";
			this.addVarName(_g.v);
			this.buffer.b += " in ";
			this.addExpr(_g.it,tabs);
			this.buffer.b += " ) ";
			this.addExpr(_g.loop,tabs);
			break;
		case 14:
			this.buffer.b += "continue";
			break;
		case 15:
			this.buffer.b += "break";
			break;
		case 16:
			this.addExpr(_g.e,tabs);
			this.buffer.b += "[";
			this.addExpr(_g.index,tabs);
			this.buffer.b += "]";
			break;
		case 17:
			let _g11 = _g.el;
			this.buffer.b += "[";
			let first1 = true;
			let _g12 = 0;
			while(_g12 < _g11.length) {
				let e = _g11[_g12];
				++_g12;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += "]";
			break;
		case 18:
			let _g13 = _g.def;
			let _g14 = _g.cases;
			this.buffer.b += "switch( ";
			this.addExpr(_g.e,tabs);
			this.buffer.b += ") {";
			let old = tabs;
			let _g15 = 0;
			while(_g15 < _g14.length) {
				let c = _g14[_g15];
				++_g15;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += "case ";
				let first = true;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += ", ";
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(_g13 != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(_g13,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			let _g16 = _g.loop;
			let _g17 = _g.e;
			if(_g.normalWhile == false) {
				let old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(_g16,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + old + "} while( ");
				this.addExpr(_g17,old);
				this.buffer.b += " )";
			} else {
				this.buffer.b += "while( ";
				this.addExpr(_g17,tabs);
				let old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(_g16,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + old + "}");
			}
			break;
		case 20:
			let _g18 = _g.e;
			let _g19 = _g.args;
			this.buffer.b += Std.string(_g.m);
			if(_g19.length > 0) {
				this.buffer.b += "(";
				let first = true;
				let _g = 0;
				while(_g < _g19.length) {
					let c = _g19[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += ", ";
					}
					this.addConst(c);
				}
				this.buffer.b += ")";
			}
			this.buffer.b += " ";
			this.addExpr(_g18,tabs);
			break;
		}
	}
	static opStr(op) {
		switch(op._hx_index) {
		case 0:
			return "+";
		case 1:
			return "*";
		case 2:
			return "/";
		case 3:
			return "-";
		case 4:
			return "=";
		case 5:
			return "==";
		case 6:
			return "!=";
		case 7:
			return ">";
		case 8:
			return ">=";
		case 9:
			return "<";
		case 10:
			return "<=";
		case 11:
			return "&";
		case 12:
			return "|";
		case 13:
			return "^";
		case 14:
			return "&&";
		case 15:
			return "||";
		case 16:
			return "<<";
		case 17:
			return ">>";
		case 18:
			return ">>>";
		case 19:
			return "%";
		case 20:
			return hxsl_Printer.opStr(op.op) + "=";
		case 21:
			return "...";
		case 22:
			return "=>";
		case 23:
			return " in ";
		}
	}
	static toString(e,varId) {
		if(varId == null) {
			varId = false;
		}
		return new hxsl_Printer(varId).exprString(e);
	}
	static shaderToString(s,varId) {
		if(varId == null) {
			varId = false;
		}
		return new hxsl_Printer(varId).shaderString(s);
	}
	static check(s,from) {
		try {
			let vars = new haxe_ds_IntMap();
			let regVars = [];
			let regVar = null;
			regVar = function(v,reg) {
				if(reg) {
					if(vars.h.hasOwnProperty(v.id)) {
						throw haxe_Exception.thrown("Duplicate var " + v.id);
					}
					vars.h[v.id] = v;
					regVars.push(v);
				} else {
					vars.remove(v.id);
				}
				let _g = v.type;
				if(_g._hx_index == 13) {
					let _g1 = _g.vl;
					let _g2 = 0;
					while(_g2 < _g1.length) {
						let v = _g1[_g2];
						++_g2;
						regVar(v,reg);
					}
				}
			};
			let checkExpr = null;
			checkExpr = function(e) {
				let _g = e.e;
				switch(_g._hx_index) {
				case 1:
					let _g1 = _g.v;
					if(!vars.h.hasOwnProperty(_g1.id)) {
						throw haxe_Exception.thrown("Unbound var " + _g1.name + "@" + _g1.id);
					}
					break;
				case 4:
					let _g2 = _g.el;
					let old = regVars;
					regVars = [];
					let _g3 = 0;
					while(_g3 < _g2.length) {
						let e = _g2[_g3];
						++_g3;
						checkExpr(e);
					}
					let _g4 = 0;
					while(_g4 < regVars.length) {
						let v = regVars[_g4];
						++_g4;
						regVar(v,false);
					}
					regVars = old;
					break;
				case 7:
					let _g5 = _g.init;
					if(_g5 != null) {
						checkExpr(_g5);
					}
					regVar(_g.v,true);
					break;
				case 13:
					let _g6 = _g.v;
					checkExpr(_g.it);
					regVar(_g6,true);
					checkExpr(_g.loop);
					regVar(_g6,false);
					break;
				default:
					hxsl_Tools.iter(e,checkExpr);
				}
			};
			let _g = 0;
			let _g1 = s.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				regVar(v,true);
			}
			let _g2 = 0;
			let _g3 = s.funs;
			while(_g2 < _g3.length) {
				let f = _g3[_g2];
				++_g2;
				let _g = 0;
				let _g1 = f.args;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					regVar(v,true);
				}
				checkExpr(f.expr);
				let _g4 = 0;
				let _g5 = f.args;
				while(_g4 < _g5.length) {
					let v = _g5[_g4];
					++_g4;
					regVar(v,false);
				}
			}
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				let e = _g1;
				let msg = e + "\n    in\n" + hxsl_Printer.shaderToString(s,true);
				if(from != null) {
					let _g = [];
					let _g1 = 0;
					while(_g1 < from.length) {
						let s = from[_g1];
						++_g1;
						_g.push(hxsl_Printer.shaderToString(s,true));
					}
					msg += "\n    from\n\n" + _g.join("\n\n");
				}
				throw haxe_Exception.thrown(msg);
			} else {
				throw _g;
			}
		}
	}
}
hxsl_Printer.__name__ = "hxsl.Printer";
Object.assign(hxsl_Printer.prototype, {
	__class__: hxsl_Printer
});
class hxsl_AllocParam {
	constructor(name,pos,instance,index,type) {
		this.name = name;
		this.pos = pos;
		this.instance = instance;
		this.index = index;
		this.type = type;
	}
}
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
Object.assign(hxsl_AllocParam.prototype, {
	__class__: hxsl_AllocParam
});
class hxsl_AllocGlobal {
	constructor(pos,path,type) {
		this.pos = pos;
		this.path = path;
		this.gid = hxsl_Globals.allocID(path);
		this.type = type;
	}
}
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
Object.assign(hxsl_AllocGlobal.prototype, {
	__class__: hxsl_AllocGlobal
});
class hxsl_RuntimeShaderData {
	constructor() {
	}
}
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
Object.assign(hxsl_RuntimeShaderData.prototype, {
	__class__: hxsl_RuntimeShaderData
});
class hxsl_ShaderInstanceDesc {
	constructor(shader,bits) {
		this.shader = shader;
		this.bits = bits;
	}
}
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
Object.assign(hxsl_ShaderInstanceDesc.prototype, {
	__class__: hxsl_ShaderInstanceDesc
});
class hxsl_RuntimeShader {
	constructor() {
		this.id = hxsl_RuntimeShader.UID++;
	}
}
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
Object.assign(hxsl_RuntimeShader.prototype, {
	__class__: hxsl_RuntimeShader
});
class hxsl_Serializer {
	constructor() {
	}
	readVarInt() {
		let b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	readType() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			let bits = this.input.readByte();
			let v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			let id = this.readVarInt();
			let t = this.types[id];
			if(t != null) {
				return t;
			}
			let f = $bind(this,this.readVar);
			let _g = [];
			let _g1 = 0;
			let _g2 = this.readVarInt();
			while(_g1 < _g2) {
				++_g1;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			let t1 = this.readType();
			let v1 = this.readVar();
			return hxsl_Type.TArray(t1,v1 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v1));
		case 16:
			let t2 = this.readType();
			let v2 = this.readVar();
			return hxsl_Type.TBuffer(t2,v2 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v2));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	readString() {
		let len = this.readVarInt();
		let s = this.input.read(len).getString(0,len);
		return s;
	}
	readConst() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	readExpr() {
		let k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		let e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			let f = $bind(this,this.readExpr);
			let _g = [];
			let _g1 = 0;
			let _g2 = this.readVarInt();
			while(_g1 < _g2) {
				++_g1;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			let op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			let e1 = this.readExpr();
			let f1 = $bind(this,this.readExpr);
			let _g3 = [];
			let _g4 = 0;
			let _g5 = this.readVarInt();
			while(_g4 < _g5) {
				++_g4;
				_g3.push(f1());
			}
			e = hxsl_TExprDef.TCall(e1,_g3);
			break;
		case 9:
			let e2 = this.readExpr();
			let bits = this.input.readUInt16();
			let swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				let _g = [];
				let _g1 = 0;
				let _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					let i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = _g;
			}
			e = hxsl_TExprDef.TSwiz(e2,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			let f2 = $bind(this,this.readExpr);
			let _g6 = [];
			let _g7 = 0;
			let _g8 = this.readVarInt();
			while(_g7 < _g8) {
				++_g7;
				_g6.push(f2());
			}
			e = hxsl_TExprDef.TArrayDecl(_g6);
			break;
		case 18:
			let e3 = this.readExpr();
			let _g9 = [];
			let _g10 = 0;
			let _g11 = this.readVarInt();
			while(_g10 < _g11) {
				++_g10;
				let f = $bind(this,this.readExpr);
				let _g = [];
				let _g1 = 0;
				let _g2 = this.readVarInt();
				while(_g1 < _g2) {
					++_g1;
					_g.push(f());
				}
				_g9.push({ values : _g, expr : this.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e3,_g9,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			let e4 = this.readString();
			let f3 = $bind(this,this.readConst);
			let _g12 = [];
			let _g13 = 0;
			let _g14 = this.readVarInt();
			while(_g13 < _g14) {
				++_g13;
				_g12.push(f3());
			}
			e = hxsl_TExprDef.TMeta(e4,_g12,this.readExpr());
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	readVar() {
		let id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		let v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		let nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			let _g = 0;
			while(_g < nq) {
				++_g;
				let qid = this.input.readByte();
				let q;
				switch(qid) {
				case 0:
					let n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	readFun() {
		let tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		let tmp1 = this.readVar();
		let f = $bind(this,this.readVar);
		let _g = [];
		let _g1 = 0;
		let _g2 = this.readVarInt();
		while(_g1 < _g2) {
			++_g1;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	unserialize(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		let tmp = this.readString();
		let f = $bind(this,this.readVar);
		let _g = [];
		let _g1 = 0;
		let _g2 = this.readVarInt();
		while(_g1 < _g2) {
			++_g1;
			_g.push(f());
		}
		let f1 = $bind(this,this.readFun);
		let _g3 = [];
		let _g4 = 0;
		let _g5 = this.readVarInt();
		while(_g4 < _g5) {
			++_g4;
			_g3.push(f1());
		}
		return { name : tmp, vars : _g, funs : _g3};
	}
}
hxsl_Serializer.__name__ = "hxsl.Serializer";
Object.assign(hxsl_Serializer.prototype, {
	__class__: hxsl_Serializer
});
class hxsl_ShaderList {
	constructor(s,n) {
		this.s = s;
		this.next = n;
	}
	static addSort(s,shaders) {
		let prev = null;
		let hd = shaders;
		while(hd != null && hd.s.priority < s.priority) {
			prev = hd;
			hd = hd.next;
		}
		if(prev == null) {
			return new hxsl_ShaderList(s,shaders);
		}
		prev.next = new hxsl_ShaderList(s,prev.next);
		return shaders;
	}
}
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
Object.assign(hxsl_ShaderList.prototype, {
	__class__: hxsl_ShaderList
});
class hxsl_ShaderInstance {
	constructor(shader) {
		this.id = hxsl_Tools.allocVarId();
		this.shader = shader;
		this.params = new haxe_ds_IntMap();
	}
}
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
Object.assign(hxsl_ShaderInstance.prototype, {
	__class__: hxsl_ShaderInstance
});
class hxsl_ShaderGlobal {
	constructor(v,gid) {
		this.v = v;
		this.globalId = gid;
	}
}
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
Object.assign(hxsl_ShaderGlobal.prototype, {
	__class__: hxsl_ShaderGlobal
});
class hxsl_ShaderConst {
	constructor(v,pos,bits) {
		this.v = v;
		this.pos = pos;
		this.bits = bits;
	}
}
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
Object.assign(hxsl_ShaderConst.prototype, {
	__class__: hxsl_ShaderConst
});
class hxsl_SharedShader {
	constructor(src) {
		this.instanceCache = new haxe_ds_IntMap();
		this.consts = null;
		this.globals = [];
		if(src == "") {
			return;
		}
		this.data = new hxsl_Serializer().unserialize(src);
		this.initialize();
	}
	initialize() {
		let _g = 0;
		let _g1 = this.data.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	makeInstance(constBits) {
		let $eval = new hxsl_Eval();
		let c = this.consts;
		while(c != null) {
			let c1 = c.v;
			let tmp;
			switch(c.v.type._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		let i = new hxsl_ShaderInstance($eval.eval(this.data));
		hxsl_Printer.check(i.shader,[this.data]);
		this.paramsCount = 0;
		let _g = 0;
		let _g1 = this.data.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	addParam($eval,i,v) {
		let _g = v.type;
		if(_g._hx_index == 13) {
			let _g1 = _g.vl;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let v = _g1[_g2];
				++_g2;
				this.addParam($eval,i,v);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	browseVar(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		let _g = v.type;
		if(_g._hx_index == 13) {
			let _g1 = _g.vl;
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let vs = _g1[_g2];
				++_g2;
				this.browseVar(vs,path);
			}
		} else {
			let globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			let bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				let pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				let c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
}
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
Object.assign(hxsl_SharedShader.prototype, {
	__class__: hxsl_SharedShader
});
class hxsl__$Splitter_VarProps {
	constructor(v) {
		this.v = v;
		this.read = 0;
		this.write = 0;
	}
}
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
Object.assign(hxsl__$Splitter_VarProps.prototype, {
	__class__: hxsl__$Splitter_VarProps
});
class hxsl_Splitter {
	constructor() {
	}
	split(s) {
		let vfun = null;
		let vvars = new haxe_ds_IntMap();
		let ffun = null;
		let fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		let _g = 0;
		let _g1 = s.funs;
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		let _g2 = 0;
		let _g3 = Lambda.array(vvars);
		while(_g2 < _g3.length) {
			let inf = _g3[_g2];
			++_g2;
			let v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					let nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					this.get(nv);
					v.kind = hxsl_VarKind.Local;
					let p = vfun.expr.p;
					let e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						let old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						let np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		let finits = [];
		let todo = [];
		let inf = fvars.iterator();
		while(inf.hasNext()) {
			let inf1 = inf.next();
			let v = inf1.v;
			switch(v.kind._hx_index) {
			case 1:
				let nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Var, type : v.type};
				this.uniqueName(nv);
				let i = vvars.h[v.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v);
					vvars.h[v.id] = i;
				}
				i.read++;
				let vp = new hxsl__$Splitter_VarProps(nv);
				vp.write = 1;
				vvars.h[nv.id] = vp;
				let fp = new hxsl__$Splitter_VarProps(nv);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : vfun.expr.p}), t : v.type, p : vfun.expr.p});
				this.varMap.set(v,nv);
				inf1.local = true;
				break;
			case 3:
				if(inf1.write > 0) {
					let nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Local, type : v.type};
					this.uniqueName(nv);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv,{ e : hxsl_TExprDef.TVar(v), t : v.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v,nv);
				}
				break;
			default:
			}
		}
		let _g4 = 0;
		while(_g4 < todo.length) {
			let v = todo[_g4];
			++_g4;
			fvars.h[v.v.id] = v;
		}
		let v = vvars.iterator();
		while(v.hasNext()) {
			let v1 = v.next();
			this.checkVar(v1,true,vvars,vfun.expr.p);
		}
		let v1 = fvars.iterator();
		while(v1.hasNext()) {
			let v = v1.next();
			this.checkVar(v,false,vvars,ffun.expr.p);
		}
		let v2 = this.varMap.keys();
		while(v2.hasNext()) {
			let v = v2.next();
			let v21 = this.varMap.h[this.varMap.h[v.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		let _g5 = ffun.expr.e;
		if(_g5._hx_index == 4) {
			let _g = _g5.el;
			let _g1 = 0;
			while(_g1 < finits.length) {
				let e = finits[_g1];
				++_g1;
				_g.unshift(e);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		let _g6 = [];
		let v3 = vvars.iterator();
		while(v3.hasNext()) {
			let v = v3.next();
			if(!v.local) {
				_g6.push(v.v);
			}
		}
		let _g7 = [];
		let v4 = fvars.iterator();
		while(v4.hasNext()) {
			let v = v4.next();
			if(!v.local) {
				_g7.push(v.v);
			}
		}
		_g6.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		_g7.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		return { vertex : { name : "vertex", vars : _g6, funs : [vfun]}, fragment : { name : "fragment", vars : _g7, funs : [ffun]}};
	}
	addExpr(f,e) {
		let _g = f.expr.e;
		if(_g._hx_index == 4) {
			_g.el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	checkVar(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				let i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	mapVars(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let v2 = this.varMap.h[_g.v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			let v21 = this.varMap.h[_g.v.__id__];
			if(v21 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v21,this.mapVars(_g.init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			let v22 = this.varMap.h[_g.v.__id__];
			if(v22 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v22,this.mapVars(_g.it),this.mapVars(_g.loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	get(v) {
		let i = this.vars.h[v.id];
		if(i == null) {
			let v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			let oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				let nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	uniqueName(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		let n = this.varNames.h[v.name];
		if(n != null && n != v) {
			let prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			let k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	checkExpr(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let inf = this.get(_g.v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			let _g1 = _g.e2;
			let _g2 = _g.e1;
			switch(_g.op._hx_index) {
			case 4:
				let _g3 = _g2.e;
				switch(_g3._hx_index) {
				case 1:
					let inf1 = this.get(_g3.v);
					inf1.write++;
					this.checkExpr(_g1);
					break;
				case 9:
					let _g4 = _g3.e.e;
					if(_g4._hx_index == 1) {
						let inf = this.get(_g4.v);
						inf.write++;
						this.checkExpr(_g1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				let _g5 = _g2.e;
				switch(_g5._hx_index) {
				case 1:
					let inf2 = this.get(_g5.v);
					if(inf2.write == 0) {
						inf2.requireInit = true;
					}
					inf2.read++;
					inf2.write++;
					this.checkExpr(_g1);
					break;
				case 9:
					let _g6 = _g5.e.e;
					if(_g6._hx_index == 1) {
						let inf = this.get(_g6.v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(_g1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			let _g7 = _g.init;
			let inf3 = this.get(_g.v);
			inf3.local = true;
			if(_g7 != null) {
				this.checkExpr(_g7);
				inf3.write++;
			}
			break;
		case 13:
			this.checkExpr(_g.it);
			let inf4 = this.get(_g.v);
			inf4.local = true;
			inf4.write++;
			this.checkExpr(_g.loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
}
hxsl_Splitter.__name__ = "hxsl.Splitter";
Object.assign(hxsl_Splitter.prototype, {
	__class__: hxsl_Splitter
});
class js_html__$CanvasElement_CanvasUtil {
	static getContextWebGL(canvas,attribs) {
		let ctx = canvas.getContext("webgl",attribs);
		if(ctx != null) {
			return ctx;
		}
		let ctx1 = canvas.getContext("experimental-webgl",attribs);
		if(ctx1 != null) {
			return ctx1;
		}
		return null;
	}
}
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
Math.__name__ = "Math";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	String.prototype.__class__ = String;
	String.__name__ = "String";
	Array.__name__ = "Array";
	Date.prototype.__class__ = Date;
	Date.__name__ = "Date";
}
haxe_ds_ObjectMap.count = 0;
haxe_MainLoop.add(hxd_System.updateCursor,-1);
{
	var hx__registerFont;
	hx__registerFont = function(name,data) {
		let s = window.document.createElement("style");
		s.type = "text/css";
		s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
		window.document.getElementsByTagName("head")[0].appendChild(s);
		let div = window.document.createElement("div");
		div.style.fontFamily = name;
		div.style.opacity = 0;
		div.style.width = "1px";
		div.style.height = "1px";
		div.style.position = "fixed";
		div.style.bottom = "0px";
		div.style.right = "0px";
		div.innerHTML = ".";
		div.className = "hx__loadFont";
		window.document.body.appendChild(div);
	};
}
js_Boot.__toStr = ({ }).toString;
hxd_App._hx_skip_constructor = false;
h2d_Object._hx_skip_constructor = false;
h3d_impl_RenderContext._hx_skip_constructor = false;
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	let _g = [];
	{
		let _g1 = 0;
		while(_g1 < 32) {
			let i = _g1++;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < i) {
				let k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_BaseMaterial._hx_skip_constructor = false;
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_pass_Base._hx_skip_constructor = false;
h3d_pass_ScreenFx._hx_skip_constructor = false;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
hxsl_Shader._hx_skip_constructor = false;
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_scene_Object._hx_skip_constructor = false;
h3d_scene_LightSystem._hx_skip_constructor = false;
h3d_scene_Renderer._hx_skip_constructor = false;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGgEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCHZpZXdwb3J0BQwCAAAcDm91dHB1dFBvc2l0aW9uBQwEAAAdCF9faW5pdF9fDgYAAB4GdmVydGV4DgYAAB8IZnJhZ21lbnQOBgAAAwIdAAAFBgYEAgsFDAkDKg4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIQ4CAgoKAg8FCgUMBQwGgQINBQwCDgUMBQwAAB4AAAUFCCADdG1wBQsEAAAJAykOAgoCDAUMEQAFCgEDAAAAAAAA8D8DBQsABgQCHAUMCQMqDgMJAx0OAgIgBQsCFAULAwkDHQ4CAiAFCwIVBQsDCgIMBQw5AAUKBQwFDAYECgIcBQwRAAUKBgEEBgAKAhwFDBEABQoKAhsFDBEABQoFCgUKCgIbBQw5AAUKBQoFCgsCGQIGgwoCHAUMEQAFCgIaBQoFCgAABgQCBgUMAhwFDAUMAAEfAAAFAgsGDgIYAgYJCgINBQwMAAMBA/yp8dJNYlA/AwICDAAAAAYEAgcFDAINBQwFDAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EgEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA8PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAQE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBUJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgWCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBcIc2hhZG93VXYFCgQAAAkDOg4BCgIWBQsRAAUKBQoACBgEek1heAMEAAAJAzUOAQoCFgULCAADAwAIGQNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggaDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhsBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBwGb2Zmc2V0BQoEAAAGAQYBChECDg8FDAAEAhsBBQwRAAUKAhUFCgUKAgYDBQoABgQCHAUKCQMoDgIGAwYBCQMDDgECGQMDCgIcBQoAAAMDBgEJAwIOAQIZAwMKAhwFCgQAAwMDBgAGAQkDAw4BAhkDAwoCHAUKBAADAwYBCQMCDgECGQMDCgIcBQoAAAMDAwUKBQoIHQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCHAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAh0DAgaDAgwDAhoDAwAAAAAAAQECAgAAAAEFAggeDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAChAAwMADh8BaQEEAAAGFQECAAAAAAEBAgwAAAABDwEAAAUECCAGb2Zmc2V0BQoEAAAGAQYBChECDw8FDAAMAh8BBQwRAAUKAhUFCgUKAgYDBQoABgQCIAUKCQMoDgIGAwYBCQMDDgECGQMDCgIgBQoAAAMDBgEJAwIOAQIZAwMKAiAFCgQAAwMDBgAGAQkDAw4BAhkDAwoCIAUKBAADAwYBCQMCDgECGQMDCgIgBQoAAAMDAwUKBQoIIQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCIAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiEDAgaDAgwDAh4DAwAAAAAAAQECAwAAAAEFAggiDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAFBAAwMADiMBaQEEAAAGFQECAAAAAAEBAkAAAAABDwEAAAUECCQGb2Zmc2V0BQoEAAAGAQYBChECEA8FDABAAiMBBQwRAAUKAhUFCgUKAgYDBQoABgQCJAUKCQMoDgIGAwYBCQMDDgECGQMDCgIkBQoAAAMDBgEJAwIOAQIZAwMKAiQFCgQAAwMDBgAGAQkDAw4BAhkDAwoCJAUKBAADAwYBCQMCDgECGQMDCgIkBQoAAAMDAwUKBQoIJQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCJAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiUDAgaDAgwDAiIDAwAAAAAAAAAACwICAgUFCCYJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJwVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJgULEQAFCgUKAwAIKAR6TWF4AwQAAAkDNQ4BCgImBQsIAAMDAAgpBWRlbHRhAwQAAAYDCQMVDgIEBgACJwMCCgMDAwIoAwMCKAMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAikDAwMDAwAFBAgqCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQsRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQsIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA4BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEAthbHBoYUN1dG9mZgMCAAARCXNtb290aGluZwMCAAASBm1lZGlhbg4GAAATCGZyYWdtZW50DgYAAAIDEgMUAXIDBAAAFQFnAwQAABYBYgMEAAADBQENCQMWDgIJAxUOAgIUAwIVAwMJAxUOAgkDFg4CAhQDAhUDAwIWAwMDAAABEwAABQQIFw10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgYCGRpc3RhbmNlAwQAAAAABgQCGAMLBgUCDwEBAgAAAAABAgoCFwUMAAADCwYFAg8BAQIBAAAAAQIKAhcFDAQAAwsGBQIPAQECAgAAAAECCgIXBQwIAAMLBgUCDwEBAgMAAAABAgoCFwUMDAADCQISDgMKAhcFDAAAAwoCFwUMBAADCgIXBQwIAAMDAwMDAwMGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEAMCEQMDBgACEAMCEQMDAhgDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	let _g = new haxe_ds_StringMap();
	{
		let _g1 = 0;
		let _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			let k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	let m = new haxe_ds_EnumValueMap();
	{
		let _g = 0;
		let _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			let g = _g1[_g];
			++_g;
			let n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	{
		let g = m.iterator();
		while(g.hasNext()) {
			let g1 = g.next();
			hxsl_GlslOut.KWDS.h[g1] = true;
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	let ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map